<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Auto.js自动化脚本开发</title>
    <url>/2020/autojs/</url>
    <content><![CDATA[<h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p><a href="https://stolenzc.lanzoui.com/iwN5Vhcxlkd">Auto.js手机app</a></p>
<p>电脑开发推荐使用<a href="/2020/vscode">VScode</a></p>
<h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><p>VScode编辑js脚本文件</p>
<p>VScode点击<code>查看&gt;命令面板</code>输入<code>auto.js:start server</code>启动服务；手机打开auto.js然后左滑打开连接电脑，输入电脑的ip地址（局域网地址），连接成功后VScode右下角会有弹出连接成功显示；电脑按<code>F5</code>键就可以将当前活动页代码发送到手机上执行。</p>
<h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><p>VScode：</p>
<ul>
<li><code>auto.js:Start Server</code> - 启动远程操作服务</li>
<li><code>auto.js:Stop Server</code> - 停止远程操作服务</li>
<li><code>auto.js:Run</code> &#x2F; <code>F5</code> - 在手机上运行当前活动页程序</li>
<li><code>auto.js:Stop</code> - 在手机上停止当前活动页脚本</li>
<li><code>auto.js:StopAll</code> - 停止手机上运行的所有脚本</li>
<li><code>auto.js:Save</code> - 将当前文件保存到手机默认目录下</li>
<li><code>auto.js:Run Project</code> - 在手机上运行项目</li>
<li><code>auto.js:Save Project</code> - 在手机上保存项目</li>
</ul>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><p>详细参考命令到<a href="https://hyb1996.github.io/AutoJs-Docs/#/">Auto.js文档</a></p>
<p><strong>注意</strong>：此处仅仅介绍本人用过的命令</p>
<h3 id="一般全局函数"><a href="#一般全局函数" class="headerlink" title="一般全局函数"></a>一般全局函数</h3><ul>
<li><code>sleep(n)</code> - 暂停运行n毫秒的时间</li>
<li><code>home()</code> - 相当于点击安卓的home按键</li>
<li><code>back()</code> - 相当于点击安卓的back按键</li>
<li><code>toast(message)</code> - 以气泡显示信息message几秒，安卓一般为2秒</li>
<li><code>exit()</code> - 立刻停止脚本运行</li>
<li><code>setScreenMetrics(x, y)</code> - 设置屏幕分辨率</li>
</ul>
<h3 id="点击"><a href="#点击" class="headerlink" title="点击"></a>点击</h3><ul>
<li><code>click(x, y)</code> - 点击指定的像素点</li>
<li><code>click(text[, i])</code> - 点击文本，入过有多个，则点击第i个，i从0开始数，不指定则会将所有的文本点击一次，返回是否全部成功</li>
<li><code>while(!click(&quot;扫一扫&quot;));</code> - 点击扫一扫，从文本处向其父视图寻找，直至发现一个可点击的部件为止。</li>
<li><code>swipe(x1, y1, x2, y2, duration)</code> - 从(x1, y1)滑动到(x2, y2)，持续时间为duration毫秒</li>
<li><code>press(x, y, duration)</code> - 长按(x, y)点，持续时间为duration毫秒</li>
</ul>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul>
<li><code>launchApp(appName)</code> - 指定应用名启动应用，如“支付宝”</li>
<li><code>launch(packageName)</code> - 指定应用的包名启动应用，如“com.eg.android.AlipayGphone”，该方法启动应用更快</li>
</ul>
<h3 id="图片和颜色"><a href="#图片和颜色" class="headerlink" title="图片和颜色"></a>图片和颜色</h3><ul>
<li><code>requestScreenCapture([landscape])</code> - 获取截图权限，返回是否具有权限；landscape为false, 则表示竖屏截图; true为横屏截图；该方法只用执行一次</li>
<li><code>captureScreen()</code> - 截取屏幕，返回一个image对象</li>
<li><code>images.pixel(image, x, y)</code> - 返回image图片(x, y)位置的ARGB值，用0xAARRGGBB表示</li>
<li><code>images.findColor(image, color, options)</code> - 区域找色，image中找color颜色，options为一个类似python字典的对象，region为区域，指定左上角x，y和区域的宽和高，threshold为颜色相似度，0为相同，255为所有颜色都相似，默认为4</li>
<li><code>images.findColorInRegion(img, color, x, y[, width, height, threshold])</code> - 用法同findColor</li>
<li><code>images.findImage(img, template[, options])</code> - 以图找图，img为原图，template为模板图，options和findColor用法相似；threshold图片相似度，取值范围为0~1的浮点数。默认值为0.9。region找图区域，用法和findColor一样，level默认不设置，会自动调整图片大小。</li>
<li><code>images.findImageInRegion(img, template, x, y[, width, height, threshold])</code> - 用法和findImage一样</li>
<li><code>colors.toString(color)</code> - 将颜色值转换为字符串</li>
</ul>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>监控我的支付宝蚂蚁庄园是否有小鸡偷吃的脚本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;auto&quot;</span>;</span><br><span class="line"><span class="comment">// 设置分辨率</span></span><br><span class="line"><span class="title function_">setScreenMetrics</span>(<span class="number">1080</span>, <span class="number">1920</span>);</span><br><span class="line"><span class="comment">// 获取竖屏截图权限</span></span><br><span class="line"><span class="title function_">requestScreenCapture</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    app.<span class="title function_">launch</span>(<span class="string">&quot;com.eg.android.AlipayGphone&quot;</span>);</span><br><span class="line">    <span class="title function_">sleep</span>(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">// 判断是否是主页</span></span><br><span class="line">    <span class="keyword">while</span>(!<span class="title function_">check_alipay_home</span>())&#123;</span><br><span class="line">        <span class="title function_">back</span>();</span><br><span class="line">        <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// check_ant_home();</span></span><br><span class="line">    <span class="title function_">watched_me</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查并进入支付宝首页</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check_alipay_home</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> scan = <span class="title function_">text</span>(<span class="string">&#x27;首页&#x27;</span>).<span class="title function_">findOnce</span>();</span><br><span class="line">    <span class="keyword">var</span> pay = <span class="title function_">text</span>(<span class="string">&#x27;理财&#x27;</span>).<span class="title function_">findOnce</span>();</span><br><span class="line">    <span class="keyword">if</span>(scan != <span class="literal">null</span> &amp;&amp; pay != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="title function_">click</span>(<span class="string">&quot;首页&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否进入了蚂蚁界面</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check_ant_home</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="title function_">click</span>(<span class="string">&quot;蚂蚁庄园&quot;</span>));</span><br><span class="line">    <span class="title function_">sleep</span>(<span class="number">800</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="title function_">captureScreen</span>();</span><br><span class="line">        <span class="keyword">var</span> color1 = images.<span class="title function_">pixel</span>(img, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="keyword">var</span> colors1 = colors.<span class="title function_">toString</span>(color1);</span><br><span class="line">        <span class="keyword">if</span>(colors1 == <span class="string">&quot;#ffb7eaff&quot;</span>)&#123;</span><br><span class="line">            <span class="title function_">sleep</span>(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">sleep</span>(<span class="number">500</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监控我的蚂蚁庄园</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">watched_me</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">// 进入蚂蚁庄园主页</span></span><br><span class="line">        <span class="title function_">check_ant_home</span>();</span><br><span class="line">        <span class="comment">// 获取截图</span></span><br><span class="line">        <span class="keyword">var</span> img = <span class="title function_">captureScreen</span>();</span><br><span class="line">        <span class="comment">// 判断左右是否有小鸡</span></span><br><span class="line">        <span class="keyword">var</span> color1 = images.<span class="title function_">pixel</span>(img, <span class="number">400</span>, <span class="number">1300</span>);</span><br><span class="line">        <span class="keyword">var</span> color2 = images.<span class="title function_">pixel</span>(img, <span class="number">850</span>, <span class="number">1300</span>);</span><br><span class="line">        <span class="keyword">var</span> colors1 = colors.<span class="title function_">toString</span>(color1);</span><br><span class="line">        <span class="keyword">var</span> colors2 = colors.<span class="title function_">toString</span>(color2);</span><br><span class="line">        <span class="comment">// 如果有小鸡来了，播放歌曲后退出</span></span><br><span class="line">        <span class="keyword">if</span>(colors1==<span class="string">&quot;#ff000000&quot;</span> || colors2==<span class="string">&quot;#ff000000&quot;</span>)&#123;</span><br><span class="line">            media.<span class="title function_">playMusic</span>(<span class="string">&quot;/storage/emulated/0/MIUI/.ringtone/五月天 我不愿让你一个人_&amp;_5b2e2bd6-6230-45c4-a1a5-e2a6bcdcd4b2.mp3&quot;</span>);</span><br><span class="line">            <span class="title function_">sleep</span>(<span class="number">30000</span>);</span><br><span class="line">            <span class="title function_">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">toast</span>(colors1 + colors2)</span><br><span class="line">        <span class="title function_">back</span>();</span><br><span class="line">        <span class="title function_">sleep</span>(<span class="number">700</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>监控蚂蚁庄园前三名是否有小鸡偷吃的脚本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;auto&quot;</span>;</span><br><span class="line"><span class="comment">// 设置分辨率</span></span><br><span class="line"><span class="title function_">setScreenMetrics</span>(<span class="number">1080</span>, <span class="number">1920</span>);</span><br><span class="line"><span class="comment">// 获取竖屏截图权限</span></span><br><span class="line"><span class="title function_">requestScreenCapture</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    app.<span class="title function_">launch</span>(<span class="string">&quot;com.eg.android.AlipayGphone&quot;</span>);</span><br><span class="line">    <span class="title function_">sleep</span>(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">// 判断是否是主页</span></span><br><span class="line">    <span class="keyword">while</span>(!<span class="title function_">check_alipay_home</span>())&#123;</span><br><span class="line">        <span class="title function_">back</span>();</span><br><span class="line">        <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// check_ant_home();</span></span><br><span class="line">    <span class="title function_">watched_other</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查并进入支付宝首页</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check_alipay_home</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> scan = <span class="title function_">text</span>(<span class="string">&#x27;首页&#x27;</span>).<span class="title function_">findOnce</span>();</span><br><span class="line">    <span class="keyword">var</span> pay = <span class="title function_">text</span>(<span class="string">&#x27;理财&#x27;</span>).<span class="title function_">findOnce</span>();</span><br><span class="line">    <span class="keyword">if</span>(scan != <span class="literal">null</span> &amp;&amp; pay != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="title function_">click</span>(<span class="string">&quot;首页&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否进入了蚂蚁界面</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check_ant_home</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="title function_">click</span>(<span class="string">&quot;蚂蚁庄园&quot;</span>));</span><br><span class="line">    <span class="title function_">sleep</span>(<span class="number">800</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="title function_">captureScreen</span>();</span><br><span class="line">        <span class="keyword">var</span> color1 = images.<span class="title function_">pixel</span>(img, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="keyword">var</span> colors1 = colors.<span class="title function_">toString</span>(color1);</span><br><span class="line">        <span class="keyword">if</span>(colors1 == <span class="string">&quot;#ffb7eaff&quot;</span>)&#123;</span><br><span class="line">            <span class="title function_">sleep</span>(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">sleep</span>(<span class="number">500</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">watched_other</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">check_ant_home</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">// 点击小鸡庄园的好友</span></span><br><span class="line">        <span class="title function_">click</span>(<span class="number">156</span>,<span class="number">1721</span>);</span><br><span class="line">        <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 截图</span></span><br><span class="line">        <span class="keyword">var</span> img = <span class="title function_">captureScreen</span>();</span><br><span class="line">        <span class="comment">// 监控第一位好友</span></span><br><span class="line">        <span class="keyword">var</span> color1 = images.<span class="title function_">pixel</span>(img,<span class="number">940</span>,<span class="number">1380</span>);</span><br><span class="line">        <span class="keyword">var</span> colors1 = colors.<span class="title function_">toString</span>(color1);</span><br><span class="line">        <span class="comment">// 监控第二位好友</span></span><br><span class="line">        <span class="keyword">var</span> color2 = images.<span class="title function_">pixel</span>(img,<span class="number">940</span>,<span class="number">1570</span>);</span><br><span class="line">        <span class="keyword">var</span> colors2 = colors.<span class="title function_">toString</span>(color2);</span><br><span class="line">        <span class="comment">// 监控第三个好友</span></span><br><span class="line">        <span class="keyword">var</span> color3 = images.<span class="title function_">pixel</span>(img,<span class="number">940</span>,<span class="number">1760</span>);</span><br><span class="line">        <span class="keyword">var</span> colors3 = colors.<span class="title function_">toString</span>(color3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否有小鸡来了，有小鸡来了像素点的值为#ff333333</span></span><br><span class="line">        <span class="keyword">if</span>(colors1==<span class="string">&quot;#ff333333&quot;</span> ||colors2==<span class="string">&quot;#ff333333&quot;</span> ||colors3==<span class="string">&quot;#ff333333&quot;</span> )&#123;</span><br><span class="line">            media.<span class="title function_">playMusic</span>(<span class="string">&quot;/storage/emulated/0/MIUI/.ringtone/五月天 我不愿让你一个人_&amp;_5b2e2bd6-6230-45c4-a1a5-e2a6bcdcd4b2.mp3&quot;</span>);</span><br><span class="line">            <span class="title function_">sleep</span>(<span class="number">30000</span>);</span><br><span class="line">            <span class="title function_">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">toast</span>(colors1 + colors2 + colors3)</span><br><span class="line">        <span class="title function_">back</span>();</span><br><span class="line">        <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术工具</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制位运算的魔力</title>
    <url>/2023/bit_operation/</url>
    <content><![CDATA[<p>本文仅用来收集一些二进制位运算的小技巧</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>关于原码、反码、补码</p>
<ul>
<li>原码：符号位+数值位</li>
<li>反码：符号位不变，数值位取反</li>
<li>补码：反码+1</li>
</ul>
<p>关于数的存储方式</p>
<ul>
<li>正数的存储为：原码</li>
<li>负数的存储为：补码</li>
</ul>
<h2 id="a-a"><a href="#a-a" class="headerlink" title="a &amp; -a"></a><code>a &amp; -a</code></h2><ul>
<li><code>a &amp; -a</code> 的结果是 a 的二进制表示中最低位的 1 所在位的值</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">56 &amp; -56</span><br><span class="line"></span><br><span class="line">56   0011 1000</span><br><span class="line">-56  1100 1000</span><br><span class="line">----------------</span><br><span class="line">8    0000 1000</span><br></pre></td></tr></table></figure>

<h2 id="a-2-n-1"><a href="#a-2-n-1" class="headerlink" title="a &amp; (2^n - 1)"></a><code>a &amp; (2^n - 1)</code></h2><p>当对一个数 <code>a</code> 求模 <code>2^n</code> 时，可以使用 <code>a &amp; (2^n - 1)</code> 来代替 <code>a % 2^n</code>，其中 <code>n</code> 为正整数</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">100 mod 16</span><br><span class="line"></span><br><span class="line">100  0110 0100</span><br><span class="line">15   0000 1111</span><br><span class="line">----------------</span><br><span class="line">4    0000 0100</span><br></pre></td></tr></table></figure>

<h2 id="bitmap"><a href="#bitmap" class="headerlink" title="bitmap"></a>bitmap</h2><p>bitmap 是一种数据结构，用来表示一个很大的整数集合，每个整数的出现与否用一个二进制位来表示，这种数据结构可以非常节省内存空间</p>
<p>例如：记录当日登录用户数，假设总共用户数为 1000 万，那么需要 1000 万个二进制位，即 1250000 字节，约 1.2M，最后统计时，只需要遍历一遍二进制位，将二进制位为 1 的个数加起来即可得到当日登录用户数</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>技术原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobra</title>
    <url>/2023/cobra/</url>
    <content><![CDATA[<h2 id="Cobra简介"><a href="#Cobra简介" class="headerlink" title="Cobra简介"></a>Cobra简介</h2><p><a href="https://github.com/spf13/cobra">Cobra</a> 是一个用于生成命令行工具的框架，非常简单、易用，kubernetes&#x2F;docker&#x2F;hugo&#x2F;etcd等都是使用Cobra开发的命令行工具。</p>
<h2 id="Cobra安装"><a href="#Cobra安装" class="headerlink" title="Cobra安装"></a>Cobra安装</h2><ul>
<li><code>go get -u github.com/spf13/cobra@latest</code>  - 安装项目内使用的 Cobra</li>
<li><code>go get -u github.com/spf13/cobra-cli@latest</code> - 安装 Cobra 命令行工具</li>
<li><code>import &#39;github.com/spf13/cobra&#39;</code> - 项目内使用</li>
</ul>
<h2 id="cobra-cli命令介绍"><a href="#cobra-cli命令介绍" class="headerlink" title="cobra-cli命令介绍"></a>cobra-cli命令介绍</h2><p><code>cobra-cli add [command name]</code> - 为应用添加一个命令</p>
<p><code>cobra-cli init [path] [flag]</code> - 使用cobra初始化一个新的应用</p>
<ul>
<li><code>-a</code> <code>—author</code> - 设置版权信息的作者名，默认为 <code>YOUR NAME</code></li>
<li><code>--config</code> - 设置邮箱等其他配置，存储在 <code>$HOME/.cobra.yaml</code> 中</li>
<li><code>-l</code> <code>--license</code> - 设置项目使用的开源协议</li>
<li><code>--viper</code> - 使用Viper加载config</li>
<li>新版本已经取消掉 <code>--pkg-name</code> 参数，取代的是 <code>path</code> 地址，如果输入 <code>path</code> 地址，则会在当前所在的目录下创建一个 <code>path</code> 地址，并初始化为 Cobra 模式的项目</li>
<li><code>-h</code> <code>--help</code> - 查看 <code>cobra-cli init</code> 的帮助</li>
</ul>
<h2 id="Cobra项目创建"><a href="#Cobra项目创建" class="headerlink" title="Cobra项目创建"></a>Cobra项目创建</h2><p>初始化一个cobra项目，必须在go module的目录下执行，示例中创建一个 <code>clid</code> 项目</p>
<ul>
<li><code>mkdir clid</code></li>
<li><code>cd clid</code></li>
<li><code>go mod init clid</code></li>
<li><code>cobra-cli init -a stolen -l MIT --viper</code></li>
</ul>
<p>cobra初始化后的目录结构如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── LICENSE</span><br><span class="line">├── cmd</span><br><span class="line">│   └── root.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure>

<h2 id="修改作者信息"><a href="#修改作者信息" class="headerlink" title="修改作者信息"></a>修改作者信息</h2><p>建议初始化就修改好作者的信息，否则修改会比较麻烦</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cobra-cli init --author stolen</span><br></pre></td></tr></table></figure>

<h2 id="新增命令"><a href="#新增命令" class="headerlink" title="新增命令"></a>新增命令</h2><p>会在cmd目录下创建一个新文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cobra-cli add version</span><br></pre></td></tr></table></figure>

<h2 id="命令编译与运行"><a href="#命令编译与运行" class="headerlink" title="命令编译与运行"></a>命令编译与运行</h2><ul>
<li><code>go build</code> - 编译命令</li>
<li><code>clid</code> - 运行命令</li>
</ul>
<h2 id="为命令添加一个子命令"><a href="#为命令添加一个子命令" class="headerlink" title="为命令添加一个子命令"></a>为命令添加一个子命令</h2><p><code>cobra-cli add [command name]</code> - 为应用添加一个命令</p>
<ul>
<li><code>cobra-cli add version</code> - 为应用添加一个 version 命令</li>
</ul>
<ol>
<li><p>命令的基本结构</p>
<ul>
<li>short - 显示父级命令帮助时，对该命令的简介</li>
<li>long - 显示当前命令帮助是显示的内容</li>
<li>run - 运行执行的操作</li>
</ul>
</li>
<li><p>将命令绑定到父命令上的方法</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">rootCmd.AddCommand(versionCmd)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="为命令添加一个选项"><a href="#为命令添加一个选项" class="headerlink" title="为命令添加一个选项"></a>为命令添加一个选项</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>｛</span><br><span class="line">    rootCmd.AddCommand(versionCmd)</span><br><span class="line">    versionCmd.Flags().StringP(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;stolen&quot;</span>, <span class="string">&quot;input author&quot;</span>)</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>

<h2 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> versionCmd = &amp;cobra.Command&#123;</span><br><span class="line">	Use:   <span class="string">&quot;version&quot;</span>,</span><br><span class="line">	Short: <span class="string">&quot;获取版本信息&quot;</span>,</span><br><span class="line">	Long: <span class="string">`获取版本信息，包括版本号，构建时间，构建人等信息`</span>,</span><br><span class="line">	Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">		author, err := cmd.Flags().GetString(<span class="string">&quot;author&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(err)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;version called, author: %s\n&quot;</span>, author)</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>三方库</tag>
      </tags>
  </entry>
  <entry>
    <title>Curl 使用手册</title>
    <url>/2023/curl/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CURL (Client URL)是一个命令行工具，用于在命令行下发送 HTTP 请求。对于热爱命令行的人来说，这个是必备的工具。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl https://api.github.com/versions</span><br><span class="line">[</span><br><span class="line">  <span class="string">&quot;2022-11-28&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><h3 id="A"><a href="#A" class="headerlink" title="-A"></a>-A</h3><p>设置请求头中的代理头 User-Agent 字段。curl 默认的代理头是 <code>curl/[version]</code></p>
<p>例如机器内的 curl 版本是 7.64.1，那么默认的 User-Agent 就是 <code>curl/7.64.1</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;GET /versions HTTP/1.1&quot;</span> 200 250 <span class="string">&quot;-&quot;</span> <span class="string">&quot;curl/7.64.1&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果我们想要自定义 User-Agent，可以使用 <code>-A</code> 参数，以下示例就将请求头改为了 Edge 浏览器的 User-Agent</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -A <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.78&quot;</span> https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<p>也可以通过 <code>-H</code> 参数来设置请求头</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -H <span class="string">&quot;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.78&quot;</span> https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<h3 id="b"><a href="#b" class="headerlink" title="-b"></a>-b</h3><p>设置请求头中的 Cookie 字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -b <span class="string">&quot;logged_in=yes;dotcom_user=stolenzc;&quot;</span> https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<p>如果需要读取文件，可以使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -b cookie.txt https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<h3 id="c"><a href="#c" class="headerlink" title="-c"></a>-c</h3><p>将服务器返回的响应头中的 Cookie 字段写入文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -c cookie.txt https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<h3 id="d"><a href="#d" class="headerlink" title="-d"></a>-d</h3><p>发送 POST 请求的请求体数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -X POST -d <span class="string">&quot;name=stolenzc&amp;password=123&quot;</span> https://api.github.com/versions</span><br><span class="line">&gt; curl -X POST -d <span class="string">&quot;name=stolenzc&quot;</span> -d <span class="string">&quot;password=123&quot;</span> https://api.github.com/versions</span><br><span class="line">&gt; curl -X POST -d <span class="string">&#x27;@data.json&#x27;</span> https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<p>默认的请求头中的 Content-Type 是 <code>application/x-www-form-urlencoded</code>，如果需要发送 JSON 格式的数据，可以使用 <code>-H</code> 参数来设置请求头</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -X POST -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&#x27;&#123;&quot;name&quot;:&quot;stolenzc&quot;,&quot;password&quot;:&quot;123&quot;&#125;&#x27;</span> https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<h3 id="–data-urlencode"><a href="#–data-urlencode" class="headerlink" title="–data-urlencode"></a>–data-urlencode</h3><p>发送 POST 请求的请求体数据，会对数据进行 URL 编码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -X POST --data-urlencode <span class="string">&quot;name=stolen zc&amp;password=123&quot;</span> https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<h3 id="e"><a href="#e" class="headerlink" title="-e"></a>-e</h3><p>设置请求头中的 Referer 字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -e <span class="string">&quot;https://stolenzc.com&quot;</span> https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<p>也可以通过 <code>-H</code> 参数来设置请求头中的改参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -H <span class="string">&quot;Referer: https://stolenzc.com&quot;</span> https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<h3 id="F"><a href="#F" class="headerlink" title="-F"></a>-F</h3><p>发送 POST 请求的请求体数据，用于上传二进制文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -F <span class="string">&#x27;file=@photo.png&#x27;</span> https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<p>该参数会自动设置请求头中的 Content-Type 为 <code>multipart/form-data</code>，</p>
<p>-F 也可以设置 MIME 类型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -F <span class="string">&#x27;file=@photo.png;type=image/png&#x27;</span> https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<p>-G</p>
<p>用来构建 GET 请求的请求体数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -G -d <span class="string">&quot;name=stolenzc&quot;</span> -d <span class="string">&quot;password=123&quot;</span> https://api.github.com/versions</span><br><span class="line"></span><br><span class="line">实际请求url为: https://api.github.com/versions?name=stolenzc&amp;password=123</span><br></pre></td></tr></table></figure>

<p>默认会发送一个 GET 请求，如果去掉 <code>-G</code> 参数，那么会发送一个 POST 请求，如果需要对数据进行 URL 编码，可以使用 <code>--data-urlencode</code> 参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -G --data-urlencode <span class="string">&quot;name=stolen zc&amp;password=123&quot;</span> https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<h3 id="H"><a href="#H" class="headerlink" title="-H"></a>-H</h3><p>设置 http 请求头</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&#x27;&#123;&quot;name&quot;: &quot;stolenzc&quot;, &quot;password&quot;: &quot;123&quot;&#125;&#x27;</span> https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<h3 id="i"><a href="#i" class="headerlink" title="-i"></a>-i</h3><p>用于打印出服务器回应的 http 头信息</p>
<p>会先打印出响应头，然后空一行，然后打印出响应体</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -i https://api.github.com/versions</span><br><span class="line">HTTP/2 200</span><br><span class="line">server: GitHub.com</span><br><span class="line"><span class="built_in">date</span>: Mon, 06 Feb 2023 14:33:56 GMT</span><br><span class="line">content-type: application/json; charset=utf-8</span><br><span class="line">content-length: 19</span><br><span class="line">cache-control: public, max-age=60, s-maxage=60</span><br><span class="line">vary: Accept, Accept-Encoding, Accept, X-Requested-With</span><br><span class="line">etag: <span class="string">&quot;e2ebdf109e4e2a25e3dafbe449a68700db7044ebea246b289a65139cb0a0b333&quot;</span></span><br><span class="line">x-github-media-type: github.v3; format=json</span><br><span class="line">x-github-api-version-selected: 2022-11-28</span><br><span class="line">access-control-expose-headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset</span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">strict-transport-security: max-age=31536000; includeSubdomains; preload</span><br><span class="line">x-frame-options: deny</span><br><span class="line">x-content-type-options: nosniff</span><br><span class="line">x-xss-protection: 0</span><br><span class="line">referrer-policy: origin-when-cross-origin, strict-origin-when-cross-origin</span><br><span class="line">content-security-policy: default-src <span class="string">&#x27;none&#x27;</span></span><br><span class="line">x-ratelimit-limit: 60</span><br><span class="line">x-ratelimit-remaining: 55</span><br><span class="line">x-ratelimit-reset: 1675694126</span><br><span class="line">x-ratelimit-resource: core</span><br><span class="line">x-ratelimit-used: 5</span><br><span class="line">accept-ranges: bytes</span><br><span class="line">x-github-request-id: 4DB5:16B1:542E0:5CB14:63E10FD4</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  <span class="string">&quot;2022-11-28&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="I-–head"><a href="#I-–head" class="headerlink" title="-I&#x2F;–head"></a>-I&#x2F;–head</h3><p>像服务器发送 HEAD 请求，只打印出响应头信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -I https://api.github.com/versions</span><br><span class="line">HTTP/2 200</span><br><span class="line">server: GitHub.com</span><br><span class="line"><span class="built_in">date</span>: Mon, 06 Feb 2023 14:37:00 GMT</span><br><span class="line">content-type: application/json; charset=utf-8</span><br><span class="line">content-length: 19</span><br><span class="line">cache-control: public, max-age=60, s-maxage=60</span><br><span class="line">vary: Accept, Accept-Encoding, Accept, X-Requested-With</span><br><span class="line">etag: <span class="string">&quot;e2ebdf109e4e2a25e3dafbe449a68700db7044ebea246b289a65139cb0a0b333&quot;</span></span><br><span class="line">x-github-media-type: github.v3; format=json</span><br><span class="line">x-github-api-version-selected: 2022-11-28</span><br><span class="line">access-control-expose-headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset</span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">strict-transport-security: max-age=31536000; includeSubdomains; preload</span><br><span class="line">x-frame-options: deny</span><br><span class="line">x-content-type-options: nosniff</span><br><span class="line">x-xss-protection: 0</span><br><span class="line">referrer-policy: origin-when-cross-origin, strict-origin-when-cross-origin</span><br><span class="line">content-security-policy: default-src <span class="string">&#x27;none&#x27;</span></span><br><span class="line">x-ratelimit-limit: 60</span><br><span class="line">x-ratelimit-remaining: 58</span><br><span class="line">x-ratelimit-reset: 1675697820</span><br><span class="line">x-ratelimit-resource: core</span><br><span class="line">x-ratelimit-used: 2</span><br><span class="line">accept-ranges: bytes</span><br><span class="line">x-github-request-id: 4D93:3C49:65424:6E189:63E1109A</span><br></pre></td></tr></table></figure>

<h3 id="k"><a href="#k" class="headerlink" title="-k"></a>-k</h3><p>忽略 ssl 证书验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -k https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<h3 id="L"><a href="#L" class="headerlink" title="-L"></a>-L</h3><p>让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -L -d <span class="string">&#x27;tweet=hi&#x27;</span> https://api.twitter.com/tweet</span><br></pre></td></tr></table></figure>

<h3 id="limit-rate"><a href="#limit-rate" class="headerlink" title="limit-rate"></a>limit-rate</h3><p>限制传输速度，模拟慢速网络环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --limit-rate 1000B https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<h3 id="o"><a href="#o" class="headerlink" title="-o"></a>-o</h3><p>将服务器响应的内容保存到文件中，类似于 wget 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -o get_docker.sh https://get.docker.com</span><br></pre></td></tr></table></figure>

<h3 id="O"><a href="#O" class="headerlink" title="-O"></a>-O</h3><p>将服务器响应的内容保存到文件中，文件名从 URL 中获取</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -O https://www.baidu.com/index.html</span><br></pre></td></tr></table></figure>

<p>如果无法从 URL 中获取文件名，下载会失败</p>
<h3 id="s-–silent"><a href="#s-–silent" class="headerlink" title="-s&#x2F;–silent"></a>-s&#x2F;–silent</h3><p>静默模式，不输出任何错误信息，如果报错，输出为空，如果正常，输出正常的响应内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -s https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<h3 id="S"><a href="#S" class="headerlink" title="-S"></a>-S</h3><p>指定输出错误信息，通常与 -s 一起使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -sS https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<h3 id="u"><a href="#u" class="headerlink" title="-u"></a>-u</h3><p>指定用户名和密码，用于 HTTP 认证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -u username:password https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<p>会自动设置 http 请求头中的 <code>Authorization: Basic xxx</code>，其中 xxx 是 base64 编码的用户名和密码</p>
<p>如果只输入了用户名，没有输入密码，会提示输入密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -u username https://api.github.com/versions</span><br><span class="line">&gt; password</span><br></pre></td></tr></table></figure>

<h3 id="v-–trace"><a href="#v-–trace" class="headerlink" title="-v&#x2F;–trace"></a>-v&#x2F;–trace</h3><p>输出通信过程，用于调试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -v https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<p>–trace 也可以用于调试，还会输出原始的二进制数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl --trace - https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<h3 id="x"><a href="#x" class="headerlink" title="-x"></a>-x</h3><p>指定代理服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -x socks5://127.0.0.1:1080 https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<h3 id="X"><a href="#X" class="headerlink" title="-X"></a>-X</h3><p>指定 HTTP 请求方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl -X POST -d <span class="string">&#x27;username=stolenzc&#x27;</span> https://api.github.com/versions</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考自阮一峰老师的网络日志：<a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl 命令详解</a>，部分内容有删改</p>
</blockquote>
]]></content>
      <categories>
        <category>Script</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker的安装及其日常使用</title>
    <url>/2020/docker/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Ubuntu安装</p>
<ol>
<li><code>sudo apt update</code> - 更新软件包</li>
<li><code>sudo apt -y install apt-transport-https ca-certificates curl software-properties-common</code> - 安装可能用到的依赖</li>
<li><code>curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</code> - 添加阿里云源的密钥</li>
<li><code>sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</code> - 添加阿里云源信息</li>
<li><code>sudo apt update</code> - 更新索引库</li>
<li><code>sudo apt-get remove docker docker-engine docker.io</code> - 如果存在docker需要先删除</li>
<li><code>sudo apt install docker-ce</code> - 安装docker</li>
</ol>
<p>Centos安装</p>
<ol>
<li><code>uname -r</code> - 查看内核版本(centos7 64位要求3.10+，centos6 64位要求2.6+)</li>
<li><code>yum update</code> - 更新底层库文件</li>
<li><code>yum erase -y docker docker-common docker-engine</code> - 移除可能存在的旧版docker</li>
<li><code>yum install -y yum-utils device-mapper-persistent-data lvm2</code> - 安装工具包和依赖项</li>
<li><code>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code> - 添加docker-ce源</li>
<li><code>yum makecache fast</code> - 做本地缓存，加快安装速度</li>
<li><code>yum -y install docker-ce</code> - yum安装docker</li>
<li><code>systemctl start docker</code> - 启动docker</li>
<li><code>systemctl enable docker</code> - 设置开机自启动</li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置主要就是更换docker源</p>
<p>Linux下更改国内镜像在<code>/etc/docker/daemon.json</code>中添加以下代码</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="http://hub.daocloud.io/">daocloud</a>也可以下载镜像，且有较详细的配置参数</p>
</blockquote>
<p>配置私服拉取镜像</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;:</span> [<span class="string">&quot;https://registry.docker-cn.com&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;:</span> [<span class="string">&quot;ip:port&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>

<p>也可以访问<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">阿里云镜像服务</a>，注册后获取镜像加速地址</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="普通命令"><a href="#普通命令" class="headerlink" title="普通命令"></a>普通命令</h3><ul>
<li><code>docker version</code> - 查看docker版本</li>
<li><code>docker info</code> - 查看详细信息</li>
<li><code>docker network create isolated</code> - 创建docker网络</li>
</ul>
<h3 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h3><ul>
<li><code>docker pull 镜像名</code> - 下载镜像</li>
<li><code>docker images</code> - 查看所有本地的镜像</li>
<li><code>docker search 镜像名</code> - 查找镜像</li>
<li><code>docker rmi 镜像id/镜像名</code> - 删除镜像</li>
<li><code>docker save -o 导出的路径 镜像id</code> - 导出镜像到文件</li>
<li><code>docker load -i 镜像文件</code> - 加载本地到镜像文件</li>
<li><code>docker tag 镜像id 镜像名:镜像版本</code> - 重命名镜像</li>
<li><code>docker tag 旧镜像名:旧版本 新镜像名:新版本</code> - 复制一个镜像</li>
<li><code>docker push 地址名/仓库名/镜像名:版本名</code> - 推送镜像</li>
</ul>
<h3 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h3><ul>
<li><p><code>docker run -d -p 80:80 --name mynginx --rm nginx:latest [command]</code> - 创建并运行容器，</p>
<ul>
<li><code>-d</code> - 后台运行</li>
<li><code>-i</code> - 启动一个可交互的容器，并持续打开标准输入</li>
<li><code>-t</code> - 终端关联到容器的标准输入输出上</li>
<li><code>-p port1:port2</code> - 指定端口 外部端口:内部端口</li>
<li><code>-v/--volume 外部文件夹:内部文件夹</code> - 数据卷操作，将外部文件夹映射到容器内部文件夹</li>
<li><code>--link 容器名:自定义网络别名</code> - 给容器网络设置别名</li>
<li><code>--name 容器名字</code> - 给创建的容器命名</li>
<li><code>-e 环境变量名=环境变量值</code> - 设置容器全局变量</li>
<li><code>--rm</code> - 为停止容器的时候容器自动删除</li>
<li><code>镜像名:版本号</code> - 指定镜像和版本，latest为最新版本，默认不写也为最新版本</li>
<li><code>command</code> - 表示运行容器时的启动命令</li>
</ul>
</li>
<li><p><code>docker ps [-qa]</code> - 查看正在运行到容器</p>
<ul>
<li><code>-q</code> - 只查看容器到标识</li>
<li><code>-a</code> - 查看全部到容器，包括未运行到容器</li>
</ul>
</li>
<li><p><code>docker logs -f 容器id</code> - 查看容器到日志</p>
<ul>
<li><code>-f</code> - 可以滚动到查看日志到最后几行</li>
</ul>
</li>
<li><p><code>docker exec -it 容器ID/容器名 bash</code> - 进入到容器内部命令行</p>
</li>
<li><p><code>docker stop 容器名称/容器id</code> - 停止正在运行的容器</p>
</li>
<li><p><code>docker stop $(docker ps -qa)</code> - 停止所有的容器</p>
</li>
<li><p><code>docker rm -f 容器id</code> - 删除容器</p>
<ul>
<li><code>-f</code> - 强制删除容器（包括正在运行的容器）</li>
</ul>
</li>
<li><p><code>docker start 容器名称</code> - 运行已经创建的容器</p>
</li>
<li><p><code>docker restart 容器名称</code> - 重启正在运行的容器</p>
</li>
<li><p><code>docker cp 文件名 容器id:容器内部路径</code> - 拷贝文件到容器中</p>
</li>
<li><p><code>docker container ls -a</code> - 查看所有的容器，不加-a表示正在运行的容器</p>
</li>
<li><p><code>docker container prune</code> - 清空所有容器</p>
</li>
<li><p><code>docker inspect 容器id</code> - 获取容器底层信息</p>
<ul>
<li><code>IPAddress</code> - ip地址</li>
</ul>
</li>
</ul>
<h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><ul>
<li><p><code>docker volume create 数据卷名称</code> - 创建数据卷</p>
<ul>
<li>创建数据卷之后，默认会存放在&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;数据卷名称&#x2F;_data</li>
</ul>
</li>
<li><p><code>docker volume inspect 数据卷名称</code> - 查看数据卷详细信息</p>
</li>
<li><p><code>docker volumes ls</code> - 查看全部数据卷</p>
</li>
<li><p><code>docker volumes rm 数据卷名称</code> - 删除数据卷</p>
</li>
<li><p><code>docker run -v 数据卷名称:容器内部路径 镜像id</code> - 映射数据卷，会自动复制容器的文件到宿主机文件夹</p>
</li>
<li><p><code>docker run -v 宿主机路径:容器内部路径 镜像id</code> - 直接指定一个路径作为数据卷的存放地址，这个地址是空的</p>
</li>
</ul>
<h3 id="自定义docker镜像"><a href="#自定义docker镜像" class="headerlink" title="自定义docker镜像"></a>自定义docker镜像</h3><ol>
<li><p>创建一个Dockerfile文件，并指定自定义镜像</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#: 注释，指令大小写不敏感，但是建议指令大写，内容小写</span></span><br><span class="line"><span class="keyword">FROM</span>: 指定当前自定义镜像依赖的环境，dockerfile第一条非注释的命令必须是<span class="keyword">from</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash">: 将相对路径下的内容复制到镜像中</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash">: 将文件写入到镜像中（和copy的区别是copy是运行镜像时拷贝文件，add是构建镜像时拷贝进入）</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash">: 生命镜像到默认目录</span></span><br><span class="line"><span class="keyword">USER</span>: 镜像中的启动用户名</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash">: 构建镜像时执行命令</span></span><br><span class="line"><span class="keyword">ENV</span>: 指定镜像中的环境变量</span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash">: 需要执行的命令（在workdir下执行，可以写多个，以最后一个为准）</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash">: 如果dockerfile中没有run命令，则运行镜像中 /entrypoint.sh 文件，注意需要给执行权限</span></span><br><span class="line"><span class="keyword">ARG</span>: 用于指定传递给构建运行时的变量</span><br><span class="line"><span class="keyword">EXPOSE</span>: 指定于外界交互的端口</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash">: 用于为镜像添加元数据</span></span><br><span class="line">  <span class="keyword">maintainer</span>: 维护者信息</span><br><span class="line">  version: 版本信息</span><br></pre></td></tr></table></figure>
</li>
<li><p>制作镜像<code>docker build -t 镜像名称:[tag] .</code></p>
<ul>
<li><code>-t</code> - 指定版本</li>
<li><code>.</code> - 表示将当前目录下的文件编译为镜像</li>
</ul>
</li>
<li><p>docker commit和docker build的区别</p>
<p><code>docker commit 容器id 自定义镜像名字</code> - 将容器打包成镜像<br><code>docker build -t 镜像名称:[tag] .</code> - 通过dockerfile创建镜像</p>
</li>
</ol>
<h3 id="Docker-compoes"><a href="#Docker-compoes" class="headerlink" title="Docker-compoes"></a>Docker-compoes</h3><ol>
<li>下载docker-compose文件，直接从github下载对应文件，修改文件的可执行权限并配置环境变量即可使用</li>
<li>编写docker-compose.yml文件</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span>          <span class="comment"># 指定版本号，该配置为固定配置，根据不同的docker-compose决定</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span>              <span class="comment"># 服务的名称</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>   <span class="comment"># 表示只要docker启动了，容器就一起启动</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span>  <span class="comment"># 指定镜像</span></span><br><span class="line">    <span class="attr">continer_name:</span> <span class="string">mysql</span>  <span class="comment"># 指定容器的名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span>     <span class="comment"># 指定端口号映射</span></span><br><span class="line">    <span class="attr">envirement:</span>       <span class="comment"># 指定环境变量</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">~/volumes/mysql/data:/var/lib/mysql</span>   <span class="comment"># 指定数据卷</span></span><br></pre></td></tr></table></figure>

<h2 id="推送镜像到阿里云"><a href="#推送镜像到阿里云" class="headerlink" title="推送镜像到阿里云"></a>推送镜像到阿里云</h2><ol>
<li>首先在阿里云创建命名空间，相当于仓库名</li>
<li><code>docker login --username=王大锤 registry.cn-hangzhou.aliyuncs.com</code> 本地登录阿里云</li>
<li><code>docker tag 旧镜像名:旧版本 新镜像名:新版本</code> 修改镜像名称<br><strong>注意</strong>：新镜像名需要按照：<code>阿里云地址/阿里云创建到命名空间/自定义名称或者阿里云创建的仓库名:版本</code>的格式</li>
<li><code>docker push 新镜像名:版本号</code>推送到阿里云镜像仓库</li>
<li><code>docker pull 新镜像名:版本号</code>将远端到镜像拉到本地</li>
</ol>
<h2 id="常见容器创建命令"><a href="#常见容器创建命令" class="headerlink" title="常见容器创建命令"></a>常见容器创建命令</h2><p><code>docker run -d -p 6379:6379 --name redis-master redis:latest redis-server --requirepass 1qaz2wsx</code> - 创建一个redis容器并设置密码为1qaz2wsx</p>
<p><code>docker run -d -p 6380:6379 --link redis-master:redis-master --name redis-slave-1 redis:latest redis-server --slaveof redis-master 6379 --masterauth 1qaz2wsx</code> - 创建一个redis从机容器，并关联名称为redis-server的主机</p>
<p><code>docker run -d -p 3306:3306 -v /root/docker/mysql/conf:/etc/mysql/mysql.conf.d -v /root/docker/mysql/data:/var/lib/mysql --name mysql57 -e &quot;MYSQL_ROOT_PASSWORD=123456&quot; mysql:5.7.29</code> - 创建一个MySQL的容器设置数据库密码为123456并将做数据备份</p>
<h2 id="常见故障"><a href="#常见故障" class="headerlink" title="常见故障"></a>常见故障</h2><h3 id="docker启动后命令无法使用"><a href="#docker启动后命令无法使用" class="headerlink" title="docker启动后命令无法使用"></a>docker启动后命令无法使用</h3><p>报错：Got permission denied while trying to connect to the Docker daemon socket at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock: Get <code>http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/json</code>: dial unix &#x2F;var&#x2F;run&#x2F;docker.sock: connect: permission denied</p>
<p>原因：docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。</p>
<p>解决办法：</p>
<ol>
<li>获取root权限使用docker</li>
<li>docker守护进程启动的时候，会默认赋予名字为docker的用户组读写Unix socket的权限，因此只要创建docker用户组，并将当前用户加入到docker用户组中，那么当前用户就有权限访问Unix socket了，进而也就可以执行docker相关命令</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> groupadd docker     <span class="comment">#添加docker用户组</span></span><br><span class="line"><span class="built_in">sudo</span> gpasswd -a <span class="variable">$USER</span> docker     <span class="comment">#将登陆用户加入到docker用户组中</span></span><br><span class="line">newgrp docker     <span class="comment">#更新用户组</span></span><br><span class="line">docker ps    <span class="comment">#测试docker命令是否可以使用sudo正常使用</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF的Serializer</title>
    <url>/2020/drf_serializer/</url>
    <content><![CDATA[<h2 id="名词释义"><a href="#名词释义" class="headerlink" title="名词释义"></a>名词释义</h2><p>序列化：模型转换为json，即对象-字典-json</p>
<p>反序列化：json转换为模型，即json-字典-对象</p>
<h2 id="字段参数"><a href="#字段参数" class="headerlink" title="字段参数"></a>字段参数</h2><p>默认使用模型中的字段约束进行校验，自定义字段约束参考<a href="https://www.django-rest-framework.org/api-guide/fields/">Serializer fields</a></p>
<p>常用的约束包括：</p>
<ol>
<li><p>通用参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>read_only = True</code></td>
<td>当前字段只能进行序列化输出（用于不需要反序列化输入的字段）</td>
</tr>
<tr>
<td><code>write_only = True</code></td>
<td>当前字段只能进行反序列化输入，不进行序列化输出</td>
</tr>
<tr>
<td><code>required = True</code></td>
<td>在反序列化时是必填字段，默认为True</td>
</tr>
<tr>
<td><code>allow_null = False</code></td>
<td>当前字段是否允许传None，默认是False（必填字段False，反之则True）</td>
</tr>
<tr>
<td><code>allow_blank = False</code></td>
<td>当前字段是否运行为空，默认是False（必填字段False，反之则True）</td>
</tr>
<tr>
<td><code>default = xx</code></td>
<td>指定在反序列化时，当前字段没值时所使用的默认值</td>
</tr>
<tr>
<td><code>validators=校验器</code></td>
<td>当前字段所使用的校验器（下面介绍常用的）</td>
</tr>
<tr>
<td><code>error_messages</code></td>
<td>包含错误key-value的字段（下面会举例）</td>
</tr>
<tr>
<td><code>label</code></td>
<td>当前字段在前端的api页面中所显示的字段名称</td>
</tr>
</tbody></table>
</li>
<li><p>选项参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>max_length</code></td>
<td>字段最大长度</td>
</tr>
<tr>
<td><code>min_length</code></td>
<td>字段最小长度</td>
</tr>
<tr>
<td><code>trim_whitespace</code></td>
<td>是否截断空字符串</td>
</tr>
<tr>
<td><code>max_value</code></td>
<td>字段最大值</td>
</tr>
<tr>
<td><code>min_value</code></td>
<td>字段最小值</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="字段校验-反序列化"><a href="#字段校验-反序列化" class="headerlink" title="字段校验(反序列化)"></a>字段校验(反序列化)</h2><p>对单个字段校验使用的是<code>validate_&lt;filed_name&gt;</code>，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">validate_name</span>(<span class="params">self, value</span>):</span><br><span class="line">    <span class="keyword">if</span> User.objects.<span class="built_in">filter</span>(name=value):</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(detail=<span class="string">&#x27;用户名已存在&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure>

<p>对所有字段校验使用的是<code>validate</code>，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self,attr</span>):</span><br><span class="line">    <span class="keyword">if</span> attr[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">or</span> attr[<span class="string">&#x27;email&#x27;</span>]:</span><br><span class="line">        <span class="keyword">return</span> attr</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(detail=<span class="string">&#x27;用户名或邮箱至少填一个&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>校验顺序：</p>
<ol>
<li>参数限定校验，（失败则不会向下校验）</li>
<li>单字段校验（无论成功或失败都会继续校验）</li>
<li>多字段校验</li>
</ol>
<p>校验数据的使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定需要校验的数据</span></span><br><span class="line">serializer = <span class="variable language_">self</span>.serializer_class(data=request.data)</span><br><span class="line"><span class="comment"># 进行字段校验，如果失败则会报错</span></span><br><span class="line">serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 获取校验未通过的提示</span></span><br><span class="line">serializer.errors</span><br><span class="line"><span class="comment"># 获取校验通过的数据</span></span><br><span class="line">serializer.validated_date</span><br></pre></td></tr></table></figure>

<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>指定序列化字段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">    model = User</span><br><span class="line">    <span class="comment"># 指定字段使用元组，所有字段使用&quot;__all__&quot;</span></span><br><span class="line">    fields = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>,)</span><br><span class="line">    <span class="comment"># 指定只能序列化，无法反序列化的字段</span></span><br><span class="line">    read_only_fields = (<span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;updated_at&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>指定单个字段进行自定义序列化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">password = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_password</span>(<span class="params">self, instance</span>):</span><br><span class="line">    <span class="comment"># instance为当前的实例，即view中的get_object()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;******&quot;</span></span><br></pre></td></tr></table></figure>

<p>对所有字段进行自定义序列化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">to_representation</span>(<span class="params">self, instance</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>()</span><br></pre></td></tr></table></figure>

<p>view使用序列化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对data进行序列化，data为queryset或者object，如果是queryset，需要加上many=True</span></span><br><span class="line">serializer = <span class="variable language_">self</span>.serializer_class(data, many=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 返回一个OrderedDict，转换为列表即可得到指定的值</span></span><br><span class="line">result_dict = serializer.data</span><br></pre></td></tr></table></figure>

<h2 id="数据库写入操作"><a href="#数据库写入操作" class="headerlink" title="数据库写入操作"></a>数据库写入操作</h2><p>serializer提供了create和update的功能，分别对应post请求和put&#x2F;patch请求。如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">    instance.update(**validated_data)</span><br><span class="line">    instance.updated_at = timezone.now()</span><br><span class="line">    instance.save()</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">    instance = User(**validated_data)</span><br><span class="line">    instance.save()</span><br><span class="line">    <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure>

<h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p><a href="https://www.jianshu.com/p/36b5c410b357">Django_rest framework_序列化器和自定义校验</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Edge上手</title>
    <url>/2020/edge/</url>
    <content><![CDATA[<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="iGG谷歌访问助手"><a href="#iGG谷歌访问助手" class="headerlink" title="iGG谷歌访问助手"></a>iGG谷歌访问助手</h3><p>安装地址：<a href="https://microsoftedge.microsoft.com/addons/detail/mchibleoefileemjfghfejaggonplmmg?hl=zh-CN">iGG谷歌访问助手</a></p>
<p>该插件可以通过Edge商店安装，安装该助手可以访问到google旗下的一些网站，例如谷歌搜索、谷歌play、Gmail，最重要的是可以访问Chrome插件商店，那么Chrome商店中所有的插件都可以安装了。</p>
<h3 id="PDF-Viewer"><a href="#PDF-Viewer" class="headerlink" title="PDF Viewer"></a>PDF Viewer</h3><p>安装地址：<a href="https://chrome.google.com/webstore/detail/pdf-viewer/oemmndcbldboiebfnladdacbdfmadadm">PDF Viewer</a></p>
<p>Edge目前有一个较大的功能缺失就是PDF阅读，使用该插件可以有效的弥补该功能的缺陷，该插件在Edge插件商店没有上架，只能科学上网访问Chrome插件商店安装。</p>
<p><strong>注意</strong>：</p>
<blockquote>
<ol>
<li>Edge 86以上的版本中阅读pdf已经带有目录</li>
<li>使用该插件需要在插件的设置中勾选允许访问文件URL</li>
</ol>
</blockquote>
<h3 id="IDM-Integration-Module"><a href="#IDM-Integration-Module" class="headerlink" title="IDM Integration Module"></a>IDM Integration Module</h3><p>这是一个IDM的补充插件，在安装IDM的时候会自动进入微软商店进行安装。安装好后可以进行网页嗅探，比如视频，歌曲等内容都能嗅探到下载链接。该插件没有安装地址，只需安装IDM即可。IDM相关信息详见：<a href="/2020/04/21/Windows%E8%BD%AF%E4%BB%B6%E6%89%8B%E5%86%8C/#IDM">IDM</a></p>
<p><strong>注意</strong>：该插件只适用于Windows</p>
<h3 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h3><p>安装地址：<a href="https://microsoftedge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd?hl=zh-CN">Tampermonkey</a></p>
<p>油猴插件，浏览器最强大的扩展插件，通过安装脚本可以获得许多高级的功能，该插件在Edge插件商店和Chrome插件商店都有。</p>
<p>脚本推荐：</p>
<blockquote>
<ol>
<li>科学上网插件，详情参见<a href="/2020/gwf/">科学上网</a></li>
<li>网盘助手插件， <a href="https://greasyfork.org/zh-CN/scripts/378301">网盘助手</a> 获取脚本，进入百度网盘，选中文件，点击生成链接，获得链接后使用IDM或者迅雷即可下载</li>
<li>网页翻译插件，<a href="https://greasyfork.org/zh-CN/scripts/389784">翻译</a> 获取脚本，支持三种翻译引擎</li>
<li>百度优化插件，<a href="https://greasyfork.org/zh-CN/scripts/14178">百度重定向插件</a> 获取脚本，支持去除百度链接的重定向，去除广告，自动翻页等功能</li>
<li>倍速视频插件，<a href="https://greasyfork.org/zh-CN/scripts/372673">计时器掌控者</a> 自定义倍速视频，可以方便跳过广告</li>
</ol>
</blockquote>
<h3 id="谷歌翻译"><a href="#谷歌翻译" class="headerlink" title="谷歌翻译"></a>谷歌翻译</h3><p>安装地址：<a href="https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb">谷歌翻译</a></p>
<p>便捷上国外网站使用，可以进行网页翻译，也可以使用划词查询。使用划词查询需要允许上传内容。</p>
<p><strong>注意</strong>：该插件的所有翻译均是通过translate.google.com提供支持。需要使用科学上网才能进行正常的翻译使用。使用谷歌访问助手也可。</p>
<h3 id="彩云小译"><a href="#彩云小译" class="headerlink" title="彩云小译"></a>彩云小译</h3><p>安装地址：<a href="https://microsoftedge.microsoft.com/addons/detail/%E5%BD%A9%E4%BA%91%E5%B0%8F%E8%AF%91-%E7%BD%91%E9%A1%B5%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6/abbgboelhkajgikdbjclaecchkneaoma">彩云小译</a></p>
<p>一款支持划词翻译、整个网页翻译的插件，该插件不用使用科学上网即可使用，并且该插件进行整页翻译时会保留原来的网页内容。方便进行对照。在一定程度上比谷歌翻译更好用。</p>
<h3 id="AdblockPlus"><a href="#AdblockPlus" class="headerlink" title="AdblockPlus"></a>AdblockPlus</h3><p>安装地址：<a href="https://microsoftedge.microsoft.com/addons/detail/adblock-plus-%E5%85%8D%E8%B4%B9%E7%9A%84%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E5%99%A8/gmgoamodcdcjnbaobigkjelfplakmdhh">AdblockPlus</a></p>
<p>广告拦截器，该插件可以拦截大部分的弹窗广告，使用拦截元素还可以去除掉百度热搜之类的内容</p>
<h3 id="Cookie-Editor"><a href="#Cookie-Editor" class="headerlink" title="Cookie Editor"></a>Cookie Editor</h3><p>安装地址：<a href="https://microsoftedge.microsoft.com/addons/detail/cookie-editor/ajfboaconbpkglpfanbmlfgojgndmhmc">Cookie Editor</a></p>
<p>能够更方便的编辑网站的cookie内容，在浏览器控制台-应用程序-存储-Cookie中也可以进行相同的编辑</p>
<h3 id="Dark-Reader"><a href="#Dark-Reader" class="headerlink" title="Dark Reader"></a>Dark Reader</h3><p>安装地址：<a href="https://microsoftedge.microsoft.com/addons/detail/dark-reader/ifoakfbpdcdoeenechcleahebpibofpc">DarkReader</a></p>
<p>这个插件对长时间使用浏览器用户非常友好，可以自适应计算界面的颜色，使整个网页背景变为黑色，该插件在大部分的网页上的显示都非常完美。但是依然会有部分网页显示可能有问题。</p>
<p><strong>注意:</strong> 最近才发现Edge浏览器自带这个功能，在设置外观中将主题改为黑色，然后进入<code>edge://flags</code>，将<code>Force Dark Mode for Web Contents</code> 改为Enable也能实现黑色效果</p>
<h3 id="Listen1"><a href="#Listen1" class="headerlink" title="Listen1"></a>Listen1</h3><p>安装地址：<a href="https://github.com/listen1/listen1_chrome_extension/releases">github</a> ，<a href="https://microsoftedge.microsoft.com/addons/detail/listen-1/hneiglcmpeedblkmbndhfbeahcpjojjg?hl=zh-CN">微软插件商店</a></p>
<p>浏览器听歌聚合平台。聚合了包括网易云音乐、虾米音乐、咪咕音乐、QQ音乐等平台的歌曲，可以同步歌单到Github Gist。</p>
<h3 id="Undo-closed-tabs-button"><a href="#Undo-closed-tabs-button" class="headerlink" title="Undo closed tabs button"></a>Undo closed tabs button</h3><p>安装地址：<a href="https://microsoftedge.microsoft.com/addons/detail/undo-closed-tabs-button/hfigadnahbppkfoomjopnladdokbmnkc">Undo closed tabs button</a></p>
<p>一个可以便捷恢复已经关闭的tabs页的插件。</p>
<h3 id="百度药丸"><a href="#百度药丸" class="headerlink" title="百度药丸"></a>百度药丸</h3><p>安装地址：<a href="https://microsoftedge.microsoft.com/addons/detail/%E7%99%BE%E5%BA%A6%E8%8D%AF%E4%B8%B8-baidu-capsule/hmmpaaklbinfllncmnnbdhedmhafnjkj">百度药丸</a></p>
<p>解决网页使用百度的许多痛点，比如去掉百度热搜（分散注意力的东西）、去除推广、阻止百度推广等。常用百度的人员必备插件。</p>
<h3 id="有范全网通"><a href="#有范全网通" class="headerlink" title="有范全网通"></a>有范全网通</h3><p>安装地址：<a href="http://www.ufanw.com/">有范全网通</a></p>
<p>可以看到视频网站上VIP的视频</p>
<h2 id="高级输入"><a href="#高级输入" class="headerlink" title="高级输入"></a>高级输入</h2><p><code>thisisunsafe</code> - 遇到网页因为不安全而无法访问且没有跳过按钮的情况，不用定位光标到任何位置，活动窗口选择为Edge浏览器，直接输入即可</p>
<p><code>edge://flags</code></p>
<ul>
<li><code>Parallel downloading</code> - 开启并行下载（使用多线程下载）</li>
<li><code>Force Dark Mode for Web Contents</code> - 对网页内容强制启用黑夜模式</li>
</ul>
]]></content>
      <categories>
        <category>日常软件</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>略谈计算机编码</title>
    <url>/2023/encode/</url>
    <content><![CDATA[<p>最近被问到 Unicode 和 UTF-8 的区别，于是就想起来了，之前也有人问过我这个问题，当时我也是一脸懵逼，于是就去查了一下，然后就忘了，现在又被问到了，于是就想着记录一下。</p>
<p>计算机底层存储都是存储的二进制的编码文件，计算机最初是由美国人发明的，于是他们制定了一组编码规则，其中包含了大小写的英文字母、数字、英文标点符号等，引发了计算机界的编码革命。</p>
<h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p>ASCII(American Standard Code for Information Interchange)，美国信息互换标准码。就是美国人最初发明计算机时制定的一组编码，是一种基于拉丁字母的编码，它只有 128 个字符，所以只需要 7 位就可以表示了，所以叫 7 位编码，编码为 0-127。</p>
<p>ASCII第一次以规范标准的类型发表是在1967年，最后一次更新则是在1986年</p>
<h2 id="ISO-8859-1"><a href="#ISO-8859-1" class="headerlink" title="ISO-8859-1"></a>ISO-8859-1</h2><p>由于 ASCII 只占用了 0-127 的范围，后来欧洲开始使用了计算机，于是在 ASCII 的基础上进行了扩展，扩展了 128-255 的范围，这就是 ISO-8859-1，它也是一种 8 位编码，向下兼容 ASCII。Latin1 是 ISO-8859-1 的别名，有些环境下写作 Latin-1，这是 MySQL 的默认编码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;\xff&#x27;</span>.decode(<span class="string">&#x27;ISO-8859-1&#x27;</span>))</span><br><span class="line"><span class="comment"># ÿ</span></span><br></pre></td></tr></table></figure>

<h2 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h2><p>后来中国也开始使用计算机，由于汉字的数量很多，ASCII 或 ISO-8859-1 是不够用的，于是就有了 GB2312</p>
<p>GB2312(国标2312) 是一种 16 位编码，也就是 2 个字节，GB2312 标准共收录 6763 个汉字，其中一级汉字 3755 个，二级汉字 3008 个；同时，GB2312 收录了包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母在内的 682 个全角字符。</p>
<p>GB2312 的编码规则是使用两个字节来表示一个汉字，其中两个字节均在 128-255 之间，这样进行编解码时，判断当前字节是否在0~127（ASCII码范围），如果在则表示当前为单字节的英文字母；否则会联合后面的一个字节共同判断当前的汉字表示</p>
<h2 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h2><p>GB2312 并没有收录所有的汉字，而且 GB2312 的编码规则实际上浪费了一部分编码空间，例如当判断了第一个字节范围在 128-255 之间，就可以确定需要联合第二个字节进行解码，于是就有了 GBK</p>
<p>GBK(国标扩) 是 GB2312 的扩展，完全兼容 GB2312 ，共23940个码位，共收录了21003个汉字，</p>
<h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>由于出现了各种标准的编码，为了统一编码，于是就有了 Unicode</p>
<p>Unicode 是一种字符集，它包含了世界上所有的字符，它的编码范围是 0x0000 到 0x10FFFF，也就是 0 到 1,114,111，所以 Unicode 只是一个字符集，并不是一种在计算机中存储的编码方式</p>
<h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>出现了 Unicode 字符集，但例如欧美国家实际上大部分的字符是用不到的，原本一个字节能表示的字符，现在需要用三个字符才能表示，这样就造成了空间的浪费，于是就有了 UTF-8</p>
<p>UTF-8(Unicode Transfer Format 8) 是 Unicode 的一种编码方式，它是一种变长的编码方式，它可以使用 1-4 个字节来表示一个字符，它的编码规则如下</p>
<table>
<thead>
<tr>
<th>字节</th>
<th>格式</th>
<th>实际编码位</th>
<th>编码范围</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>0xxxxxxx</td>
<td>7</td>
<td>0-127</td>
</tr>
<tr>
<td>2</td>
<td>110xxxxx 10xxxxxx</td>
<td>11</td>
<td>128-2047</td>
</tr>
<tr>
<td>3</td>
<td>1110xxxx 10xxxxxx 10xxxxxx</td>
<td>16</td>
<td>2048-65535</td>
</tr>
<tr>
<td>4</td>
<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
<td>21</td>
<td>65536-2097151</td>
</tr>
</tbody></table>
<h2 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h2><p>UTF-16 是 Unicode 的一种编码方式，它是一种变长的编码方式，它可以使用 2-4 个字节来表示一个字符，它的编码规则如下，但是 UTF-16 有一个缺点，就是它不兼容 ASCII，也就是说，如果你的文本中只有英文，那么使用 UTF-16 编码的话，它会占用 2 倍的空间</p>
<table>
<thead>
<tr>
<th>字节</th>
<th>格式</th>
<th>实际编码位</th>
<th>编码范围</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>xxxxxxxx xxxxxxxx</td>
<td>16</td>
<td>0x000000-0x00ffff</td>
<td>英文 汉字 日文 emoji 等</td>
</tr>
<tr>
<td>4</td>
<td>110110yy yyyyyyyy 110111xx xxxxxxxx</td>
<td>20</td>
<td>0x010000-0x10ffff</td>
<td>甲骨文等</td>
</tr>
</tbody></table>
<h2 id="UTF-32"><a href="#UTF-32" class="headerlink" title="UTF-32"></a>UTF-32</h2><p>UTF-32 是 Unicode 的一种编码方式，它是一种固定长度的编码方式，它使用 4 个字节来表示一个字符</p>
<table>
<thead>
<tr>
<th>字节</th>
<th>格式</th>
<th>实际编码位</th>
<th>编码范围</th>
</tr>
</thead>
<tbody><tr>
<td>4</td>
<td>xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx</td>
<td>32</td>
<td>0-1114111</td>
</tr>
</tbody></table>
<h2 id="ANSI"><a href="#ANSI" class="headerlink" title="ANSI"></a>ANSI</h2><p>ANSI 是 American National Standards Institute 的缩写，它是美国国家标准协会的意思，它是一个标准化组织，它制定了一些标准，其中就包括了 ANSI 编码</p>
<p>ANSI 在不同的国家标准不同，</p>
<table>
<thead>
<tr>
<th>ANSI 编码</th>
<th>国家标准</th>
</tr>
</thead>
<tbody><tr>
<td>GBK</td>
<td>中国</td>
</tr>
<tr>
<td>BIG5</td>
<td>台湾</td>
</tr>
<tr>
<td>EUC-KR</td>
<td>韩国</td>
</tr>
<tr>
<td>Shift_JIS</td>
<td>日本</td>
</tr>
<tr>
<td>ISO-8859-1</td>
<td>欧洲</td>
</tr>
<tr>
<td>ASCII</td>
<td>美国</td>
</tr>
</tbody></table>
<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>BOM 是 Byte Order Mark 的缩写，它的编码是 FEFF ,它是一种标记，用来标记文件的编码格式，它是一个字节序列，它的作用是告诉解码器，当前文件的编码格式是什么，不同编码格式中的 BOM 值如下表</p>
<table>
<thead>
<tr>
<th>编码格式</th>
<th>BOM 字节序列</th>
</tr>
</thead>
<tbody><tr>
<td>UTF-8</td>
<td>EF BB BF</td>
</tr>
<tr>
<td>UTF-16BE</td>
<td>FE FF</td>
</tr>
<tr>
<td>UTF-16LE</td>
<td>FF FE</td>
</tr>
<tr>
<td>UTF-32BE</td>
<td>00 00 FE FF</td>
</tr>
<tr>
<td>UTF-32LE</td>
<td>FF FE 00 00</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>技术原理</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub 开发流程</title>
    <url>/2020/github_flow/</url>
    <content><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>GitHub flow算是一种相对简单的Git工作流程，主要步骤为下：</p>
<p>其中上游分仓库称为upstream，远端仓库称为origin。</p>
<ol>
<li>首先从upstream仓库fork代码到远端仓库，然后将远端仓库克隆到本地。</li>
<li>给本地仓库添加一个upstream仓库，方便同步最新代码</li>
<li>从本地的master（或者develop，根据公司要求）创建一个功能开发分支切换到功能开发分支上进行功能的开发。</li>
<li>开发完成后，将代码提交并推送到origin</li>
<li>在origin上发起一个pull request请求，代码将会发送给审查者review。</li>
</ol>
<p>Git flow是一个更规范实用的Git工作流。</p>
<ol>
<li>从远端仓库克隆工作分支到本地，然后本地切换到自己的开发分支上</li>
<li>进行功能开发，开发完成后合并到主开发分支</li>
<li>如果升级就从开发分支先合并到release分支，release再合并到线上分支</li>
<li>如果遇到紧急bug修复，创建hotfix分支，修复后分别合并到线上和开发分支</li>
</ol>
<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><ol>
<li><code>git clone 仓库地址</code> - 克隆远端仓库到本地，通常情况下只会克隆master<ul>
<li>–depth&#x3D;1 - 只克隆最新提交内容，不克隆历史记录</li>
</ul>
</li>
<li><code>git remote add upstream git@github.com:fe/github-flow.git</code> - 添加upstream仓库</li>
<li><code>git checkout -b 开发分支名 基于的分支名</code> - 创建并切换到开发分支，默认基于master分支<ul>
<li><code>git checkout -b product origin/product</code> - 基于远端分支创建新的分支</li>
</ul>
</li>
<li><code>git rebase -i 合并多个提交的前一个提交编码</code> - 将多个提交合并为一个提交<ul>
<li>p&#x2F;pick - 为保留该提交</li>
<li>s&#x2F;squash  - 保留提交记录，并将提交合并到之前的提交上</li>
<li>d&#x2F;drop - 删除该提交记录</li>
</ul>
</li>
<li><code>git pull upstream master --rebase</code> - 长时间未同步时同步上游代码保持本地与上游代码一致</li>
</ol>
<h2 id="升级流程"><a href="#升级流程" class="headerlink" title="升级流程"></a>升级流程</h2><p>Github flow升级</p>
<ol>
<li><p>本地打tag，然后推送到upstream的master</p>
<ul>
<li><code>git tag 标签内容</code> - 打标签</li>
<li><code>git push upstream 标签内容</code> - 将标签推送到远端</li>
</ul>
</li>
<li><p>upstream的master提一个pr到upstream的product</p>
</li>
</ol>
<p>Git flow升级</p>
<ol>
<li><p>develop提pr到master分支</p>
</li>
<li><p>本地pull master的分支</p>
</li>
<li><p>本地打tag，推送到远端触发升级</p>
<ul>
<li><code>git tag 标签内容</code> - 本地打标签</li>
<li><code>git push upstream 标签名</code> - 推送到远端分支</li>
</ul>
</li>
</ol>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="在命令行显示git分支"><a href="#在命令行显示git分支" class="headerlink" title="在命令行显示git分支"></a>在命令行显示git分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">git_branch</span></span>() &#123;      git branch 2&gt; /dev/null | sed -e <span class="string">&#x27;/^[^]/d&#x27;</span> -e <span class="string">&#x27;s/ (.*)/(\1)/&#x27;</span> &#125;</span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&quot;\u@[\033[32m]\w[\033[33m]\$(git_branch)[\033[00m]\$ &quot;</span> </span><br></pre></td></tr></table></figure>

<p>如果希望立即生效，在命令行执行一下代码即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source $HOME/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="git中文文件名显示问题"><a href="#git中文文件名显示问题" class="headerlink" title="git中文文件名显示问题"></a>git中文文件名显示问题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="遇到conflict处理"><a href="#遇到conflict处理" class="headerlink" title="遇到conflict处理"></a>遇到conflict处理</h3><p>当使用<code>git pull upstream master --rebase</code>的时候，可能会遇到conflict的问题。处理办法：</p>
<blockquote>
<ol>
<li>遇到conflict时，分支会自动切换到临时分支上，并且在冲突地方给出提示。</li>
<li>手动进行冲突处理</li>
<li>使用<code>git add .</code>将重新处理的添加到暂存区</li>
<li>使用<code>git rebase --continue</code>恢复到之前到分支上，完成处理</li>
</ol>
</blockquote>
<h3 id="其他git命令"><a href="#其他git命令" class="headerlink" title="其他git命令"></a>其他git命令</h3><ul>
<li><code>git branch -m oldName newName</code> - 分支重命名</li>
<li><code>git branch -d/-D 分支名</code> - 删除分支</li>
<li><code>git branch -a</code> - 查看所有本地分支和远端分支</li>
<li><code>git remote -v</code> - 查看所有远端仓库地址</li>
<li><code>git push origin --delete 分支名</code> - 删除远端分支</li>
<li><code>git config --list</code> - 查看本机git用户信息<ul>
<li><code>git config user.name</code></li>
<li><code>git config user.email</code></li>
</ul>
</li>
<li><code>git commit --amend --reset-author</code> - 修改commit提交作者</li>
<li><code>git commit --date=&quot;周 月 日 时间 年 +0800&quot; -am &quot;提交&quot;</code> - 指定commit时间和内容</li>
<li><code>git commit --amend --date=&quot;Thu Aug 9 23:04:57 2018 -0700&quot;</code> - 修改commit时间</li>
<li><code>git show</code> - 查看最近一次提交的变更<ul>
<li><code>git show -5</code> - 查看最近五次提交的变更</li>
<li><code>git show commit_id</code> - 查看指定提交的变更</li>
</ul>
</li>
<li><code>git remote update origin --prune</code> - Git刷新分支</li>
</ul>
]]></content>
      <categories>
        <category>技术工具</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
        <tag>开发软件</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub使用方法</title>
    <url>/2020/github_use/</url>
    <content><![CDATA[<h2 id="GitHub加速访问"><a href="#GitHub加速访问" class="headerlink" title="GitHub加速访问"></a>GitHub加速访问</h2><h3 id="1-修改host文件达到加速目的"><a href="#1-修改host文件达到加速目的" class="headerlink" title="1. 修改host文件达到加速目的"></a>1. 修改host文件达到加速目的</h3><p>以下方法被写在一个python文件中，可以直接使用<a href="https://github.com/stolenzc/github_faster">github faster</a>执行python文件进行修改刷新</p>
<ol>
<li><p>获取GitHub网站的最快地址，使用<a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a>开获取GitHub的IP地址</p>
</li>
<li><p>修改hosts文件，Mac和Linux在<code>/etc/hosts</code>下，Windows在通常在<code>C:\windows\System32\drivers\etc\hosts</code>下，在结尾添加以下地址的IP</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">140.82.114.4 github.com</span><br><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br><span class="line">64.71.168.201 github.community</span><br><span class="line">199.232.68.133 avatars.githubusercontent.com</span><br><span class="line">199.232.68.133 avatars0.githubusercontent.com</span><br><span class="line">199.232.68.133 avatars1.githubusercontent.com</span><br><span class="line">199.232.68.133 avatars2.githubusercontent.com</span><br><span class="line">199.232.68.133 avatars3.githubusercontent.com</span><br><span class="line">199.232.68.133 avatars4.githubusercontent.com</span><br><span class="line">199.232.68.133 camo.githubusercontent.com</span><br><span class="line">199.232.68.133 cloud.githubusercontent.com</span><br><span class="line">199.232.68.133 githubusercontent.com</span><br><span class="line">199.232.96.133 user-images.githubusercontent.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>刷新hosts文件，Mac和Linux可以使用<code>sudo killall -HUP mDNSResponder</code>，Windows使用<code>ipconfig /flushdns</code></p>
</li>
</ol>
<p>参考文档：<a href="https://www.jianshu.com/p/238f8242e1a6">Mac 解决GitHub下载速度太慢问题</a></p>
<h3 id="2-使用加速镜像克隆"><a href="#2-使用加速镜像克隆" class="headerlink" title="2. 使用加速镜像克隆"></a>2. 使用加速镜像克隆</h3><p>该方法只适用与对代码仓库进行克隆，不支持ssh方法</p>
<p>使用 <code>github.com.cnpmjs.org</code> 来替换原本的网站中的 <code>github.com</code></p>
<p>如 <code>git clone https://github.com/stolenzc/github_faster.git</code> 替换为 <code>git clone https://github.com.cnpmjs.org/stolenzc/github_faster.git</code></p>
<h2 id="快速项目检索"><a href="#快速项目检索" class="headerlink" title="快速项目检索"></a>快速项目检索</h2><p>检索方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">in</span>:name xxx <span class="comment"># 按照项目名/仓库名搜索（大小写不敏感）</span></span><br><span class="line"><span class="keyword">in</span>:readme xxx <span class="comment"># 按照README搜索（大小写不敏感）</span></span><br><span class="line"><span class="keyword">in</span>:description xxx <span class="comment"># 按照description搜索（大小写不敏感）</span></span><br><span class="line">stars:&gt;xxx <span class="comment"># stars数大于xxx</span></span><br><span class="line">forks:&gt;xxx <span class="comment"># forks数大于xxx</span></span><br><span class="line">language:xxx <span class="comment"># 编程语言为xxx</span></span><br><span class="line">pushed:&gt;YYYY-MM-DD <span class="comment"># 最新更新时间晚于YYYY-MM-DD</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>多个条件之间可以使用空格隔开</p>
<h2 id="Release发包"><a href="#Release发包" class="headerlink" title="Release发包"></a>Release发包</h2><ol>
<li>在项目的release窗格下，点击<code>Draft a new release</code></li>
<li>填入Tag版本，描述之类的东西，然后点击或者将文件拖入到<code>Attach binaries by dropping them here or selecting them.</code></li>
<li>点击<code>Publish release</code>即可完成发包，如果是测试包，可以勾选上<code>this is a pre-release</code></li>
</ol>
<h2 id="GitHub-Action"><a href="#GitHub-Action" class="headerlink" title="GitHub Action"></a>GitHub Action</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>GitHub官方action仓库：<a href="https://github.com/marketplace?type=actions">Github Action官方市场</a>，第三方仓库：<a href="https://github.com/sdras/awesome-actions">wesome actions</a></p>
<p>使用action方式：使用git的指针概念，详情参考<a href="https://docs.github.com/cn/free-pro-team@latest/actions/creating-actions/about-actions">Github Docs</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">actions/setup-node@74bc508</span> <span class="comment"># 指向一个 commit</span></span><br><span class="line"><span class="string">actions/setup-node@v1.0</span>    <span class="comment"># 指向一个标签</span></span><br><span class="line"><span class="string">actions/setup-node@master</span>  <span class="comment"># 指向一个分支</span></span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在项目根目录下的<code>.github/workflows/</code>下的yml文件</p>
<p>yml文件配置：</p>
<ol>
<li><p>name: workflow的名称，如果未设置默认为yml文件名</p>
</li>
<li><p>on: 触发action的条件，可选为<code>on.&lt;push|pull_request&gt;.&lt;tags|branches&gt;</code></p>
</li>
<li><p>jobs: workflow的工作主体，表示每一项具体的工作，jobs下面通常需要写清楚job_id，可以自定义。如<code>jobs:build</code>。job_id下面为以下字段：</p>
<ol>
<li><p><code>name</code>: 定义字段任务说明</p>
</li>
<li><p><code>needs</code>: 表示任务的依赖关系，表示运行该任务之前必须运行什么。</p>
</li>
<li><p><code>runs-on</code>: 运行任务需要的虚拟机环境，可选参数为：</p>
<blockquote>
<p><code>ubuntu-latest</code>，<code>ubuntu-18.04</code>或<code>ubuntu-16.04</code></p>
<p><code>windows-latest</code>，<code>windows-2019</code>或<code>windows-2016</code></p>
<p><code>macOS-latest</code>或<code>macOS-10.14</code></p>
</blockquote>
</li>
<li><p><code>steps</code>: 每个job包含的步骤，可以配置为:</p>
<blockquote>
<p><code>name</code>: 步骤名称</p>
<p><code>uses</code>: 使用的action</p>
<p><code>with</code>: github action的入参</p>
<p><code>run</code>: 执行的命令</p>
<p><code>env</code>: 设置为环境变量</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>hexo项目编译并发送到阿里云ESC的指定目录</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">build</span> <span class="string">and</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span> <span class="comment"># If you&#x27;re using actions/checkout@v2 you must set persist-credentials to false in most cases for the deployment to work correctly.</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">persist-credentials:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># checkout到你的hexo代码分支</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line">        <span class="comment"># hexo需要加载内部子模块</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">and</span> <span class="string">Build</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm install</span></span><br><span class="line"><span class="string">        npm run build</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">aliyun</span> <span class="string">server</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">easingthemes/ssh-deploy@v2.0.7</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ALIYUN_SERVER_ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">ARGS:</span> <span class="string">&quot;-avz --delete&quot;</span></span><br><span class="line">        <span class="attr">SOURCE:</span> <span class="string">&quot;public/&quot;</span></span><br><span class="line">        <span class="attr">REMOTE_HOST:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ALIYUN_SERVER_HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">REMOTE_USER:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">        <span class="attr">TARGET:</span> <span class="string">&quot;/home/blog/&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>该配置需要在secret里面配置阿里云的私钥，然后将阿里云的公钥添加到阿里云的<code>~/.ssh/authorized_keys</code>文件中添加阿里云中生成的公钥</p>
<p>该配置表示直接将hexo编译后的deploy下的文件拷贝到&#x2F;blog&#x2F;下，没有二级目录。</p>
</blockquote>
<p>参考内容：<a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">阮一峰博客</a>， <a href="https://didiheng.com/front/2019-12-11.html#github-action%E5%8F%91%E5%B8%83%E9%98%BF%E9%87%8C%E4%BA%91ecs">Github Action发布阿里云ECS</a></p>
]]></content>
      <categories>
        <category>日常软件</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
        <tag>开发软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 的 14 岁</title>
    <url>/2023/go_14years/</url>
    <content><![CDATA[<h2 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h2><ul>
<li>发布时间：2023-11-10</li>
<li>原文链接：<a href="https://go.dev/blog/14years">https://go.dev/blog/14years</a></li>
<li>翻译日期：2023-11-13</li>
<li>翻译作者：<a href="mailto:stolenzc@88.com">联系或纠错</a></li>
</ul>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>今天我们庆祝 Go 开源代码发布已经 14 年了，Go 通过两个功能齐全和其他重要的里程碑发布度过了这美好的一年</p>
<p>我们在一月发布了 <a href="https://go.dev/blog/go1.20">Go 1.20</a> 并且在八月发布了 <a href="https://go.dev/blog/go1.21">Go 1.21</a>。更多的关注了增强实现而不是语言的改进。</p>
<p>配置文件引导 (PGO) 在 <a href="https://go.dev/blog/pgo-preview">Go 1.20 预览版</a> 中发布并在 <a href="https://go.dev/blog/pgo">Go 1.21 正式版</a> 发布了。允许 Go 编译器读取项目中的配置文件并且花更多的时间优化代码中最常运行的部分。在 Go 1.21 中，启用了 PGO 通常能够提升 2%-7% 的 CPU 工作负载。参阅 “<a href="https://go.dev/blog/pgo">Profile-guided optimization in Go 1.21</a>” 查看概览和 “<a href="https://go.dev/doc/pgo">profile-guided optimization user guide</a>” 查看详细文档</p>
<p>从 <a href="https://go.dev/blog/cover">Go 1.2</a> 开始就提供了支持在测试过程中收集覆盖率的配置文件。在 Go 1.20 添加了在 go build 构建二进制文件中收集测试覆盖率的支持，允许你能够更方便的在大型集成测试中收集覆盖率。参阅 “<a href="https://go.dev/blog/integration-test-coverage">Code coverage for Go integration tests</a>”</p>
<p>从 <a href="https://go.dev/doc/go1compat">Go 1 和未来的 Go 程序</a> 开始，兼容性就是非常重要的一部分。Go 通过扩展我们需要更改的情况下使用 GODEBUG 的使用规则，进一步提高了兼容性，例如必须修改但可能破坏现有程序的重要 bug 修复。参阅 “<a href="https://go.dev/blog/compat">Backward Compatibility, Go 1.21, and Go 2</a>” 查看概览和 “<a href="https://go.dev/doc/godebug">Go, Backwards Compatibility, and GODEBUG</a>” 查看详细文档</p>
<p>Go 1.21 还提供了对内置工具链管理的支持，允许你像更改其他依赖项版本一样容易的修改特定模块中使用的 Go 工具链版本。参阅博客 “<a href="https://go.dev/blog/toolchain">Forward Compatibility and Toolchain Management in Go 1.21</a>” 查看概览和文档 “<a href="https://go.dev/doc/toolchain">Go Toolchains</a>” 查看详细文档</p>
<p>另一个重要工具的实现是将磁盘索引集成到了 Go 的 LSP 服务 gopls 中。在典型的例子中，gopls 的启动等待和内存占用减少了 3-5 倍。“<a href="https://go.dev/blog/gopls-scalability">Scaling gopls for the growing Go ecosystem</a>” 解释了技术细节。你应该通过运行以下命令来确保你正在使用最新的 gopls：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go install golang.org/x/tools/gopls@latest</span><br></pre></td></tr></table></figure>

<p>Go 1.21 引入了新的 <a href="https://go.dev/pkg/cmp/">cmp</a> 、 <a href="https://go.dev/pkg/maps/">maps</a> 和 <a href="https://go.dev/pkg/slices/">slices</a> 包 - Go 的第一个通用标准库 - 以及扩展了可比较类型的集合。有关详细信息，请参阅博客 “<a href="https://go.dev/blog/comparable">All your comparable types</a>”。</p>
<p>总而言之，我们持续的完善泛型并进行演讲和博客文章来解释重要的细节。今年两篇值得注意的文章是 “<a href="https://go.dev/blog/deconstructing-type-parameters">Deconstructing Type Parameters</a>” 和 “<a href="https://go.dev/pkg/log/slog/">Everything You Always Wanted to Know About Type Inference – And a Little Bit More</a>”。</p>
<p>Go 1.21 中另一个重要的新包是 <code>[log/slog](https://go.dev/pkg/log/slog/)</code> ，它为标准库添加了结构化日志的官方 API。有关概述参阅 “<a href="https://go.dev/blog/slog">Structured logging with slog</a>”。</p>
<p>对于 WebAssembly (Wasm) 端口，Go 1.21 发布了对 WebAssembly 系统接口 (WASI) 预览版 1 的支持。WASI 预览版 1 是 Wasm 的新的“操作系统”接口，被大多数服务器端 Wasm 环境支持。参阅 “<a href="https://github.com/marketplace/actions/golang-govulncheck-action">WASI support in Go</a>” 查看演示。</p>
<p>在安全方面，我们继续确保 Go 在帮助开发者理解依赖项和漏洞方面处于领先地位， <a href="https://go.dev/blog/govulncheck">Govulncheck 1.0 在七月发布</a> 。如果你使用 VS Code，你可以直接在编辑器中使用 Go 扩展运行 govulncheck：参阅 <a href="https://go.dev/doc/tutorial/govulncheck-ide">本教程</a> 开始。如果你使用 GitHub，你可以在 CI&#x2F;CD 中使用 govulncheck，使用 <a href="https://github.com/marketplace/actions/golang-govulncheck-action">GitHub Action for govulncheck</a> 。有关检查依赖项漏洞问题的更多信息，请参阅今年的 Google I&#x2F;O 演讲 “<a href="https://github.com/marketplace/actions/golang-govulncheck-action">Build more secure apps with Go and Google</a>”。</p>
<p>另一个重要的安全里程碑是 Go 1.21 高度重视可重现工具链。参阅 “<a href="https://go.dev/blog/rebuild">Perfectly Reproducible, Verified Go Toolchains</a>” 查看详细信息，包括在 Mac 上不使用任何 Linux 工具就能够复现 Ubuntu Linux Go 工具链的演示。</p>
<p>这真是忙碌的一年呀！</p>
<p>在 Go 的第 15 年，我们仍将继续努力使 Go 成为最好的软件工程环境。我们特别兴奋的一件事是重新定义 for 循环的 :&#x3D; 语义以消除意外的别名 bug。参阅 “<a href="https://go.dev/blog/loopvar-preview">Fixing For Loops in Go 1.22</a>” 查看详细信息，包括在 Go 1.21 中预览此更改的说明。</p>
<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>Go 项目能够一直前进不仅仅是靠 Google 公司的 Go 团队，感谢所有做过贡献的人和社区中讨论的每一个你，是你们让 Go 变成了今天的样子。祝你们新的一年一切顺利。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 占位符</title>
    <url>/2023/go_format/</url>
    <content><![CDATA[<h2 id="说明代码"><a href="#说明代码" class="headerlink" title="说明代码"></a>说明代码</h2><p>本文部分示例代码基于以下代码执行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">	age  <span class="type">int</span></span><br><span class="line">	man  <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stolen = User&#123;</span><br><span class="line">	name: <span class="string">&quot;stolen&quot;</span>,</span><br><span class="line">	age:  <span class="number">18</span>,</span><br><span class="line">	man: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="普通占位符"><a href="#普通占位符" class="headerlink" title="普通占位符"></a>普通占位符</h2><table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
<th>举例</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td><code>%v</code></td>
<td>相应值的默认格式</td>
<td><code>Printf(&quot;%v&quot;, stolen)</code></td>
<td><code>&#123;stolen 18 true&#125;</code></td>
</tr>
<tr>
<td><code>%+v</code></td>
<td>打印结构体时会添加字段名</td>
<td><code>Printf(&quot;%+v&quot;, stolen)</code></td>
<td><code>&#123;name:stolen age:18 man:true&#125;</code></td>
</tr>
<tr>
<td><code>%#v</code></td>
<td>相应类型的 Go 语言表达方式</td>
<td><code>Printf(&quot;%#v&quot;, stolen)</code></td>
<td><code>main.User&#123;name:&quot;stolen&quot;, age:18, man:true&#125;</code></td>
</tr>
<tr>
<td><code>%T</code></td>
<td>相应值的类型的 Go 语法表示</td>
<td><code>Printf(&quot;%T&quot;, stolen)</code></td>
<td><code>main.User</code></td>
</tr>
<tr>
<td><code>%%</code></td>
<td>取消对 % 的转译</td>
<td><code>Printf(&quot;%%&quot;)</code></td>
<td><code>%</code></td>
</tr>
</tbody></table>
<h2 id="布尔占位符"><a href="#布尔占位符" class="headerlink" title="布尔占位符"></a>布尔占位符</h2><table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
<th>举例</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td><code>%t</code></td>
<td>对布尔值的格式化输出，值为 true 或 false</td>
<td><code>Printf(&quot;%t&quot;, stolen.man)</code></td>
<td><code>true</code></td>
</tr>
</tbody></table>
<h2 id="整数占位符"><a href="#整数占位符" class="headerlink" title="整数占位符"></a>整数占位符</h2><table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
<th>举例</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td><code>%b</code></td>
<td>二进制表示</td>
<td><code>Printf(&quot;%b&quot;, stolen.age)</code></td>
<td><code>10010</code></td>
</tr>
<tr>
<td><code>%#b</code></td>
<td>二进制表示，开头有二进制标识 0b</td>
<td><code>Printf(&quot;%#b&quot;, stolen.age)</code></td>
<td><code>0b10010</code></td>
</tr>
<tr>
<td><code>%c</code></td>
<td>相应Unicode码点所表示的字符</td>
<td><code>Printf(&quot;%c&quot;, 20013)</code></td>
<td><code>中</code></td>
</tr>
<tr>
<td><code>%d</code></td>
<td>十进制表示</td>
<td><code>Printf(&quot;%d&quot;, stolen.age)</code></td>
<td><code>18</code></td>
</tr>
<tr>
<td><code>%o</code></td>
<td>八进制表示</td>
<td><code>Printf(&quot;%o&quot;, stolen.age)</code></td>
<td><code>22</code></td>
</tr>
<tr>
<td><code>%#o</code></td>
<td>八进制表示，开头有八进制标识 0</td>
<td><code>Printf(&quot;%#o&quot;, stolen.age)</code></td>
<td><code>022</code></td>
</tr>
<tr>
<td><code>%q</code></td>
<td>单引号围绕的字符字面值，由Go语法安全地转义</td>
<td><code>Printf(&quot;%q&quot;, 20013)</code></td>
<td><code>&#39;中&#39;</code></td>
</tr>
<tr>
<td><code>%x</code></td>
<td>十六进制表示，字母形式为小写 a-f</td>
<td><code>Printf(&quot;%x&quot;, stolen.age)</code></td>
<td><code>12</code></td>
</tr>
<tr>
<td><code>%#x</code></td>
<td>十六进制表示，字母形式为小写 a-f，开头有十六进制标识 0x</td>
<td><code>Printf(&quot;%#x&quot;, stolen.age)</code></td>
<td><code>0x12</code></td>
</tr>
<tr>
<td><code>%X</code></td>
<td>十六进制表示，字母形式为小写 A-F</td>
<td><code>Printf(&quot;%X&quot;, stolen.age)</code></td>
<td><code>12</code></td>
</tr>
<tr>
<td><code>%#X</code></td>
<td>十六进制表示，字母形式为小写 A-F，开头有十六进制标识 0X</td>
<td><code>Printf(&quot;%#X&quot;, stolen.age)</code></td>
<td><code>0X12</code></td>
</tr>
<tr>
<td><code>%U</code></td>
<td>Unicode格式：<code>U+1234</code>，等同于 <code>U+%04X</code></td>
<td><code>Printf(&quot;%U&quot;, 0x4E2D)</code></td>
<td><code>U+4E2D</code></td>
</tr>
</tbody></table>
<h2 id="浮点占位符"><a href="#浮点占位符" class="headerlink" title="浮点占位符"></a>浮点占位符</h2><table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
<th>举例</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td><code>%b</code></td>
<td>指数为二的幂的科学计数法，例如1.0的值为 4503599627370496 * 2 ^ -52</td>
<td><code>Printf(&quot;%b&quot;, 1.0)</code></td>
<td><code>4503599627370496p-52</code></td>
</tr>
<tr>
<td><code>%e</code></td>
<td>科学计数法，输出显示为小e</td>
<td><code>Printf(&quot;%e&quot;, 120.0)</code></td>
<td><code>1.200000e+02</code></td>
</tr>
<tr>
<td><code>%E</code></td>
<td>科学计数法，输出显示为大E</td>
<td><code>Printf(&quot;%E&quot;, 120.0)</code></td>
<td><code>1.200000E+02</code></td>
</tr>
<tr>
<td><code>%f</code></td>
<td>以值的形式显示小数</td>
<td><code>Printf(&quot;%f&quot;, 120.0)</code></td>
<td><code>120.000000</code></td>
</tr>
<tr>
<td><code>%g</code></td>
<td>根据形势选择 %e 或 %f</td>
<td><code>Printf(&quot;%g %g&quot;, 120.0,1200000.0)</code></td>
<td><code>120 1.2e+06</code></td>
</tr>
<tr>
<td><code>%G</code></td>
<td>根据形势选择 %E 或 %f</td>
<td><code>Printf(&quot;%G %G&quot;, 120.0,1200000.0)</code></td>
<td><code>120 1.2E+06</code></td>
</tr>
</tbody></table>
<h2 id="字符串与字符切片"><a href="#字符串与字符切片" class="headerlink" title="字符串与字符切片"></a>字符串与字符切片</h2><table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
<th>举例</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td><code>%s</code></td>
<td>输出字符串表示（string类型或[]byte)</td>
<td><code>Printf(&quot;%s %s&quot;, []byte(stolen.name), stolen.name)</code></td>
<td><code>stolen stolen</code></td>
</tr>
<tr>
<td><code>%q</code></td>
<td>双引号围绕的字符串</td>
<td><code>Printf(&quot;%q&quot;, stolen.name)</code></td>
<td><code>&quot;stolen&quot;</code></td>
</tr>
<tr>
<td><code>%x</code></td>
<td>十六进制, 小写字母, 每字节两个字符</td>
<td><code>Printf(&quot;%x&quot;, stolen.name)</code></td>
<td><code>73746f6c656e</code></td>
</tr>
<tr>
<td><code>%X</code></td>
<td>十六进制, 大写字母, 每字节两个字符</td>
<td><code>Printf(&quot;%X&quot;, []byte(stolen.name))</code></td>
<td><code>73746F6C656E</code></td>
</tr>
</tbody></table>
<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
<th>举例</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td><code>%p</code></td>
<td>指针的值</td>
<td><code>Printf(&quot;%p&quot;, &amp;stolen)</code></td>
<td><code>0x119ade0</code></td>
</tr>
</tbody></table>
<p>参考文章：</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_39386145/article/details/125543243">go语言中的占位符</a></li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 泛型</title>
    <url>/2023/go_generics/</url>
    <content><![CDATA[<h2 id="泛型符号"><a href="#泛型符号" class="headerlink" title="泛型符号"></a>泛型符号</h2><ul>
<li><code>any</code> - 空接口，表示任意类型</li>
<li><code>~T</code> - 表示所有底层类型为T的类型集合，例如: <code>type myInt int</code> 中myInt的底层类型就是int</li>
<li><code>comparable</code> - 指代可以使用&#x3D;&#x3D;或!&#x3D;来进行比较的类型集合。可以满足map类型的key的类型要求</li>
</ul>
<h2 id="声明一个泛型函数"><a href="#声明一个泛型函数" class="headerlink" title="声明一个泛型函数"></a>声明一个泛型函数</h2><ul>
<li>使用 <code>[T any]</code> 来表示该函数支持任何T类型</li>
<li>可以存在不同类型的多个泛型<ul>
<li><code>[M, N any]</code></li>
<li><code>[M any, N any]</code></li>
<li><code>[M any, N comparable]</code></li>
</ul>
</li>
<li>调用泛型函数时，可以指定类型，也可以忽略<ul>
<li><code>funcName[int](5)</code></li>
<li><code>funcName(5)</code></li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 泛型函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printAny</span>[<span class="title">T</span> <span class="title">any</span>]<span class="params">(s []T)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> _,v := <span class="keyword">range</span> s&#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%v\n&quot;</span>,v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	printAny[<span class="type">int</span>]([]<span class="type">int</span>&#123;<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>,<span class="number">100</span>&#125;)</span><br><span class="line">	printAny[<span class="type">float64</span>]([]<span class="type">float64</span>&#123;<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">5.5</span>&#125;)</span><br><span class="line">	printAny[<span class="type">string</span>]([]<span class="type">string</span>&#123;<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;cc&quot;</span>,<span class="string">&quot;dd&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 省略显示类型</span></span><br><span class="line">	printAny([]<span class="type">int64</span>&#123;<span class="number">55</span>,<span class="number">44</span>,<span class="number">33</span>,<span class="number">22</span>,<span class="number">11</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛型切片"><a href="#泛型切片" class="headerlink" title="泛型切片"></a>泛型切片</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> vector[T any] []T</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	v:=vector[<span class="type">int</span>]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.<span class="built_in">println</span>(v)</span><br><span class="line">	v2:=vector[<span class="type">string</span>]&#123;<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;cc&quot;</span>,<span class="string">&quot;dd&quot;</span>&#125;</span><br><span class="line">	fmt.<span class="built_in">println</span>(v2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛型map"><a href="#泛型map" class="headerlink" title="泛型map"></a>泛型map</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> M[K comparable, V any] <span class="keyword">map</span>[K]V</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m1 := M[<span class="type">string</span>, <span class="type">int</span>]&#123;<span class="string">&quot;key&quot;</span>: <span class="number">1</span>&#125;</span><br><span class="line">	m1[<span class="string">&quot;key&quot;</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">	m2 := M[<span class="type">string</span>, <span class="type">string</span>]&#123;<span class="string">&quot;key&quot;</span>: <span class="string">&quot;value&quot;</span>&#125;</span><br><span class="line">	m2[<span class="string">&quot;key&quot;</span>] = <span class="string">&quot;new value&quot;</span></span><br><span class="line">	fmt.Println(m1, m2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛型通道"><a href="#泛型通道" class="headerlink" title="泛型通道"></a>泛型通道</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> C[T any] <span class="keyword">chan</span> T</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c1 := <span class="built_in">make</span>(C[<span class="type">int</span>], <span class="number">10</span>)</span><br><span class="line">	c1 &lt;- <span class="number">1</span></span><br><span class="line">	c1 &lt;- <span class="number">2</span></span><br><span class="line"></span><br><span class="line">	c2 := <span class="built_in">make</span>(C[<span class="type">string</span>], <span class="number">10</span>)</span><br><span class="line">	c2 &lt;- <span class="string">&quot;hello&quot;</span></span><br><span class="line">	c2 &lt;- <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(&lt;-c1, &lt;-c2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><h3 id="使用interface规定的类型约束泛型"><a href="#使用interface规定的类型约束泛型" class="headerlink" title="使用interface规定的类型约束泛型"></a>使用interface规定的类型约束泛型</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义的NumStr约束了类型只能为数字和字符串</span></span><br><span class="line"><span class="keyword">type</span> NumStr <span class="keyword">interface</span> &#123;</span><br><span class="line">	Num | Str</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Num <span class="keyword">interface</span> &#123;</span><br><span class="line">	~<span class="type">int</span> | ~<span class="type">int8</span> | ~<span class="type">int16</span>| ~<span class="type">int32</span>| ~<span class="type">int64</span>| ~<span class="type">uint</span>| ~ <span class="type">uint8</span>| ~ <span class="type">uint16</span>| ~ <span class="type">uint32</span>| ~<span class="type">uint64</span>| ~ <span class="type">uintptr</span>| ~ <span class="type">float32</span>| ~ <span class="type">float64</span>| ~ <span class="type">complex64</span>| ~ <span class="type">complex128</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Str <span class="keyword">interface</span> &#123;</span><br><span class="line">	<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处的T只能为数字和字符串类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span>[<span class="title">T</span> <span class="title">NumStr</span>]<span class="params">(a,b T)</span></span> T &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fmt.Println(add(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">	fmt.Println(add(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用interface规定的方法约束泛型"><a href="#使用interface规定的方法约束泛型" class="headerlink" title="使用interface规定的方法约束泛型"></a>使用interface规定的方法约束泛型</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Price <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i Price)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> strconv.Itoa(<span class="type">int</span>(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Price2 <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i Price2)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">string</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ShowPrice <span class="keyword">interface</span> &#123;</span><br><span class="line">	String() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ShowPriceList</span>[<span class="title">T</span> <span class="title">ShowPrice</span>]<span class="params">(s []T)</span></span> (ret []<span class="type">string</span>) &#123;</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">		ret = <span class="built_in">append</span>(ret, v.String())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(ShowPriceList([]Price&#123;<span class="number">1</span>, <span class="number">2</span>&#125;))</span><br><span class="line">	fmt.Println(ShowPriceList([]Price2&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用interface规定的方法和类型约束泛型"><a href="#使用interface规定的方法和类型约束泛型" class="headerlink" title="使用interface规定的方法和类型约束泛型"></a>使用interface规定的方法和类型约束泛型</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Price <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ShowPrice <span class="keyword">interface</span> &#123;</span><br><span class="line">	String() <span class="type">string</span></span><br><span class="line">	~<span class="type">int</span> | ~<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i Price)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> strconv.Itoa(<span class="type">int</span>(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ShowPriceList</span>[<span class="title">T</span> <span class="title">ShowPrice</span>]<span class="params">(s []T)</span></span> (ret []<span class="type">string</span>) &#123;</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">		ret = <span class="built_in">append</span>(ret, v.String())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(ShowPriceList([]Price&#123;<span class="number">1</span>, <span class="number">2</span>&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用自带的comparable约束"><a href="#使用自带的comparable约束" class="headerlink" title="使用自带的comparable约束"></a>使用自带的comparable约束</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findFunc</span>[<span class="title">T</span> <span class="title">comparable</span>]<span class="params">(a []T, v T)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i, e := <span class="keyword">range</span> a &#123;</span><br><span class="line">		<span class="keyword">if</span> e == v &#123;</span><br><span class="line">			<span class="keyword">return</span> i</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(findFunc([]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, <span class="number">5</span>))</span><br><span class="line">	fmt.Println(findFunc([]<span class="type">string</span>&#123;<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>&#125;, <span class="string">&quot;dd&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>comparable 也可以在自定义结构体中进行约束类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyType <span class="keyword">interface</span> &#123;</span><br><span class="line">	<span class="type">int</span> | <span class="type">string</span> | comparable</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>更新日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建</title>
    <url>/2020/hexo/</url>
    <content><![CDATA[<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><p>Windows：进入<a href="https://git-scm.com/">git官网</a>下载Windows安装包进行安装即可，官网下载速度慢可以使用<a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝镜像</a></p>
<p>Linux：通过包管理工具安装git或进入<a href="https://git-scm.com/">git官网</a>选择tarballs进入下载归档文件进行源代码构建安装</p>
<h3 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h3><p>可以进入<a href="https://npm.taobao.org/mirrors/node">淘宝镜像</a>进行下载安装包或归档文件进行安装，注意添加环境变量</p>
<h2 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h2><p><code>npm install -g hexo-cli</code></p>
<h2 id="3-Hexo工程创建"><a href="#3-Hexo工程创建" class="headerlink" title="3. Hexo工程创建"></a>3. Hexo工程创建</h2><ul>
<li>建立一个Hexo的工程目录，进入该目录</li>
<li><code>hexo init</code> 进行初始化</li>
<li><code>npm install</code>安装相关依赖</li>
</ul>
<h2 id="4-文件说明"><a href="#4-文件说明" class="headerlink" title="4. 文件说明"></a>4. 文件说明</h2><p>项目结构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p><code>_config.yml</code>：网站的配置信息，您可以在此配置大部分的参数。详细配置见<a href="https://hexo.bootcss.com/docs/configuration.html">配置</a></p>
<p><code>package.json</code>：应用程序的信息。EJS, Stylus和 Markdown renderer 已默认安装，您可以自由移除。</p>
<p><code>scaffolds</code>：<a href="https://hexo.bootcss.com/docs/writing.html">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>
<p><code>source</code>：资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p>
<p><code>themes</code>：<a href="https://hexo.bootcss.com/docs/themes.html">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p>
<h2 id="5-相关命令"><a href="#5-相关命令" class="headerlink" title="5. 相关命令"></a>5. 相关命令</h2><h3 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h3><p><code>hexo init [folder]</code>：新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>
<p><code>hexo new [layout] &lt;title&gt;</code>：新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用<code>_config.yml</code>中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<p><code>hexo generate</code>：生成静态文件，可以简写为<code>hexo g</code></p>
<ul>
<li>-d，–deploy：生成文件后立即部署</li>
<li>-w，–watch：监视文件变动</li>
</ul>
<p><code>hexo publish [layout] &lt;filename&gt;</code>：发表草稿</p>
<p><code>hexo server</code>：启动服务器，默认在4000端口</p>
<ul>
<li>-p，–port：重设端口</li>
<li>-s，–static：只使用静态文件</li>
<li>-l，–log：启动日记记录，使用覆盖记录格式</li>
</ul>
<p><code>hexo deploy</code>：部署网站，可以简写为<code>hexo d</code></p>
<ul>
<li>-g，–generate：部署之前预先生成静态文件</li>
</ul>
<p><code>hexo render &lt;file1&gt; [file2]...</code>：渲染文件</p>
<ul>
<li>-o，–output：设置输出路径</li>
</ul>
<p><code>hexo migrate &lt;type&gt;</code>：从其他博客系统迁移内容</p>
<p><code>hexo clean</code>：清除缓存文件和已生成的静态文件</p>
<p><code>hexo version</code>：显示Hexo版本</p>
<h3 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h3><p>启动服务器：<code>hexo server</code></p>
<p>内容修改后刷新重启：<code>hexo clean</code> <code>hexo generate/g</code> <code>hexo deploy/d</code> <code>hexo server</code></p>
<h3 id="在线部署"><a href="#在线部署" class="headerlink" title="在线部署"></a>在线部署</h3><p>修改<code>_config.yml</code>最后添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">https://github.com/你的GitHub名/你的GitHub名.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>使用git部署, 输入指令<code>npm install hexo-deployer-git --save</code></p>
<p>输入指令<code>hexo clean</code> <code>hexo generate</code> <code>hexo deploy</code> 对博客进行提交</p>
<p>该指令可以简化为<code>hexo clean &amp;&amp; hexo d -g</code></p>
<p>参考内容：<a href="https://hexo.bootcss.com/docs/">Hexo文档</a></p>
]]></content>
      <categories>
        <category>技术工具</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Next部署博客配置及注意事项</title>
    <url>/2020/hexo_next/</url>
    <content><![CDATA[<p><strong>注意</strong>：本文只介绍一些容易带坑的配置和个性化配置，常规配置或Hexo的博客搭建过程详见<a href="/hexo/">Hexo博客搭建</a></p>
<h2 id="适用版本"><a href="#适用版本" class="headerlink" title="适用版本"></a>适用版本</h2><p>Hexo：4.2.0</p>
<p>OS：Windows 10 1909 （18636.752）</p>
<p>Next：7.8.0</p>
<p>Node：12.1.0</p>
<h2 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h2><h3 id="Language"><a href="#Language" class="headerlink" title="Language"></a>Language</h3><p>配置注意：language如果配置为中文，网上许多教程写的应该用<code>zh-Hans</code>，实际上应该使用主题中提供的字体包名，例如我使用Next7.8.0，中文字体包叫做<code>zh-CN</code>，所以此处就应该配置为</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># site</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>

<h3 id="创建tags-categories-about"><a href="#创建tags-categories-about" class="headerlink" title="创建tags&#x2F;categories&#x2F;about"></a>创建tags&#x2F;categories&#x2F;about</h3><p>在cmd命令行中进入hexo的目录下</p>
<p>执行<code>hexo new pages &quot;tags/categories/about&quot;</code></p>
<p>会在<code>hexo/sources/</code>目录下创建相应的文件夹，文件夹下有一个<code>index.md</code>文件</p>
<p>title网页上显示的名称，可以进行自定义</p>
<p>添加<code>type: tags/categories</code></p>
<p>最后配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-04-12 10:59:21</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">categories</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：archives和about不需要设置type，会自动生成页面，如果对于关于我的页面需要定制，直接在<code>hexo/source/about/index.md</code>中进行编辑即可</p>
<p>在文章开头添加yaml批注就能自动进行分类归档了。</p>
<p><strong>注意</strong>：yaml的批注是<code>--- ---</code>包裹的内容，</p>
<p>例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-04-11 21:01:24</span></span><br><span class="line"><span class="attr">updated:</span> <span class="number">2020-04-12 15:16:24</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Windows</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Linux</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">教程</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">教程</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：tags下的标签是并列关系，categories下的标签是父子关系</p>
<h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<p>安装该插件，然后在文章的yaml配置中添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">password:</span> <span class="string">password</span></span><br><span class="line"><span class="attr">abstract:</span> <span class="string">有东西被加密了,</span> <span class="string">请输入密码查看.</span></span><br></pre></td></tr></table></figure>

<p>高级配置详见<a href="https://github.com/MikeCoder/hexo-blog-encrypt">hexo-blog-encrypt</a></p>
<h2 id="Next配置"><a href="#Next配置" class="headerlink" title="Next配置"></a>Next配置</h2><h3 id="网页图标"><a href="#网页图标" class="headerlink" title="网页图标"></a>网页图标</h3><p>网页title前的link图标，一般只需要配置small，但是保险起见可以将small和medium都配置好，图片需要是ico格式（我使用png格式不显示，但是默认配置的png图片能显示），图片的位置放在<code>/hexo/themes/next/source/images/</code>下，配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon.ico</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon.ico</span></span><br></pre></td></tr></table></figure>

<h3 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h3><p>Next提供了四种风格的主题，可以根据个人喜好进行配置，具体样式见<a href="https://muse.theme-next.org/">Muse</a>、<a href="https://mist.theme-next.org/">Mist</a>、<a href="https://pisces.theme-next.org/">Pisces</a>、<a href="https://gemini.theme-next.org/">Gemini</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>

<h3 id="顶部菜单"><a href="#顶部菜单" class="headerlink" title="顶部菜单"></a>顶部菜单</h3><p>menu配置的是网页顶部的导航链接，可以按照自己的需求配置，前面是显示的文件，中间为链接，<code>||</code>后面的为图标，如果需要自定义链接，建议将所有的图标都去掉，以免影响整体美观</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br></pre></td></tr></table></figure>

<h3 id="侧边栏位置"><a href="#侧边栏位置" class="headerlink" title="侧边栏位置"></a>侧边栏位置</h3><p>sidebar主要配置在文章中或者在其他页面显示文章目录或站点概览的位置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position.</span></span><br><span class="line">  <span class="comment">#position: left</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span></span><br></pre></td></tr></table></figure>

<h3 id="个人头像"><a href="#个人头像" class="headerlink" title="个人头像"></a>个人头像</h3><p>avatar配置的是站点概览的头像，默认是没有头像的，可以自定义配置一张，rounded为裁剪为圆形，rotated为跟随鼠标转动</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/header.jpg</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="个人社交"><a href="#个人社交" class="headerlink" title="个人社交"></a>个人社交</h3><p>social配置的是站点概览的个人社交地址，可以按照自己使用自定义，<code>||</code>后面的是站点的图标，可以用<code>social_icons</code>来定义显示方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/stolenzc</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">Weibo:</span> <span class="string">https://weibo.com/u/3333060672</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-weibo</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="个人页关联网站"><a href="#个人页关联网站" class="headerlink" title="个人页关联网站"></a>个人页关联网站</h3><p>links配置的是站点概览的个人链接，可以自定义一些链接在里面快速跳转，用<code>links_settings</code>来配置显示方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="string">个人网站:</span> <span class="string">https://www.stolenzc.com</span></span><br><span class="line">  <span class="string">日程管理:</span> <span class="string">https://schedule.stolenzc.com/schedule/</span></span><br><span class="line">  <span class="string">gitee主页:</span> <span class="string">https://stolenzc.gitee.io</span></span><br><span class="line"></span><br><span class="line"><span class="attr">links_settings:</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Links</span></span><br><span class="line">  <span class="comment"># Available values: block | inline</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">inline</span></span><br></pre></td></tr></table></figure>

<h3 id="首页文章预览"><a href="#首页文章预览" class="headerlink" title="首页文章预览"></a>首页文章预览</h3><p>Next默认首页是显示文章的全部内容，但是这样会显得首页非常凌乱，网上说的使用auto_excerpt来配置预览字数，但是我是用的7.8.0已经没有了该配置，正确的配置有两种方法</p>
<ol>
<li>在文章开头的yaml配置中添加description，然后设置excerpt_description为true</li>
<li>编辑markdown文件在你想要截断的地方添加<code>&lt;!-- more --&gt;</code>，文章显示出来就会在此处截断，并且会添加一个阅读全文的链接（官方推荐）</li>
</ol>
<h3 id="添加访问统计"><a href="#添加访问统计" class="headerlink" title="添加访问统计"></a>添加访问统计</h3><p>在<code>hexo/themes/next/_config.yml</code>中找到footer并添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">counter:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>找到busuanzi_count并将enable改为true</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>在<code>hexo/themes/next/layout/_partials/footer.swig</code>最后添加：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.footer.counter %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文末结束标记"><a href="#文末结束标记" class="headerlink" title="文末结束标记"></a>文末结束标记</h3><p>在路径<code>hexo\themes\next\layout\_macro</code>文件夹中新建<code>passage-end-tag.swig</code>文件，编辑内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-paw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打开<code>hexo\themes\next\layout\_macro\post.swig</code>，在<code>END POST BODY</code>后面添加以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改主题配置文件<code>_config.yml</code>，在末尾添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="文章字数和时间统计"><a href="#文章字数和时间统计" class="headerlink" title="文章字数和时间统计"></a>文章字数和时间统计</h3><p>安装插件<code>npm install hexo-symbols-count-time</code></p>
<p>配置hexo的<code>_config.yml</code>设置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure>

<p>设置含义参考：<a href="https://github.com/theme-next/hexo-symbols-count-time">hexo-symbols-count-time</a></p>
<h3 id="配置搜索功能"><a href="#配置搜索功能" class="headerlink" title="配置搜索功能"></a>配置搜索功能</h3><p>NexT题支持集成 Swiftype、 微搜索、Local Search 和 Algolia。本文介绍Local Search的安装。</p>
<p>安装<code>hexo-generator-search</code>和<code>hexo-generator-searchdb</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>编辑hexo的<code>_config.yml</code>配置，在末尾添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>编辑NexT的<code>_config.yml</code>配置，将local-search设置修改为true：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="string">ture</span></span><br></pre></td></tr></table></figure>

<h3 id="来必力评论"><a href="#来必力评论" class="headerlink" title="来必力评论"></a>来必力评论</h3><ol>
<li>在来必力网站注册账号，创建一个应用</li>
<li>进入应用找到配置的代码，将date-uid后面的内容拷贝下来</li>
<li>打开Next的_config.yml文件，找到livere_uid，将刚刚拷贝下来的id粘贴在后面</li>
<li>显示的详细配置在来必力管理页面中进行配置</li>
</ol>
<h3 id="配置首页隐藏文章"><a href="#配置首页隐藏文章" class="headerlink" title="配置首页隐藏文章"></a>配置首页隐藏文章</h3><ol>
<li><p>编辑<code>themes/next/layout/index.swig</code>，添加以下代码的第三行和第五行</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;posts-expand&quot;</span>&gt;</span></span><br><span class="line">  &#123;%- for post in page.posts.toArray() %&#125;</span><br><span class="line">    &#123;%- if post.hidden != true %&#125;</span><br><span class="line">      &#123;&#123; partial(&#x27;_macro/post.swig&#x27;, &#123;post: post, is_index: true&#125;) &#125;&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">  &#123;%- endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑<code>scaffolds/post.md</code>，添加一下代码的第四行</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125;</span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"><span class="attr">hidden:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在使用时，文章最顶部添加<code>hidden: True</code>即可在博客首页隐藏文章</p>
</li>
</ol>
<h3 id="跳过指定文件的渲染"><a href="#跳过指定文件的渲染" class="headerlink" title="跳过指定文件的渲染"></a>跳过指定文件的渲染</h3><p>编辑_config.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> [<span class="string">_posts/*</span>]</span><br></pre></td></tr></table></figure>

<p>支持正则表达式</p>
<p><strong>更多配置参考：<a href="https://www.jianshu.com/p/9f0e90cc32c2">Hexo-NexT配置超炫网页效果</a></strong></p>
]]></content>
      <categories>
        <category>技术工具</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS加密原理</title>
    <url>/2022/https/</url>
    <content><![CDATA[<h2 id="HTTPS传输的加密使用"><a href="#HTTPS传输的加密使用" class="headerlink" title="HTTPS传输的加密使用"></a>HTTPS传输的加密使用</h2><p>https在进行内容传输的时候使用的是对称加密</p>
<p>https在进行证书验证阶段使用的是非对称加密</p>
<h2 id="HTTP与HTTPS的区别"><a href="#HTTP与HTTPS的区别" class="headerlink" title="HTTP与HTTPS的区别"></a>HTTP与HTTPS的区别</h2><ul>
<li>默认端口，HTTP是80，HTTPS是443</li>
<li>传输协议，http是超文本传输协议，属于明文传输；https是安全的超文本传输协议，是经过SSL加密后的传输协议</li>
<li>安全性，https使用了TLS&#x2F;SSL，比http更安全</li>
<li>证书，https需要申请ca证书</li>
<li>HTTPS的加密是在传输层完成的，因为SSL是位于传输层的，TLS的前身是SSL。</li>
</ul>
<h2 id="HTTP的通信过程"><a href="#HTTP的通信过程" class="headerlink" title="HTTP的通信过程"></a>HTTP的通信过程</h2><p>作为标准的C&#x2F;S模型，http协议总是由客户端发起，服务器进行响应。</p>
<ol>
<li>DNS解析，域名系统DNS将域名解析成IP地址</li>
<li>建立TCP连接，进行TCP的三次握手</li>
<li>浏览器发送请求</li>
<li>服务器响应浏览器，向浏览器发送数据</li>
<li>通信完成，TCP连接关闭</li>
</ol>
<h2 id="HTTPS的通信过程"><a href="#HTTPS的通信过程" class="headerlink" title="HTTPS的通信过程"></a>HTTPS的通信过程</h2><p>https主要在http的2和3之间，建立了一个加密的连接，这个连接使用了TLS&#x2F;SSL协议，它是一个安全的传输协议，它的加密使用了对称加密，而不是非对称加密。</p>
<p>通信过程如下 ：</p>
<ol>
<li>DNS解析，域名系统DNS将域名解析成IP地址</li>
<li>客户端和服务器端通过TCP建立连接，并发送https请求。</li>
<li>客户端发起TLS握手，向服务端发送<code>ClientHello</code>消息，<ul>
<li>客户端支持的SSL&#x2F;TLS版本</li>
<li>客户端支持的加密套件，比如RSA加密算法</li>
<li>会话session id，（如果有的值的话，服务器端会复用对应的握手信息，避免短时间内重复握手）</li>
<li>客户端随机数，用于生成随机密钥</li>
</ul>
</li>
<li>服务器收到<code>ClientHello</code>消息，向客户端发送<code>ServerHello</code>消息<ul>
<li>服务器所能支持的最高SSL&#x2F;TLS版本</li>
<li>服务器选择的加密套件列表，比如RSA加密算法</li>
<li>服务器随机数，用于生成随机密钥</li>
<li>服务器的ca证书</li>
</ul>
</li>
<li>客户端收到<code>ServerHello</code>后，会对收到的证书进行验证。包括验证证书机构、有效期等，验证证书的合法性验证</li>
<li>验证成功后，Client生成随机数，用于密钥交换过程。客户端会从数字证书中取出服务器的公钥，然后使用它加密报文该随机数，发送到服务器</li>
<li>服务器使用私钥解密。获取客户端发送的随机数</li>
<li>客户端使用这三个随机数一起计算出对称加密密钥，同理服务端也可以计算出这个加密密钥。客户端和服务端都计算出加密密钥<code>master secret</code></li>
<li>客户端用<code>master secret</code>加密了一条握手完成的消息发送给服务器</li>
<li>服务器端也回发了一条用<code>master secret</code>加密的握手完成的消息</li>
<li>服务器将发送的内容用<code>master secret</code>加密，然后发送给客户端</li>
<li>客户端使用<code>master secret</code>解密收到的消息</li>
</ol>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>技术原理</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Hugo博客搭建</title>
    <url>/2022/hugo/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很久之前就想要将之前hexo的博客迁移到hugo上，主要原因一个是hexo的next主题使用了两年多了，两年来审美发生了很大变化，在偶然间发现了hugo的paper主题，感觉很好看，于是就想着迁移过去。还有一个原因是自己也想要体验一下hugo的搭建过程，看看hugo的优势在哪里。还有一个原因就是自己的hexo主题自己不太能够控制了，很多地方的配置因为当时特殊修改过导致现在已经不太敢去动了，来必力评论突然出现了大量的广告。实在是不能忍受。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>使用了PaperMod主题，大部分配置都是参考<a href="https://gohugo.io/documentation/">hugo官方文档</a> 和 <a href="https://github.com/adityatelange/hugo-PaperMod/wiki/Features">PaperMod主题文档</a></p>
<p>做了几个特殊的配置</p>
<h3 id="引入fontaewsome图标"><a href="#引入fontaewsome图标" class="headerlink" title="引入fontaewsome图标"></a>引入fontaewsome图标</h3><p>复制主题目录中<code>layouts/partials/head.html</code> 文件到博客根目录 <code>layouts/partials/head.html</code>下，然后在<code>head.html</code>中引入以下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://use.fontawesome.com/releases/v5.15.4/css/all.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-DyZ88mC6Up2uqS4h/KRgHuoeGwBcD4Ng9SiP4dIRy0EXTlnuz47vAwmeGwVChigm&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在配置的地方直接使用就可以了</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">    <span class="attr">main:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">identifier:</span> <span class="string">home</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">主页</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">pre:</span> <span class="string">&lt;i</span> <span class="string">class=&#x27;fa</span> <span class="string">fa-home&#x27;&gt;&lt;/i&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">identifier:</span> <span class="string">tags</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">标签</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">tags/</span></span><br><span class="line">      <span class="attr">pre:</span> <span class="string">&lt;i</span> <span class="string">class=&#x27;fa</span> <span class="string">fa-tags&#x27;&gt;&lt;/i&gt;</span></span><br></pre></td></tr></table></figure>

<p>默认情况下图标和汉字会紧挨着，可以在i标签中添加一个空格来解决 <code>&lt;i class=&#39;fa fa-tags&#39;&gt;&amp;ensp;&lt;/i&gt;</code></p>
<h3 id="侧边栏目录"><a href="#侧边栏目录" class="headerlink" title="侧边栏目录"></a>侧边栏目录</h3><p>PaperMod主题默认的toc目录是在文章开头，作为目录始终感觉不太方便，这里参考 <a href="https://www.sulvblog.cn/posts/blog/hugo_toc_side/">Hugo博客目录放在侧边 | PaperMod主题</a> 中的方法将其修改为左边栏</p>
<p>主要是修改toc.html文件</p>
<p>创建文件 <code>layouts/partials/toc.html</code>，然后将<code>toc.html</code>中加入以下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;- $headers := findRE &quot;&lt;h[1-6].*?&gt;(.|\n])+?&lt;/h[1-6]&gt;&quot; .Content -&#125;&#125;</span><br><span class="line">&#123;&#123;- $has_headers := ge (len $headers) 1 -&#125;&#125;</span><br><span class="line">&#123;&#123;- if $has_headers -&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">id</span>=<span class="string">&quot;toc-container&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toc-container wide&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toc&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">details</span> &#123;&#123;<span class="attr">if</span> (<span class="attr">.Param</span> &quot;<span class="attr">TocOpen</span>&quot;) &#125;&#125; <span class="attr">open</span>&#123;&#123; <span class="attr">end</span> &#125;&#125;&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">summary</span> <span class="attr">accesskey</span>=<span class="string">&quot;c&quot;</span> <span class="attr">title</span>=<span class="string">&quot;(Alt + C)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;details&quot;</span>&gt;</span>&#123;&#123;- i18n &quot;toc&quot; | default &quot;Table of Contents&quot; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;- $largest := 6 -&#125;&#125;</span><br><span class="line">                &#123;&#123;- range $headers -&#125;&#125;</span><br><span class="line">                &#123;&#123;- $headerLevel := index (findRE &quot;[1-6]&quot; . 1) 0 -&#125;&#125;</span><br><span class="line">                &#123;&#123;- $headerLevel := len (seq $headerLevel) -&#125;&#125;</span><br><span class="line">                &#123;&#123;- if lt $headerLevel $largest -&#125;&#125;</span><br><span class="line">                &#123;&#123;- $largest = $headerLevel -&#125;&#125;</span><br><span class="line">                &#123;&#123;- end -&#125;&#125;</span><br><span class="line">                &#123;&#123;- end -&#125;&#125;</span><br><span class="line"></span><br><span class="line">                &#123;&#123;- $firstHeaderLevel := len (seq (index (findRE &quot;[1-6]&quot; (index $headers 0) 1) 0)) -&#125;&#125;</span><br><span class="line"></span><br><span class="line">                &#123;&#123;- $.Scratch.Set &quot;bareul&quot; slice -&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    &#123;&#123;- range seq (sub $firstHeaderLevel $largest) -&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        &#123;&#123;- $.Scratch.Add &quot;bareul&quot; (sub (add $largest .) 1) -&#125;&#125;</span><br><span class="line">                        &#123;&#123;- end -&#125;&#125;</span><br><span class="line">                        &#123;&#123;- range $i, $header := $headers -&#125;&#125;</span><br><span class="line">                        &#123;&#123;- $headerLevel := index (findRE &quot;[1-6]&quot; . 1) 0 -&#125;&#125;</span><br><span class="line">                        &#123;&#123;- $headerLevel := len (seq $headerLevel) -&#125;&#125;</span><br><span class="line"></span><br><span class="line">                        &#123;&#123;/* get id=&quot;xyz&quot; */&#125;&#125;</span><br><span class="line">                        &#123;&#123;- $id := index (findRE &quot;(id=\&quot;(.*?)\&quot;)&quot; $header 9) 0 &#125;&#125;</span><br><span class="line"></span><br><span class="line">                        &#123;&#123;- /* strip id=&quot;&quot; to leave xyz, no way to get regex capturing groups in hugo */ -&#125;&#125;</span><br><span class="line">                        &#123;&#123;- $cleanedID := replace (replace $id &quot;id=\&quot;&quot; &quot;&quot;) &quot;\&quot;&quot; &quot;&quot; &#125;&#125;</span><br><span class="line">                        &#123;&#123;- $header := replaceRE &quot;&lt;h[1-6].*?&gt;((.|\n])+?)&lt;/h[1-6]&gt;&quot; &quot;$1&quot; $header -&#125;&#125;</span><br><span class="line"></span><br><span class="line">                        &#123;&#123;- if ne $i 0 -&#125;&#125;</span><br><span class="line">                        &#123;&#123;- $prevHeaderLevel := index (findRE &quot;[1-6]&quot; (index $headers (sub $i 1)) 1) 0 -&#125;&#125;</span><br><span class="line">                        &#123;&#123;- $prevHeaderLevel := len (seq $prevHeaderLevel) -&#125;&#125;</span><br><span class="line">                        &#123;&#123;- if gt $headerLevel $prevHeaderLevel -&#125;&#125;</span><br><span class="line">                        &#123;&#123;- range seq $prevHeaderLevel (sub $headerLevel 1) -&#125;&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                            &#123;&#123;/* the first should not be recorded */&#125;&#125;</span><br><span class="line">                            &#123;&#123;- if ne $prevHeaderLevel . -&#125;&#125;</span><br><span class="line">                            &#123;&#123;- $.Scratch.Add &quot;bareul&quot; . -&#125;&#125;</span><br><span class="line">                            &#123;&#123;- end -&#125;&#125;</span><br><span class="line">                            &#123;&#123;- end -&#125;&#125;</span><br><span class="line">                            &#123;&#123;- else -&#125;&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            &#123;&#123;- if lt $headerLevel $prevHeaderLevel -&#125;&#125;</span><br><span class="line">                            &#123;&#123;- range seq (sub $prevHeaderLevel 1) -1 $headerLevel -&#125;&#125;</span><br><span class="line">                            &#123;&#123;- if in ($.Scratch.Get &quot;bareul&quot;) . -&#125;&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                        &#123;&#123;/* manually do pop item */&#125;&#125;</span><br><span class="line">                        &#123;&#123;- $tmp := $.Scratch.Get &quot;bareul&quot; -&#125;&#125;</span><br><span class="line">                        &#123;&#123;- $.Scratch.Delete &quot;bareul&quot; -&#125;&#125;</span><br><span class="line">                        &#123;&#123;- $.Scratch.Set &quot;bareul&quot; slice&#125;&#125;</span><br><span class="line">                        &#123;&#123;- range seq (sub (len $tmp) 1) -&#125;&#125;</span><br><span class="line">                        &#123;&#123;- $.Scratch.Add &quot;bareul&quot; (index $tmp (sub . 1)) -&#125;&#125;</span><br><span class="line">                        &#123;&#123;- end -&#125;&#125;</span><br><span class="line">                        &#123;&#123;- else -&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    &#123;&#123;- end -&#125;&#125;</span><br><span class="line">                    &#123;&#123;- end -&#125;&#125;</span><br><span class="line">                    &#123;&#123;- end -&#125;&#125;</span><br><span class="line">                    &#123;&#123;- end &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&#123;&#123;- $cleanedID -&#125;&#125;&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;&#123;&#123;- $header | plainify -&#125;&#125;&quot;</span>&gt;</span>&#123;&#123;- $header | safeHTML -&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        &#123;&#123;- else &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&#123;&#123;- $cleanedID -&#125;&#125;&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;&#123;&#123;- $header | plainify -&#125;&#125;&quot;</span>&gt;</span>&#123;&#123;- $header | safeHTML -&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        &#123;&#123;- end -&#125;&#125;</span><br><span class="line">                        &#123;&#123;- end -&#125;&#125;</span><br><span class="line">                        <span class="comment">&lt;!-- &#123;&#123;- $firstHeaderLevel := len (seq (index (findRE &quot;[1-6]&quot; (index $headers 0) 1) 0)) -&#125;&#125; --&gt;</span></span><br><span class="line">                        &#123;&#123;- $firstHeaderLevel := $largest &#125;&#125;</span><br><span class="line">                        &#123;&#123;- $lastHeaderLevel := len (seq (index (findRE &quot;[1-6]&quot; (index $headers (sub (len $headers) 1)) 1) 0)) &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    &#123;&#123;- range seq (sub $lastHeaderLevel $firstHeaderLevel) -&#125;&#125;</span><br><span class="line">                    &#123;&#123;- if in ($.Scratch.Get &quot;bareul&quot;) (add . $firstHeaderLevel) &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                &#123;&#123;- else &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &#123;&#123;- end -&#125;&#125;</span><br><span class="line">                &#123;&#123;- end &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> activeElement;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> elements;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">checkTocPosition</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;h1[id],h2[id],h3[id],h4[id],h5[id],h6[id]&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">         <span class="comment">// Make the first header active</span></span></span><br><span class="line"><span class="language-javascript">         activeElement = elements[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">const</span> id = <span class="built_in">encodeURI</span>(activeElement.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>)).<span class="title function_">toLowerCase</span>();</span></span><br><span class="line"><span class="language-javascript">         <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.inner ul li a[href=&quot;#<span class="subst">$&#123;id&#125;</span>&quot;]`</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">checkTocPosition</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// Check if there is an object in the top half of the screen or keep the last item active</span></span></span><br><span class="line"><span class="language-javascript">        activeElement = <span class="title class_">Array</span>.<span class="title function_">from</span>(elements).<span class="title function_">find</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> ((<span class="title function_">getOffsetTop</span>(element) - <span class="variable language_">window</span>.<span class="property">pageYOffset</span>) &gt; <span class="number">0</span> &amp;&amp; </span></span><br><span class="line"><span class="language-javascript">                (<span class="title function_">getOffsetTop</span>(element) - <span class="variable language_">window</span>.<span class="property">pageYOffset</span>) &lt; <span class="variable language_">window</span>.<span class="property">innerHeight</span>/<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> element;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;) || activeElement</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        elements.<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">const</span> id = <span class="built_in">encodeURI</span>(element.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>)).<span class="title function_">toLowerCase</span>();</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">if</span> (element === activeElement)&#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.inner ul li a[href=&quot;#<span class="subst">$&#123;id&#125;</span>&quot;]`</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">             &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.inner ul li a[href=&quot;#<span class="subst">$&#123;id&#125;</span>&quot;]`</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">         &#125;)</span></span><br><span class="line"><span class="language-javascript">     &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> main = <span class="built_in">parseInt</span>(<span class="title function_">getComputedStyle</span>(<span class="variable language_">document</span>.<span class="property">body</span>).<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;--article-width&#x27;</span>), <span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> toc = <span class="built_in">parseInt</span>(<span class="title function_">getComputedStyle</span>(<span class="variable language_">document</span>.<span class="property">body</span>).<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;--toc-width&#x27;</span>), <span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> gap = <span class="built_in">parseInt</span>(<span class="title function_">getComputedStyle</span>(<span class="variable language_">document</span>.<span class="property">body</span>).<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;--gap&#x27;</span>), <span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">checkTocPosition</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> width = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollWidth</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (width - main - (toc * <span class="number">2</span>) - (gap * <span class="number">4</span>) &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;toc-container&quot;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;wide&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;toc-container&quot;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;wide&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getOffsetTop</span>(<span class="params">element</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!element.<span class="title function_">getClientRects</span>().<span class="property">length</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> rect = element.<span class="title function_">getBoundingClientRect</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> win = element.<span class="property">ownerDocument</span>.<span class="property">defaultView</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> rect.<span class="property">top</span> + win.<span class="property">pageYOffset</span>;   </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>新建文件 <code>assets/css/extended/blank.css</code>，内容如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--nav-width</span>: <span class="number">1380px</span>;</span><br><span class="line">    <span class="attr">--article-width</span>: <span class="number">650px</span>;</span><br><span class="line">    <span class="attr">--toc-width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">40px</span> <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--border);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--entry);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="built_in">var</span>(--radius);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.4em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-container</span><span class="selector-class">.wide</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--border);</span><br><span class="line">    <span class="attribute">left</span>: <span class="built_in">calc</span>((<span class="built_in">var</span>(--toc-width) + <span class="built_in">var</span>(--gap)) * -<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="built_in">var</span>(--gap) * <span class="number">2</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">var</span>(--toc-width);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wide</span> <span class="selector-class">.toc</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: sticky;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">var</span>(--gap);</span><br><span class="line">    <span class="attribute">border</span>: unset;</span><br><span class="line">    <span class="attribute">background</span>: unset;</span><br><span class="line">    <span class="attribute">border-radius</span>: unset;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">40px</span> <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc</span> <span class="selector-tag">details</span> <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: zoom-in;</span><br><span class="line">    <span class="attribute">margin-inline-start</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc</span> <span class="selector-tag">details</span><span class="selector-attr">[open]</span> <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-container</span><span class="selector-class">.wide</span> <span class="selector-class">.toc</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">110%</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: circle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">15px</span> <span class="number">15px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*目录显示高度*/</span></span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">83vh</span>;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc</span> <span class="selector-class">.inner</span>::-webkit-scrollbar-thumb &#123;  <span class="comment">/*滚动条*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--border);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">7px</span> solid <span class="built_in">var</span>(--theme);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="built_in">var</span>(--radius);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin-inline-start</span>: <span class="built_in">calc</span>(<span class="built_in">var</span>(--gap) * <span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.95rem</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--secondary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><p>虽然hugo一切都很好，但有一个很难受的问题，在hexo中，可以通过<code>hexo-blog-encrypt</code>插件来对文章进行加密，但是在hugo中不支持插件，找到了一个可以加密的工具<code>hugo-encryptor</code>，但是只支持对文字部分内容加密，还没有更好的方法对文字全文进行加密。我会不断探索，如果读者有更好的建议也可以<a href="mailto:stolenzc@88.com">联系我</a>。</p>
]]></content>
      <categories>
        <category>技术工具</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT</title>
    <url>/2023/jwt/</url>
    <content><![CDATA[<h2 id="JWT-简介"><a href="#JWT-简介" class="headerlink" title="JWT 简介"></a>JWT 简介</h2><p><a href="https://jwt.io/introduction/">JSON WEB TOKEN</a>，通过数字签名的方式，以 JSON 对象为载体，在不同的服务终端之间安全的传输信息。</p>
<p>可以通过 <a href="https://jwt.io/">JWT 校验</a> 来验证你的 JWT 生成内容是否正确</p>
<p>JWT 最常见的场景就是授权认证，一旦用户登录，后续每个请求都将包含 JWT，系统在每次处理用户请求之前，都会进行 JWT 安全校验，通过之后再进行后续处理。</p>
<h2 id="JWT-的组成"><a href="#JWT-的组成" class="headerlink" title="JWT 的组成"></a>JWT 的组成</h2><p>JWT 由三部分组成，用 <code>.</code> 进行拼接</p>
<p><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.EKd8mqslm3YqO5cdfIF7mAkP6mdXrazy-hGK_SkJJDc</code></p>
<p>这三部分分别是：</p>
<ol>
<li>Header(头部)</li>
<li>payload(负载)</li>
<li>signature(签名)</li>
</ol>
<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header 是一个 JSON 对象主要是用来描述 JWT 的元数据，通常内容如下所示</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>typ</code> - 用来表示 token 的类型，JWT 令牌统一写为<code>JWT</code></li>
<li><code>alg</code> - 签名的算法(algorithm)，默认是 HMAC SHA256(写成 HS256)</li>
</ul>
<h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1516239022</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.rfc-editor.org/rfc/rfc7519#section-4.1">官方定义</a>了7个字段，但不是强制的，用户可以自由定义其他字段进行使用</p>
<table>
<thead>
<tr>
<th>Payload 字段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>iss</code></td>
<td>issuer，表示令牌的签发者；</td>
</tr>
<tr>
<td><code>exp</code></td>
<td>expiration，表示令牌的过期时间，为 UTC 时间戳；</td>
</tr>
<tr>
<td><code>iat</code></td>
<td>issued at, 表示令牌的签发时间，为 UTC 时间戳；</td>
</tr>
<tr>
<td><code>jti</code></td>
<td>jwt id, 表示令牌的唯一标示符，可以用于防止重放攻击；</td>
</tr>
<tr>
<td><code>sub</code></td>
<td>subject，表示令牌的主题；</td>
</tr>
<tr>
<td><code>aud</code></td>
<td>audience，表示令牌的受众；</td>
</tr>
<tr>
<td><code>nbf</code></td>
<td>not before，表示令牌的生效时间；</td>
</tr>
</tbody></table>
<h2 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h2><p>签名，需要提前设定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">HMACSHA256</span>(</span><br><span class="line">  <span class="title function_">base64UrlEncode</span>(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">  <span class="title function_">base64UrlEncode</span>(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure>

<p>base64 转变为 base64Url 的方法</p>
<ul>
<li><code>=</code> 被省略</li>
<li><code>+</code> 替换成 <code>-</code></li>
<li><code>/</code> 替换成 <code>_</code></li>
</ul>
<h2 id="JWT-使用"><a href="#JWT-使用" class="headerlink" title="JWT 使用"></a>JWT 使用</h2><p>如果将数据直接放在 Cookies ，会导致无法跨域请求，所以最好的做法是放在 HTTP 请求的头信息 <code>Authorization</code> 字段里面。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure>

<p>另一个做法是直接将 JWT 数据放在 POST 请求体数据中</p>
<h2 id="JWT-生成代码"><a href="#JWT-生成代码" class="headerlink" title="JWT 生成代码"></a>JWT 生成代码</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> ujson</span><br><span class="line"></span><br><span class="line">SECRET_KEY = <span class="string">&#x27;abcde&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1: 使用pyjwt库, pyjwt 会使用默认的header，所以不传数据也能生成正常的 jwt 签名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_jwt_token</span>(<span class="params">payload, header=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> jwt.encode(payload, SECRET_KEY, algorithm=<span class="string">&#x27;HS256&#x27;</span>, headers=header)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2: 自己实现jwt签名方式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_jwt_sign</span>(<span class="params">payload, header</span>):</span><br><span class="line">    payload = base64.b64encode(ujson.dumps(payload).encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    header = base64.b64encode(ujson.dumps(header).encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    unsign_str = header + <span class="string">&#x27;.&#x27;</span> + payload</span><br><span class="line">    unsign_str = unsign_str.replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">    sign = hmac.new(SECRET_KEY.encode(<span class="string">&#x27;utf-8&#x27;</span>), unsign_str.encode(<span class="string">&#x27;utf-8&#x27;</span>), hashlib.sha256).digest()</span><br><span class="line">    sign = base64.b64encode(sign).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    sign = sign.replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>).replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> unsign_str + <span class="string">&#x27;.&#x27;</span> + sign</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iat&quot;</span>: <span class="number">1516239022</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(get_jwt_token(payload, header))</span><br><span class="line">    <span class="built_in">print</span>(get_jwt_sign(payload, header))</span><br></pre></td></tr></table></figure>

<h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><p>采用 <a href="https://github.com/golang-jwt/jwt">golang-jwt</a> 库</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/golang-jwt/jwt/v4&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CustomClaims <span class="keyword">struct</span> &#123;</span><br><span class="line">	Subject  <span class="type">string</span>           <span class="string">`json:&quot;sub,omitempty&quot;`</span></span><br><span class="line">	Name     <span class="type">string</span>           <span class="string">`json:&quot;name,omitempty&quot;`</span></span><br><span class="line">	IssuedAt *jwt.NumericDate <span class="string">`json:&quot;iat,omitempty&quot;`</span></span><br><span class="line">	jwt.RegisteredClaims</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateJWTToken</span><span class="params">(payload *CustomClaims, header <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;, secret []<span class="type">byte</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">	token := &amp;jwt.Token&#123;</span><br><span class="line">		Header: header,</span><br><span class="line">		Claims: payload,</span><br><span class="line">		Method: jwt.SigningMethodHS256,</span><br><span class="line">	&#125;</span><br><span class="line">	tokenString, err := token.SignedString(secret)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tokenString, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	claims := &amp;CustomClaims&#123;&#125;</span><br><span class="line">	claims.Subject = <span class="string">&quot;1234567890&quot;</span></span><br><span class="line">	claims.Name = <span class="string">&quot;John Doe&quot;</span></span><br><span class="line">	claims.IssuedAt = &amp;jwt.NumericDate&#123;</span><br><span class="line">		Time: time.Unix(<span class="number">1516239022</span>, <span class="number">0</span>),</span><br><span class="line">	&#125;</span><br><span class="line">	header := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">		<span class="string">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">		<span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	jwtString, err := CreateJWTToken(claims, header, []<span class="type">byte</span>(<span class="string">&quot;abcde&quot;</span>))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(jwtString)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>手写 jwt 生成代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/hmac&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Payload <span class="keyword">struct</span> &#123;</span><br><span class="line">	Subject  <span class="type">string</span> <span class="string">`json:&quot;sub,omitempty&quot;`</span></span><br><span class="line">	Name     <span class="type">string</span> <span class="string">`json:&quot;name,omitempty&quot;`</span></span><br><span class="line">	IssuedAt <span class="type">int64</span>  <span class="string">`json:&quot;iat,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Header <span class="keyword">struct</span> &#123;</span><br><span class="line">	Algorithm <span class="type">string</span> <span class="string">`json:&quot;alg,omitempty&quot;`</span></span><br><span class="line">	Type      <span class="type">string</span> <span class="string">`json:&quot;typ,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateJWTBySelf</span><span class="params">(payload *Payload, header *Header, secret []<span class="type">byte</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	payloadStr, err := json.Marshal(payload)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	headerStr, err := json.Marshal(header)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	unsignedStr := Base64UrlEncode(headerStr) + <span class="string">&quot;.&quot;</span> + Base64UrlEncode(payloadStr)</span><br><span class="line">	sign := HmacSha256(unsignedStr, secret)</span><br><span class="line">	signStr := Base64UrlEncode(sign)</span><br><span class="line">	jwt := unsignedStr + <span class="string">&quot;.&quot;</span> + signStr</span><br><span class="line">	<span class="keyword">return</span> jwt, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Base64UrlEncode</span><span class="params">(str []<span class="type">byte</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> base64.RawURLEncoding.EncodeToString(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HmacSha256</span><span class="params">(message <span class="type">string</span>, secret []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">	h := hmac.New(sha256.New, secret)</span><br><span class="line">	h.Write([]<span class="type">byte</span>(message))</span><br><span class="line">	sum := h.Sum(<span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	payload := &amp;Payload&#123;</span><br><span class="line">		Subject:  <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">		Name:     <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">		IssuedAt: <span class="number">1516239022</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	header := &amp;Header&#123;</span><br><span class="line">		Algorithm: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">		Type:      <span class="string">&quot;JWT&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	secret := []<span class="type">byte</span>(<span class="string">&quot;abcde&quot;</span>)</span><br><span class="line"></span><br><span class="line">	jwtString, err := CreateJWTBySelf(payload, header, secret)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(jwtString)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
        <tag>技术原理</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS使用</title>
    <url>/2020/mac/</url>
    <content><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table>
<thead>
<tr>
<th>按键</th>
<th>行为</th>
<th>按键</th>
<th>行为</th>
</tr>
</thead>
<tbody><tr>
<td><code>command + shift + 3</code></td>
<td>系统截屏，并保存到桌面</td>
<td><code>command + control + a</code></td>
<td>微信截屏（需要设置）</td>
</tr>
<tr>
<td><code>command + fn + F3</code></td>
<td>显示桌面</td>
<td><code>command + tab</code></td>
<td>快速切换应用</td>
</tr>
<tr>
<td><code>command + tab + alt + enter</code></td>
<td>打开最小化的应用</td>
<td><code>command + M</code></td>
<td>最小化应用</td>
</tr>
<tr>
<td><code>command + left</code></td>
<td>回到开始，Home</td>
<td><code>command + right</code></td>
<td>到最后，End</td>
</tr>
<tr>
<td><code>option + left</code></td>
<td>到上一个单词开头</td>
<td><code>option + right</code></td>
<td>到下一个单词结尾</td>
</tr>
<tr>
<td><code>control + left</code></td>
<td>到上一个桌面</td>
<td><code>control + right</code></td>
<td>到下一个桌面</td>
</tr>
<tr>
<td><code>fn + left</code></td>
<td>跳到文章开头</td>
<td><code>fn + right</code></td>
<td>跳到文章结尾</td>
</tr>
<tr>
<td><code>fn + up</code></td>
<td>到上一页</td>
<td><code>fn + down</code></td>
<td>到下一页</td>
</tr>
<tr>
<td><code>command + s</code></td>
<td>保存文件</td>
<td><code>command + c</code></td>
<td>复制</td>
</tr>
<tr>
<td><code>command + v</code></td>
<td>粘贴</td>
<td><code>command + x</code></td>
<td>剪切</td>
</tr>
<tr>
<td><code>command + space</code></td>
<td>聚焦搜索，全局搜索软件或文件</td>
<td><code>control + command + Q</code></td>
<td>快捷锁屏，和QQ快捷键冲突</td>
</tr>
<tr>
<td><code>control + a</code></td>
<td>转到行首（命令行下）</td>
<td><code>control + e</code></td>
<td>转到行尾（命令行下）</td>
</tr>
<tr>
<td><code>command + Q</code></td>
<td>关闭活动程序</td>
<td><code>command + W</code></td>
<td>关闭活动窗口</td>
</tr>
</tbody></table>
<h2 id="触控板"><a href="#触控板" class="headerlink" title="触控板"></a>触控板</h2><table>
<thead>
<tr>
<th>动作</th>
<th>行为</th>
<th>动作</th>
<th>行为</th>
</tr>
</thead>
<tbody><tr>
<td><code>双指左右滑动</code></td>
<td>切换页面</td>
<td><code>双指从右边缘向左滑动</code></td>
<td>唤出通知中心</td>
</tr>
<tr>
<td><code>三只下划</code></td>
<td>聚焦当前应用</td>
<td><code>三指上划</code></td>
<td>平铺打开的应用</td>
</tr>
<tr>
<td><code>四指内合</code></td>
<td>调出启动台</td>
<td><code>四指张开</code></td>
<td>显示桌面（在非全屏状态下）</td>
</tr>
<tr>
<td><code>三指左右滑动</code></td>
<td>切换页面</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="Brew命令"><a href="#Brew命令" class="headerlink" title="Brew命令"></a>Brew命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>brew ls</code></td>
<td>查看本地安装的软件</td>
</tr>
<tr>
<td><code>brew search</code></td>
<td>搜索软件</td>
</tr>
<tr>
<td><code>brew -v</code></td>
<td>查看brew的版本</td>
</tr>
<tr>
<td><code>brew update</code></td>
<td>升级brew</td>
</tr>
<tr>
<td><code>brew install 软件名</code></td>
<td>安装软件</td>
</tr>
<tr>
<td><code>brew remove 软件名</code></td>
<td>卸载软件</td>
</tr>
</tbody></table>
<p>brew 彻底卸载软件方法</p>
<ul>
<li><code>brew tap beeftornado/rmtree</code> - 安装rmtree</li>
<li><code>brew rmtree 软件名</code> - 删除软件</li>
<li><code>brew cleanup</code> - 清理缓存</li>
</ul>
<h2 id="必备软件"><a href="#必备软件" class="headerlink" title="必备软件"></a>必备软件</h2><h3 id="scroll-reverser"><a href="#scroll-reverser" class="headerlink" title="scroll reverser"></a>scroll reverser</h3><p>解决鼠标滑动方向是反着的问题，下载地址：<a href="https://pilotmoon.com/scrollreverser/">scroll reverser官网</a></p>
<h3 id="Trojan-X"><a href="#Trojan-X" class="headerlink" title="Trojan X"></a>Trojan X</h3><p>Mac 下科学上网软件，好用方便，下载地址：<a href="https://github.com/JimLee1996/TrojanX/releases">JimLee1996的github</a></p>
<h3 id="sequel-pro"><a href="#sequel-pro" class="headerlink" title="sequel pro"></a>sequel pro</h3><p>Mac 下免费的MySQL数据库图形化软件，下载地址：<a href="http://www.sequelpro.com/">sequel pro 官网</a></p>
<h2 id="软件技巧"><a href="#软件技巧" class="headerlink" title="软件技巧"></a>软件技巧</h2><h3 id="添加快捷键输出当前时间"><a href="#添加快捷键输出当前时间" class="headerlink" title="添加快捷键输出当前时间"></a>添加快捷键输出当前时间</h3><ol>
<li>自动操作 -&gt; 新建文稿 -&gt; 快速操作 -&gt; 实用工具 -&gt; 允许shell脚本 -&gt; 选择（没有输入、位于任何应用程序、用输出内容替换所选文本）</li>
<li>脚本内容填写 <code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code></li>
<li>保存 -&gt; 设置快捷键</li>
</ol>
<h3 id="最小化软件和恢复最小化软件"><a href="#最小化软件和恢复最小化软件" class="headerlink" title="最小化软件和恢复最小化软件"></a>最小化软件和恢复最小化软件</h3><p><code>command m</code> - 最小化当前窗口</p>
<p><code>command option m</code> - 最小化当前软件所有窗口</p>
<p><code>command Tab</code> 选中软件后松开 <code>Tab</code> 按键，再按 <code>option</code> 按键，松开 <code>command</code> 按键即可恢复最小化软件</p>
<p><code>command Tab</code> 选中软件后松开 <code>Tab</code> 按键，再按 <code>option</code> 按键后再按 <code>enter</code> 按键即可恢复最小化软件</p>
<h2 id="使用问题"><a href="#使用问题" class="headerlink" title="使用问题"></a>使用问题</h2><h3 id="鼠标滚轮方向反着"><a href="#鼠标滚轮方向反着" class="headerlink" title="鼠标滚轮方向反着"></a>鼠标滚轮方向反着</h3><p>将<code>系统偏好设置&gt;鼠标&gt;滚动方向</code>前面的勾去掉即可，该操作会影响触控板的划动方向，替代方式可以使用scroll reverser软件</p>
<h3 id="Finder进入根目录"><a href="#Finder进入根目录" class="headerlink" title="Finder进入根目录"></a>Finder进入根目录</h3><p>进入<code>访达&gt;偏好设置&gt;边栏</code>中，将硬盘前面选择为勾即可</p>
<h3 id="安装HomeBrew"><a href="#安装HomeBrew" class="headerlink" title="安装HomeBrew"></a>安装HomeBrew</h3><p>本命令中使用到的镜像源全部为国内的镜像源</p>
<p>命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>参考文档：<a href="https://www.zhihu.com/question/35928898?sort=created">mac安装homebrew失败怎么办？</a></p>
<h3 id="关闭浏览器快速前进和后退"><a href="#关闭浏览器快速前进和后退" class="headerlink" title="关闭浏览器快速前进和后退"></a>关闭浏览器快速前进和后退</h3><p>Edge：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.microsoft.edgemac AppleEnableSwipeNavigateWithScrolls -bool <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>Chrome</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="安装mysqlclient遇到lssl等错误"><a href="#安装mysqlclient遇到lssl等错误" class="headerlink" title="安装mysqlclient遇到lssl等错误"></a>安装mysqlclient遇到lssl等错误</h3><p><code>env LDFLAGS=&quot;-I/usr/local/opt/openssl/include -L/usr/local/opt/openssl/lib&quot; pip --no-cache install mysqlclient==1.4.6 -i https://mirrors.aliyun.com/pypi/simple</code></p>
<p>参考自：<a href="https://www.jianshu.com/p/de943de33896">Macos安装报错 ld: library not found for -lssl</a></p>
<h3 id="mac下网络冲突的问题"><a href="#mac下网络冲突的问题" class="headerlink" title="mac下网络冲突的问题"></a>mac下网络冲突的问题</h3><p>在配置文件中添加:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;default-address-pools&quot;:</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;base&quot;:</span> <span class="string">&quot;172.31.0.0/16&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;size&quot;:</span> <span class="number">24</span></span><br><span class="line">  &#125;</span><br><span class="line">]<span class="string">,</span></span><br></pre></td></tr></table></figure>

<h3 id="禁止-DS-Store文件生成"><a href="#禁止-DS-Store文件生成" class="headerlink" title="禁止.DS_Store文件生成"></a>禁止.DS_Store文件生成</h3><p>禁止生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE</span><br></pre></td></tr></table></figure>

<p>恢复生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults delete com.apple.desktopservices DSDontWriteNetworkStores</span><br></pre></td></tr></table></figure>

<h3 id="隐藏和显示以点开头的文件"><a href="#隐藏和显示以点开头的文件" class="headerlink" title="隐藏和显示以点开头的文件"></a>隐藏和显示以点开头的文件</h3><p>隐藏</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.Finder AppleShowAllFiles YES</span><br><span class="line">killall Finder</span><br></pre></td></tr></table></figure>

<p>显示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.Finder AppleShowAllFiles NO</span><br><span class="line">killall Finder</span><br></pre></td></tr></table></figure>

<h3 id="xcode命令报错"><a href="#xcode命令报错" class="headerlink" title="xcode命令报错"></a>xcode命令报错</h3><p>现象：报错<code>gyp: No Xcode or CLT version detected!</code></p>
<p>解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf $(xcode-select -print-path)</span><br><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>

<p>在执行<code>xcode-select --install</code>时，可能会报错：不能安装该软件，因为当前无法从软件更新服务器获得。</p>
<p>解决：在<a href="https://developer.apple.com/download/more/">apple develop</a>搜索 command line tools下载安装即可</p>
<h3 id="mac不支持小于4位的密码"><a href="#mac不支持小于4位的密码" class="headerlink" title="mac不支持小于4位的密码"></a>mac不支持小于4位的密码</h3><p><code>pwpolicy -clearaccountpolicies</code> - 关闭密码安全检查</p>
<p><code>passwd</code> - 命令行修改密码</p>
<h3 id="长按组合键不能持续输入"><a href="#长按组合键不能持续输入" class="headerlink" title="长按组合键不能持续输入"></a>长按组合键不能持续输入</h3><p>使用一下命令后然后重启即可</p>
<p><code>defaults write NSGlobalDomain ApplePressAndHoldEnabled -boolean false</code></p>
<p><code>defaults write -g ApplePressAndHoldEnabled -bool false</code></p>
<h3 id="ssl-证书问题"><a href="#ssl-证书问题" class="headerlink" title="ssl 证书问题"></a>ssl 证书问题</h3><p>开发过程中突然遇到如下问题：</p>
<p><code>certificate verify failed: unable to get local issuer certificate (_ssl.c:1091)&#39;)]</code></p>
<p>解决办法：</p>
<ul>
<li>finder 中搜索 <code>Install Certificates.command</code></li>
<li>用终端运行，安装完成即可</li>
</ul>
<h2 id="terminal命令"><a href="#terminal命令" class="headerlink" title="terminal命令"></a>terminal命令</h2><p><code>traceroute 192.168.1.1</code> - 查看网络请求的具体访问过的地址</p>
<p><code>lsof -i tcp:3306</code> - 查看端口占用</p>
<p><code>open -n /Applications/WeChat.app/Contents/MacOS/WeChat</code> - 实现双开微信</p>
<p><code>brew cask install qlcolorcode</code> - quicklook支持预览代码</p>
<p><code>brew cask install qlmarkdown</code> - quicklook支持预览markdown</p>
<h2 id="右键添加-vscode-打开文件夹或文件"><a href="#右键添加-vscode-打开文件夹或文件" class="headerlink" title="右键添加 vscode 打开文件夹或文件"></a>右键添加 vscode 打开文件夹或文件</h2><ol>
<li><p>打开 <code>自动操作.app</code></p>
</li>
<li><p><code>command + N</code> 新建文稿，类型选择快速操作</p>
</li>
<li><p>分别选择 <code>实用工具</code> -&gt; <code>运行shell脚本</code> -&gt; <code>工作流程收到当前文件或文件夹 位于 Finder.app</code> -&gt; <code>传递输入作为自变量</code></p>
</li>
<li><p>贴入代码</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    open -a <span class="string">&quot;Visual Studio Code&quot;</span> <span class="string">&quot;<span class="variable">$f</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>command + s</code> 保存为 <code>用 VSCode 打开</code></p>
</li>
</ol>
<p>编辑该脚本:</p>
<p><code>文件</code> - <code>打开</code> - <code>~/资源库 / Services / 用 VSCode 打开.workflow</code></p>
]]></content>
      <categories>
        <category>日常软件</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>MD5 信息摘要算法</title>
    <url>/2024/md5/</url>
    <content><![CDATA[<h2 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h2><ul>
<li>发布时间：1992-04</li>
<li>原文链接：<a href="https://datatracker.ietf.org/doc/html/rfc1321#autoid-4">The MD5 Message-Digest Algorithm</a></li>
<li>翻译日期：2024-05-15</li>
<li>翻译作者：<a href="mailto:stolenzc@88.com">联系或纠错</a></li>
</ul>
<h2 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1. 摘要"></a>1. 摘要</h2><p>本文描述了 MD5 信息摘要算法。该算法将任意长度的信息作为输入，并产生一个 128 位的“指纹”或“信息摘要”作为输出。产生两个具有相同信息摘要的信息，或者产生任何具有给定预先指定的目标信息摘要的信息，被认为是计算上不可行的。MD5 算法旨在用于数字签名应用程序，其中必须在使用诸如 RSA 的公钥密码系统加密之前以安全的方式“压缩”大文件。</p>
<p>MD5 算法的设计在 32 位的机器上运行非常快。此外，MD5 算法不依赖于任何映射表，算法可以编码得非常紧凑。</p>
<p>MD5 算法是 MD4 信息摘要算法的扩展。MD5 稍微比 MD4 慢一点，但是在设计上更“保守”，MD5 被设计的原因是因为人们认为 MD4 的使用速度可能比现有的严格审查所证明的要快；由于 MD4 被设计得特别快，就成功进行密码分析攻击的风险而言，它处于 “边缘”。MD5 后退了一点，放弃了一点速度，最终以获得更大的安全性。它包含了不同审阅者提出的一些建议，并包含其他优化。 MD5 算法正在被置于公共领域以供审查并可能被采用为标准。</p>
<p>对于基于 OSI 的应用程序，MD5 的对象标识符是 <code>md5 OBJECT IDENTIFIER ::= iso(1) member-body(2) US(840) rsadsi(113549) digestAlgorithm(2) 5</code>。在 X.509 类型 AlgorithmIdentifier 中，MD5 的参数应该具有类型 NULL。</p>
<h2 id="2-符号和专业用语"><a href="#2-符号和专业用语" class="headerlink" title="2. 符号和专业用语"></a>2. 符号和专业用语</h2><p>本文档中，“word”是 32 位的量，“byte”是 8 位的量。位序列可以按照自然方式解释为字节序列，其中每个连续的 8 位组被解释为一个字节，其中每个字节的高位（最高有效位）被列为第一个。类似地，字节序列可以按照自然方式解释为 32 位字序列，其中每个连续的 4 个字节被解释为一个字，其中每个字的低位（最低有效位）被列为第一个。</p>
<p><code>x_i</code> 表示 <code>x sub i</code>。如果下标是一个表达式，我们用大括号括起来，如 <code>x_&#123;i+1&#125;</code>。类似地，我们使用 <code>^</code> 表示上标（指数），因此 <code>x^i</code> 表示 x 的 i 次幂。</p>
<p>我们用 <code>+</code> 来表示字的加法（即，模 2^32 加法）。让 X &lt;&lt;&lt; s 表示通过将 X 循环左移 s 位获得的 32 位值。让 <code>not(X)</code> 表示 X 的位补码，让 <code>X v Y</code> 表示 X 和 Y 的位或。让 <code>X xor Y</code> 表示 X 和 Y 的位异或，让 <code>XY</code> 表示 X 和 Y 的位与。</p>
<h2 id="3-MD5-算法描述"><a href="#3-MD5-算法描述" class="headerlink" title="3. MD5 算法描述"></a>3. MD5 算法描述</h2><p>我们首先假设我们有一个 b 位的信息作为输入，并且我们希望找到它的信息摘要。这里 b 是任意的非负整数；b 可以是零，它不需要是 8 的倍数，它可以是任意大的。我们将信息的位写成如下形式：<code>m_0 m_1 ... m_&#123;b-1&#125;</code> 。接下来执行以下五个步骤来计算信息的信息摘要。</p>
<h3 id="3-1-第一步。追加填充位"><a href="#3-1-第一步。追加填充位" class="headerlink" title="3.1 第一步。追加填充位"></a>3.1 第一步。追加填充位</h3><p>将信息“填充”（扩展），使其长度（以位为单位）对 512 取模为 448。也就是说，将信息扩展，使其只比 512 的倍数位长多 64 位。填充总是执行的，即使信息的长度对 512 取模为 448。</p>
<p>填充按照一下方式进行，首先在信息后面追加一个单独的“1”，然后追加“0”，使得填充后的信息的长度对 512 取模为 448。总之，至少追加一个位，最多追加 512 位。</p>
<h3 id="3-2-第二步。追加长度"><a href="#3-2-第二步。追加长度" class="headerlink" title="3.2 第二步。追加长度"></a>3.2 第二步。追加长度</h3><p>用 64 个比特位（位的长度）的 b 的 64 位表示（在填充之前）追加到上一步的结果中。如果 b 大于 2^64，则只使用 b 的低 64 位。 （这些位按照前面的约定作为两个 32 位字追加，低位字先追加。）</p>
<p>此时，结果信息（在填充位和 b 之后）的长度是 512 的倍数。等价地，该消息的长度是 16（32 位）word 的倍数。让 M[0 … N-1] 表示结果消息的word，其中 N 是 16 的倍数。</p>
<h3 id="3-3-第三步。初始化-MD-缓冲区"><a href="#3-3-第三步。初始化-MD-缓冲区" class="headerlink" title="3.3 第三步。初始化 MD 缓冲区"></a>3.3 第三步。初始化 MD 缓冲区</h3><p>一个四字缓冲区（A、B、C、D）用于计算信息摘要。这里的每个 A、B、C、D 都是一个 32 位的寄存器。这些寄存器的初始化值如下（以十六进制表示，低位字先）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">word A: 01 23 45 67</span><br><span class="line">word B: 89 ab cd ef</span><br><span class="line">word C: fe dc ba 98</span><br><span class="line">word D: 76 54 32 10</span><br></pre></td></tr></table></figure>

<h3 id="3-4-第四步。以-16-个字为单位处理消息"><a href="#3-4-第四步。以-16-个字为单位处理消息" class="headerlink" title="3.4 第四步。以 16 个字为单位处理消息"></a>3.4 第四步。以 16 个字为单位处理消息</h3><p>我们首先定义四个辅助函数，每个函数都以三个 32 位字作为输入，并产生一个 32 位字作为输出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F(X,Y,Z) = XY v not(X) Z</span><br><span class="line">G(X,Y,Z) = XZ v Y not(Z)</span><br><span class="line">H(X,Y,Z) = X xor Y xor Z</span><br><span class="line">I(X,Y,Z) = Y xor (X v not(Z))</span><br></pre></td></tr></table></figure>

<p>在每个比特位上，F 的作用类似于条件：如果 X 则 Y 否则 Z。函数 F 可以使用 + 来定义，而不是 v，因为 XY 和 not(X)Z 永远不会在同一比特位上有 1。有趣的是，如果 X、Y 和 Z 的比特位是独立且随机的，则 F(X,Y,Z) 的每个比特位都是独立且随机的。</p>
<p>函数 G、H 和 I 与函数 F 类似，因为它们以“位并行”的方式从 X、Y 和 Z 的位中产生它们的输出，这样，如果 X、Y 和 Z 的相应位是独立且随机的，则 G(X,Y,Z)、H(X,Y,Z) 和 I(X,Y,Z) 的每个比特位都是独立且随机的。注意，函数 H 是其输入的位异或或“奇偶校验”函数。</p>
<p>这个步骤使用一个从正弦函数构造的 64 元素表 T[1 … 64]。让 T[i] 表示表的第 i 个元素，它等于 4294967296 的整数部分乘以 abs(sin(i))，其中 i 是以弧度表示的。表的元素在附录中给出（译者注：原文并未在附录中给出，本文按照原文的示例代码整理出该序列）。</p>
<p>像下面这样做</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 处理每个512 比特块 */</span><br><span class="line">For i = 0 to N/16 - 1 do</span><br><span class="line">    /* 复制块 i 到 X */</span><br><span class="line">    For j = 0 to 15 do</span><br><span class="line">        Set X[j] to M[i*16+j].</span><br><span class="line">    end</span><br><span class="line">    /* 保存 A 为 AA，B 为 BB，C 为 CC，D 为 DD */</span><br><span class="line">    AA = A</span><br><span class="line">    BB = B</span><br><span class="line">    CC = C</span><br><span class="line">    DD = D</span><br><span class="line"></span><br><span class="line">    /* 第一轮 */</span><br><span class="line">    /* 让 [abcd k s i] 表示操作 a = b + ((a + F(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s)。*/</span><br><span class="line">    /* 执行以下 16 个操作。*/</span><br><span class="line">    [ABCD  0  7  1]  [DABC  1 12  2]  [CDAB  2 17  3]  [BCDA  3 22  4]</span><br><span class="line">    [ABCD  4  7  5]  [DABC  5 12  6]  [CDAB  6 17  7]  [BCDA  7 22  8]</span><br><span class="line">    [ABCD  8  7  9]  [DABC  9 12 10]  [CDAB 10 17 11]  [BCDA 11 22 12]</span><br><span class="line">    [ABCD 12  7 13]  [DABC 13 12 14]  [CDAB 14 17 15]  [BCDA 15 22 16]</span><br><span class="line"></span><br><span class="line">    /* 第二轮 */</span><br><span class="line">    /* 让 [abcd k s i] 表示操作 a = b + ((a + G(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s)。*/</span><br><span class="line">    /* 执行以下 16 个操作。*/</span><br><span class="line">    [ABCD  1  5 17]  [DABC  6  9 18]  [CDAB 11 14 19]  [BCDA  0 20 20]</span><br><span class="line">    [ABCD  5  5 21]  [DABC 10  9 22]  [CDAB 15 14 23]  [BCDA  4 20 24]</span><br><span class="line">    [ABCD  9  5 25]  [DABC 14  9 26]  [CDAB  3 14 27]  [BCDA  8 20 28]</span><br><span class="line">    [ABCD 13  5 29]  [DABC  2  9 30]  [CDAB  7 14 31]  [BCDA 12 20 32]</span><br><span class="line"></span><br><span class="line">    /* 第三轮 */</span><br><span class="line">    /* 让 [abcd k s t] （译者注：经过验证，这儿应该为 [abcd k s i]）表示操作 a = b + ((a + H(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s)。*/</span><br><span class="line">    /* 执行以下 16 个操作。*/</span><br><span class="line">    [ABCD  5  4 33]  [DABC  8 11 34]  [CDAB 11 16 35]  [BCDA 14 23 36]</span><br><span class="line">    [ABCD  1  4 37]  [DABC  4 11 38]  [CDAB  7 16 39]  [BCDA 10 23 40]</span><br><span class="line">    [ABCD 13  4 41]  [DABC  0 11 42]  [CDAB  3 16 43]  [BCDA  6 23 44]</span><br><span class="line">    [ABCD  9  4 45]  [DABC 12 11 46]  [CDAB 15 16 47]  [BCDA  2 23 48]</span><br><span class="line"></span><br><span class="line">    /* 第四轮 */</span><br><span class="line">    /* 让 [abcd k s t] （译者注：经过验证，这儿应该为 [abcd k s i]）表示操作 a = b + ((a + I(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s)。*/</span><br><span class="line">    /* 执行以下 16 个操作。*/</span><br><span class="line">    [ABCD  0  6 49]  [DABC  7 10 50]  [CDAB 14 15 51]  [BCDA  5 21 52]</span><br><span class="line">    [ABCD 12  6 53]  [DABC  3 10 54]  [CDAB 10 15 55]  [BCDA  1 21 56]</span><br><span class="line">    [ABCD  8  6 57]  [DABC 15 10 58]  [CDAB  6 15 59]  [BCDA 13 21 60]</span><br><span class="line">    [ABCD  4  6 61]  [DABC 11 10 62]  [CDAB  2 15 63]  [BCDA  9 21 64]</span><br><span class="line"></span><br><span class="line">    /* 然后执行以下操作。（将每个值与进行本次循环保存的值相加）*/</span><br><span class="line">    A = A + AA</span><br><span class="line">    B = B + BB</span><br><span class="line">    C = C + CC</span><br><span class="line">    D = D + DD</span><br></pre></td></tr></table></figure>

<h3 id="3-5-第五步。输出"><a href="#3-5-第五步。输出" class="headerlink" title="3.5 第五步。输出"></a>3.5 第五步。输出</h3><p>产生的消息摘要作为输出是 A、B、C、D。也就是说，我们从 A 的低位字开始，以 D 的高位字结束。</p>
<p>这就完成了 MD5 的描述。C 语言的参考实现在附录中给出（译者注：本文不含 c 语言实现的附录）。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>MD5 信息摘要算法的实现是比较简单的，为任意长度的信息提供了一个“指纹”或“信息摘要”。据推测，得出具有相同消息摘要的两条消息的难度约为 2^64 次操作，而得出具有给定消息摘要的任何消息的难度约为 2^128 次操作。MD5 算法已经过仔细检查以找出弱点。 然而，它是一种相对较新的算法，进一步的安全分析当然是合理的，就像任何此类新提案的情况一样。</p>
<h2 id="5-MD4-与-MD5-的不同点"><a href="#5-MD4-与-MD5-的不同点" class="headerlink" title="5. MD4 与 MD5 的不同点"></a>5. MD4 与 MD5 的不同点</h2><p>这儿列举了一些 MD4 与 MD5 的不同点：</p>
<ol>
<li>添加了第四轮的计算</li>
<li>每一轮都有一个唯一的加法常数</li>
<li>第二轮的函数 g 从 (XY v XZ v YZ) 改为 (XZ v Y not(Z))，使得 g 不那么对称</li>
<li>每一轮都添加了上一轮的结果，这促进了更快的“雪崩效应”</li>
<li>在第二轮和第三轮中访问输入字的顺序已经改变，使得这些模式不那么相似</li>
<li>每一轮的移位量已经近似优化，以产生更快的“雪崩效应”。不同轮次的移位是不同的。</li>
</ol>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li>[1] Rivest, R., “The MD4 Message Digest Algorithm”, RFC 1320, MIT and RSA Data Security, Inc., April 1992.</li>
<li>[2] Rivest, R., “The MD4 message digest algorithm”, in A.J.  Menezes and S.A. Vanstone, editors, Advances in Cryptology - CRYPTO ‘90 Proceedings, pages 303-311, Springer-Verlag, 1991.</li>
<li>[3] CCITT Recommendation X.509 (1988), “The Directory - Authentication Framework.”</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="1-T-的值"><a href="#1-T-的值" class="headerlink" title="1. T 的值"></a>1. T 的值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">T[1 ... 64] = [</span><br><span class="line">    0xd76aa478</span><br><span class="line">    0xe8c7b756</span><br><span class="line">    0x242070db</span><br><span class="line">    0xc1bdceee</span><br><span class="line">    0xf57c0faf</span><br><span class="line">    0x4787c62a</span><br><span class="line">    0xa8304613</span><br><span class="line">    0xfd469501</span><br><span class="line">    0x698098d8</span><br><span class="line">    0x8b44f7af</span><br><span class="line">    0xffff5bb1</span><br><span class="line">    0x895cd7be</span><br><span class="line">    0x6b901122</span><br><span class="line">    0xfd987193</span><br><span class="line">    0xa679438e</span><br><span class="line">    0x49b40821</span><br><span class="line">    0xf61e2562</span><br><span class="line">    0xc040b340</span><br><span class="line">    0x265e5a51</span><br><span class="line">    0xe9b6c7aa</span><br><span class="line">    0xd62f105d</span><br><span class="line">    0x02441453</span><br><span class="line">    0xd8a1e681</span><br><span class="line">    0xe7d3fbc8</span><br><span class="line">    0x21e1cde6</span><br><span class="line">    0xc33707d6</span><br><span class="line">    0xf4d50d87</span><br><span class="line">    0x455a14ed</span><br><span class="line">    0xa9e3e905</span><br><span class="line">    0xfcefa3f8</span><br><span class="line">    0x676f02d9</span><br><span class="line">    0x8d2a4c8a</span><br><span class="line">    0xfffa3942</span><br><span class="line">    0x8771f681</span><br><span class="line">    0x6d9d6122</span><br><span class="line">    0xfde5380c</span><br><span class="line">    0xa4beea44</span><br><span class="line">    0x4bdecfa9</span><br><span class="line">    0xf6bb4b60</span><br><span class="line">    0xbebfbc70</span><br><span class="line">    0x289b7ec6</span><br><span class="line">    0xeaa127fa</span><br><span class="line">    0xd4ef3085</span><br><span class="line">    0x04881d05</span><br><span class="line">    0xd9d4d039</span><br><span class="line">    0xe6db99e5</span><br><span class="line">    0x1fa27cf8</span><br><span class="line">    0xc4ac5665</span><br><span class="line">    0xf4292244</span><br><span class="line">    0x432aff97</span><br><span class="line">    0xab9423a7</span><br><span class="line">    0xfc93a039</span><br><span class="line">    0x655b59c3</span><br><span class="line">    0x8f0ccc92</span><br><span class="line">    0xffeff47d</span><br><span class="line">    0x85845dd1</span><br><span class="line">    0x6fa87e4f</span><br><span class="line">    0xfe2ce6e0</span><br><span class="line">    0xa3014314</span><br><span class="line">    0x4e0811a1</span><br><span class="line">    0xf7537e82</span><br><span class="line">    0xbd3af235</span><br><span class="line">    0x2ad7d2bb</span><br><span class="line">    0xeb86d391</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="2-MD5-的-Python-实现"><a href="#2-MD5-的-Python-实现" class="headerlink" title="2. MD5 的 Python 实现"></a>2. MD5 的 Python 实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常量定义</span></span><br><span class="line">T = [<span class="built_in">int</span>(<span class="number">4294967296</span> * <span class="built_in">abs</span>(math.sin(i + <span class="number">1</span>))) &amp; <span class="number">0xFFFFFFFF</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line">s = [<span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>] * <span class="number">4</span> + [<span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>] * <span class="number">4</span> + [<span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>] * <span class="number">4</span> + [<span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>] * <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 左循环移位</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left_rotate</span>(<span class="params">x, amount</span>):</span><br><span class="line">    x &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> ((x &lt;&lt; amount) | (x &gt;&gt; (<span class="number">32</span> - amount))) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># MD5初始化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">message</span>):</span><br><span class="line">    message = <span class="built_in">bytearray</span>(message)  <span class="comment"># 将消息转换为字节数组</span></span><br><span class="line">    orig_len_in_bits = (<span class="number">8</span> * <span class="built_in">len</span>(message)) &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">    message.append(<span class="number">0x80</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(message) % <span class="number">64</span> != <span class="number">56</span>:</span><br><span class="line">        message.append(<span class="number">0</span>)</span><br><span class="line">    message += orig_len_in_bits.to_bytes(<span class="number">8</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化变量</span></span><br><span class="line">    h0, h1, h2, h3 = <span class="number">0x67452301</span>, <span class="number">0xEFCDAB89</span>, <span class="number">0x98BADCFE</span>, <span class="number">0x10325476</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分块处理</span></span><br><span class="line">    <span class="keyword">for</span> chunk_ofst <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(message), <span class="number">64</span>):</span><br><span class="line">        a, b, c, d = h0, h1, h2, h3</span><br><span class="line">        chunk = message[chunk_ofst : chunk_ofst + <span class="number">64</span>]</span><br><span class="line">        M = [<span class="built_in">int</span>.from_bytes(chunk[i : i + <span class="number">4</span>], byteorder=<span class="string">&#x27;little&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">64</span>, <span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= i &lt;= <span class="number">15</span>:</span><br><span class="line">                f = (b &amp; c) | (~b &amp; d)</span><br><span class="line">                g = i</span><br><span class="line">            <span class="keyword">elif</span> <span class="number">16</span> &lt;= i &lt;= <span class="number">31</span>:</span><br><span class="line">                f = (d &amp; b) | (~d &amp; c)</span><br><span class="line">                g = (<span class="number">5</span> * i + <span class="number">1</span>) % <span class="number">16</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="number">32</span> &lt;= i &lt;= <span class="number">47</span>:</span><br><span class="line">                f = b ^ c ^ d</span><br><span class="line">                g = (<span class="number">3</span> * i + <span class="number">5</span>) % <span class="number">16</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="number">48</span> &lt;= i &lt;= <span class="number">63</span>:</span><br><span class="line">                f = c ^ (b | ~d)</span><br><span class="line">                g = (<span class="number">7</span> * i) % <span class="number">16</span></span><br><span class="line">            f = (f + a + T[i] + M[g]) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            a, d, c, b = d, c, b, (b + left_rotate(f, s[i])) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">        h0 = (h0 + a) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        h1 = (h1 + b) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        h2 = (h2 + c) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        h3 = (h3 + d) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&#x27;&lt;4I&#x27;</span>, h0, h1, h2, h3).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试MD5函数</span></span><br><span class="line">message = <span class="string">b&quot;123456&quot;</span></span><br><span class="line"><span class="built_in">print</span>(md5(message))  <span class="comment"># 输出: e10adc3949ba59abbe56e057f20f883e</span></span><br></pre></td></tr></table></figure>

<h3 id="3-MD5-的-Go-实现"><a href="#3-MD5-的-Go-实现" class="headerlink" title="3. MD5 的 Go 实现"></a>3. MD5 的 Go 实现</h3><p>参考官方实现方式 <a href="https://github.com/golang/go/blob/master/src/crypto/md5/md5.go">crypto&#x2F;md5</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = [<span class="number">64</span>]<span class="type">int</span>&#123;</span><br><span class="line">	<span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>,</span><br><span class="line">	<span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>,</span><br><span class="line">	<span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>,</span><br><span class="line">	<span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> K = [<span class="number">64</span>]<span class="type">uint32</span>&#123;</span><br><span class="line">	<span class="number">0xd76aa478</span>, <span class="number">0xe8c7b756</span>, <span class="number">0x242070db</span>, <span class="number">0xc1bdceee</span>,</span><br><span class="line">	<span class="number">0xf57c0faf</span>, <span class="number">0x4787c62a</span>, <span class="number">0xa8304613</span>, <span class="number">0xfd469501</span>,</span><br><span class="line">	<span class="number">0x698098d8</span>, <span class="number">0x8b44f7af</span>, <span class="number">0xffff5bb1</span>, <span class="number">0x895cd7be</span>,</span><br><span class="line">	<span class="number">0x6b901122</span>, <span class="number">0xfd987193</span>, <span class="number">0xa679438e</span>, <span class="number">0x49b40821</span>,</span><br><span class="line">	<span class="number">0xf61e2562</span>, <span class="number">0xc040b340</span>, <span class="number">0x265e5a51</span>, <span class="number">0xe9b6c7aa</span>,</span><br><span class="line">	<span class="number">0xd62f105d</span>, <span class="number">0x02441453</span>, <span class="number">0xd8a1e681</span>, <span class="number">0xe7d3fbc8</span>,</span><br><span class="line">	<span class="number">0x21e1cde6</span>, <span class="number">0xc33707d6</span>, <span class="number">0xf4d50d87</span>, <span class="number">0x455a14ed</span>,</span><br><span class="line">	<span class="number">0xa9e3e905</span>, <span class="number">0xfcefa3f8</span>, <span class="number">0x676f02d9</span>, <span class="number">0x8d2a4c8a</span>,</span><br><span class="line">	<span class="number">0xfffa3942</span>, <span class="number">0x8771f681</span>, <span class="number">0x6d9d6122</span>, <span class="number">0xfde5380c</span>,</span><br><span class="line">	<span class="number">0xa4beea44</span>, <span class="number">0x4bdecfa9</span>, <span class="number">0xf6bb4b60</span>, <span class="number">0xbebfbc70</span>,</span><br><span class="line">	<span class="number">0x289b7ec6</span>, <span class="number">0xeaa127fa</span>, <span class="number">0xd4ef3085</span>, <span class="number">0x04881d05</span>,</span><br><span class="line">	<span class="number">0xd9d4d039</span>, <span class="number">0xe6db99e5</span>, <span class="number">0x1fa27cf8</span>, <span class="number">0xc4ac5665</span>,</span><br><span class="line">	<span class="number">0xf4292244</span>, <span class="number">0x432aff97</span>, <span class="number">0xab9423a7</span>, <span class="number">0xfc93a039</span>,</span><br><span class="line">	<span class="number">0x655b59c3</span>, <span class="number">0x8f0ccc92</span>, <span class="number">0xffeff47d</span>, <span class="number">0x85845dd1</span>,</span><br><span class="line">	<span class="number">0x6fa87e4f</span>, <span class="number">0xfe2ce6e0</span>, <span class="number">0xa3014314</span>, <span class="number">0x4e0811a1</span>,</span><br><span class="line">	<span class="number">0xf7537e82</span>, <span class="number">0xbd3af235</span>, <span class="number">0x2ad7d2bb</span>, <span class="number">0xeb86d391</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">leftRotate</span><span class="params">(x <span class="type">uint32</span>, c <span class="type">int</span>)</span></span> <span class="type">uint32</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> (x &lt;&lt; c) | (x &gt;&gt; (<span class="number">32</span> - c))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">md5</span><span class="params">(message []<span class="type">byte</span>)</span></span> [<span class="number">16</span>]<span class="type">byte</span> &#123;</span><br><span class="line">	origLen := <span class="type">uint64</span>(<span class="built_in">len</span>(message) * <span class="number">8</span>)</span><br><span class="line">	message = <span class="built_in">append</span>(message, <span class="number">0x80</span>)</span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">len</span>(message)%<span class="number">64</span> != <span class="number">56</span> &#123;</span><br><span class="line">		message = <span class="built_in">append</span>(message, <span class="number">0</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	lenBytes := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">8</span>)</span><br><span class="line">	binary.LittleEndian.PutUint64(lenBytes, origLen)</span><br><span class="line">	message = <span class="built_in">append</span>(message, lenBytes...)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> h0, h1, h2, h3 <span class="type">uint32</span> = <span class="number">0x67452301</span>, <span class="number">0xefcdab89</span>, <span class="number">0x98badcfe</span>, <span class="number">0x10325476</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(message); i += <span class="number">64</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> M [<span class="number">16</span>]<span class="type">uint32</span></span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">16</span>; j++ &#123;</span><br><span class="line">			M[j] = binary.LittleEndian.Uint32(message[i+<span class="number">4</span>*j:])</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		a, b, c, d := h0, h1, h2, h3</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">64</span>; i++ &#123;</span><br><span class="line">			<span class="keyword">var</span> f <span class="type">uint32</span></span><br><span class="line">			<span class="keyword">var</span> g <span class="type">int</span></span><br><span class="line">			<span class="keyword">if</span> i &lt; <span class="number">16</span> &#123;</span><br><span class="line">				f = (b &amp; c) | (^b &amp; d)</span><br><span class="line">				g = i</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> i &lt; <span class="number">32</span> &#123;</span><br><span class="line">				f = (d &amp; b) | (^d &amp; c)</span><br><span class="line">				g = (<span class="number">5</span>*i + <span class="number">1</span>) % <span class="number">16</span></span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> i &lt; <span class="number">48</span> &#123;</span><br><span class="line">				f = b ^ c ^ d</span><br><span class="line">				g = (<span class="number">3</span>*i + <span class="number">5</span>) % <span class="number">16</span></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				f = c ^ (b | ^d)</span><br><span class="line">				g = (<span class="number">7</span> * i) % <span class="number">16</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			f = f + a + K[i] + M[g]</span><br><span class="line">			a = d</span><br><span class="line">			d = c</span><br><span class="line">			c = b</span><br><span class="line">			b = b + leftRotate(f, s[i])</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		h0 += a</span><br><span class="line">		h1 += b</span><br><span class="line">		h2 += c</span><br><span class="line">		h3 += d</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> result [<span class="number">16</span>]<span class="type">byte</span></span><br><span class="line">	binary.LittleEndian.PutUint32(result[<span class="number">0</span>:<span class="number">4</span>], h0)</span><br><span class="line">	binary.LittleEndian.PutUint32(result[<span class="number">4</span>:<span class="number">8</span>], h1)</span><br><span class="line">	binary.LittleEndian.PutUint32(result[<span class="number">8</span>:<span class="number">12</span>], h2)</span><br><span class="line">	binary.LittleEndian.PutUint32(result[<span class="number">12</span>:<span class="number">16</span>], h3)</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	message := <span class="string">&quot;123456&quot;</span></span><br><span class="line">	hash := md5([]<span class="type">byte</span>(message))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;MD5(\&quot;%s\&quot;) = %x\n&quot;</span>, message, hash)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>技术原理</tag>
      </tags>
  </entry>
  <entry>
    <title>个人文件2020-11-10</title>
    <url>/2020/myfile_2020-11-10/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="20f68acca89b55d321e75b7541b330d160b8eac3a33b5280371fc70830e44107">5b958215de3474a7467406f9b308a4eaf4ea35495365605b1653aadb1e17cc232032195f61d6e9933164ef055b962e7c954ef10be29ff0e410ce183974775a5e1cd3ff47c08ea841cf9d7be4c95b5cb901029550c293817bb4ad0a2937965930963f1f36be9801a66d8c4c22a84939ca2f5724ee4ab07a7213dfa8c44ef40672ede6e97967f3c199cd6a429043d17ce3c579a0aaeac51094b46f1e63bb581c0785b75b8b141285c8b632cb550263e6352e09d228d47b65393cf109252d414f92946ac9c1a3e7d6180c2798dc5789a3cedfa1df8dc0063a4ae38ad465fe5961aecf79a89cec5b6b21a3f6764a37bfc41e75e147d10b596556d6162cfac5472146d2a3cd94ef3fa6a37781d40e7467a4c6fc69aa1b5e85e3419afa862c66ccdef34d60f11b7a70be29790ba9714247d4d38298535c3c79afe1db32adea59525192bc1248194d5b6969ad1770edfc4bc2efdfb2dac48fdc313dc55dc5b3e38a94d61608d03457e6d716ae29c15881af930b19107baf8b1c5d53ce5fa0bfafb3626461dce4434077f1cd9a439effd82cb798d84b94f190c5e28da3f93c2c89b613e8b67f4241ab132e5969f2770369a9e046cf69eda80a54ab30feaf4a8c220a7bff487a331d750dbd276a2d72c759133cd5f2bbb89384f10375fb593162a388426b5a977f1a649ccf63859889451f4de56b46821913be1db6474c8231476d65c7a2e4dbce72514a75872f6b900f79219d1f6357602459d0fe501db2463db1ff86bd7418699a8bb1ad7682eff3e723928e9a059370c8928b774946d44b716a52dc4f9a7fa026ea7a4ae982da5731f230634554039da20d6455dfa7d1ed98f70bbb62e83b16554d0c873a2a5bb5c0b495ff6dd5062604c96515a06ea4c1d27640054d88021b75fb20bd45757bb03e453260d9fbfd15df99211207e63a8ed44e1e28175ac934004c78928674b4a8c69aebfe143cf6a5cc8b245dd1fadbf1d11a33e79d88ef1e43ce2120375d012ce2993a0449a388b05479647952e95639429cb0578ecbb0b610ef12238a6a6625eee2c19329e867d9a1efe92bd0809b0c2eefba6d95ce47873c8ac44906fab95857497f5e8320f44d3fe3803445fd259a70369acb456452ceed8adc7b78af2ac07919906431df15008767b27c11c22feaf5a620dd9e35b950c0ba7746d9811203fe05d777dc5660079fe3c874141ff79d4a0b72819d1d41ddb0f208fd02e22b66f3ad9c296ef5e0f27e0704a25f2a6deb824e2343bf07788820df307c287e21b90f6513e8168923f782fb4b7e882341630987e291e6e265b21c05950502db3f3efc994b81d2b673eb56d9b78295ec17166b699bd6451e4c8dbb0894bae2c49d8dc95980b06e3875fc8d4ab2cd29bc5fe054eedb61bb1186a5e67a6f9ee9bea5503d58113d66785f47cbc6f1b418d7ff6bac1f66ba7d66d4854353b1c1da8358fe7b8cf4b00f46dfbdae6001f4e66a22bfc34d8ba7469b2bf669b1e3cd6d1baccb1734a23fda812bb1664838724f7123a02e41bacbdf5dcfbdac3bbadca3e5886f1ed4ca3c86df1f2043919bf4a9ada2dddedd62a85266d18afaf3fcfc4ede634b5aaecc2442ec070493f9c65a2be790adae3a80ba1cb27b981243cc4a73165f5562d44e790223b084f98a6f2243856e39e72624d62fdf36f7938433825cbfeffdbf50f06295a5af0479da2cc25a8c0be773f3eba19fb47919d3a940198b16e8526f0c6931dd059c4d833e2c0b9ddf0fea04d57e2afd7832cec3d4c7d8cf1d16134a2a9d9f5b81018ff01135f79e63c61dd84ba50d2c01513253addf1cede1963fcd22790ee0ef2281a5ef3ae48d79547e8f0e28c02c458e203b9153347d3127faa51a8268743f46f3ae3452361fde9c415addeef8f4a8a13483f5309fc792a5f9e344086bd4abcebfc0aece3deba61e590b9f300486b5300a04f9a1d7771c6b963f32e73616642f37e2effe1bddca76e1e7c21bfab2b0c958d61da2e24a87e2d20e9415586f0910bf72ed94a94858cbca78ddf25bc503db9cf92b6e8c7f6ce4eff3eaff77f0cf4de3715b96bd615bafba52a5ed48b1153d574289740dd7ad39de384bbe9c01bc6460ee192c12dd60b4b1e50c23d9ba48db8e0d95ddb3b3316c53ca39342bc60a5d47849e63d1088fc43360f1ff7b80bd37fbae107c3bb9f1ec129325c72ecf0b00dbee709ce260bab87cd221f6b00073230f9554c764a86088b33c8bf39e6b2cd02985cfec91bd92dd2ecee607d73ab200b7fd7d71d6b0161ec5bde7572da47b02d3e79ae31a58eccd100d689c038798c1b5baa0e38f96eb8f4be85b45917aa5d00a752ed7c0628c95f480cd61254e11e42adc0704609d5f1fd3600dddd9058997a6448326811efdb077c86a7a29f97330770dadc167e44e2509dd73fc3a1c4d9e9591c9175e5c6fe7dea06f269af0ca9e29467de95c5ca6a75d89962dcdc25a50bb1eb43164a64d2e9a875e97a5f147377d4c1b7370f461c24dc360451ab707b4bf642b21e954a0240a2f19f19e21facba2440f98e087e5dc25f145edebb738c985c02d15a1957317fee6caa324e3015a8929ef26aff02dc390313b586e441488b9341a6475e680e300f75f3c150e009cadcb3973e67be15829403c820701271a1061220518a6bd67a2e2ebf9f7d16ee90c7cbe9dd0ed85e67c500324e3d55f9248d2a86caf201be14cf7f9ffb692069f698a6fd51d4d4da47dc65dff48f4953f892a99b659c383fa1d10ce72081fc4f3dc3d87ea93fe2caf74389c0f435e8d225602215ebf2b889a4a2938ede75642469c849757de4b7f0150fb32ff22b7acf202695e65ab69fffca25822804430368b0f6a178a916d5f6f736d9e2075ff2f300c9656b6e4f9c9c2bf791eb9e568af45c5e5db772cd686611b693dfbcaed757b14813e7f850cbbb76a3f383b11714e6b32b2cb709b83a7bf3d6cbfe5ecc5a77a9a6d7e2f328a1db8c56dd611e0f8e04dc163763d1fe7e3399627d653c5e835a7a99ac887393935aabcd53438322d7c3044588225c6c3383b333495752c98991999f754a62babef17ca864158072f707a283abd42c6934126f311596ebf154eb44af632b93507234bcb7a4453dbb9c259c5f7a9b3db19a810d03744cce141378276db49f8b752a7d416d47dc786be1b1066c84249241edf92aa251dcc190e492e23621cce591c87e17f0bc601e8613eed30ac451e41f24c5b437117172ef04ddd4576fe2eacf25ee1425e75965d38d1224249ede0ec58a0d364dc1ce6040ebfe2c0a94b6ab4d46210e8a9986a39e2f0a2d5e4c62ee3c830a478c42b9d8e2f0b4d5410f7bfcfa136221abf4bd502b2dcda788cb77c005443c6109b5182cfc33ecf3631de9fbeb20f4a0f40cba1f6fd470200426c900211f4bd727890d747e2f2690053ce5fd3bd79a3f7d11cb628fd6f1e9c624d75defaada6a648e4d37a1f9a0ace4998cc5bab65aaaa42de928ea490536815c256d6765f488c97f018d29d251070807e5b4b38e71d36e5d36ec67889832210280256aca23af8bd5e4205d2db98d9be2787d7ded0ba4ef5d85d78711337b2f64818ff8b3cb8ee1221ce830cf36c963ee334bccd0708a66782039a893de38a843e51da61ced20d12e3b58bd6afabd9363ca7571099fcd1700cd1c02c43bb6057249a513f2eac59010680c7548d8f4f34499f74fd79c2b178824d4a8e25227303230e101b3be07fb25b27defab04a4956667d2118167a14d9d184e2094b1b10e4d4a075b24ab75590456b9fddc54463368688664d384bdb64a3b68717a9a784ee628d7db48f0e3779f1226d5cdbd9ea67902b7ec52563915161cfbe9a4ed4b14b54d92983aa1e42b274e81a4926cecfe2038e40786409eaac1a180664cdb481141f1423ef3d9a9b668105ee2614af55981ad7b501d34aa1bf4238166bae9ace3b562cfef1beaeda47109e0752dbe7932152fee33879ea47ad7d1da5171e0954a2676f8ad7d50215fe32f3ede7be90d08341464b49079d53bced83163ef0992dd8b071939f00bf15f8ff70bb000a4580025d3037ae43a9011e489452b0d74dffd2bdc3a112be039e0c86280e012ef8366a30fc7f74fbbf5828cf147e1636f1f76086a0c4ab1f903ce9e5af7f612f000e2020493eb0dc7ba4007fbaa04d4fe85fbf5932d102640e37b7fc7cf91159a9172911214281d27121e45a473b0468d6ce6549bebc43e98b075cdb764b2be857919e9bfb4e47dbce882d511b72a8b927e41bdd3c05878a7919358efdf4ee8c6eebfb15d06b2cb5534f03a60c1b53272f749a76c37e57975eb54a7aed14f5c7550e8750d4f6331f413aa163c60627f15e52dd63a003adcb4e92925cd3c745a9f6fd1cbb8d7985f892770c869ae751b77a1ba4eb4fc0391c7a78d0f32b3f8d4695bc77153f76040274d79f09e5e3dd6a4a8fd33725f8074a828825d7b3e95e35a9bfb59b923c711484f1f3f713729dc3ebc0e7eb7397a767683eab550465f26f87d59392abb17ae729550bfad3744e099206abfcaa4714a59fbdb11ed2fc0996d6ddf61c0c3958ec04416e91cc397b2df5135a3fc5c86c1c0c9ac74d457dd06412e3101d8e7dfed34b9ba299c0912f4971cd0087dcb87d601224f63920c4df45320a45afa7ab634063827202846ddefcf373bd8cff3daac3c56011b3dd84eb0e660ad4c5a7384f39f02bd86902db3c0056ea3e1b9247941b18b7ef02fb08c20e1e1d766dd3202e7cc2fef3b5645cae4274bdb8cf6f8c39b507a076eeafb6d1205006ae972aa54e3a4854c318caedc9aed74d08fbe7452b6bf378b82f705cd0a99b90d8aa0fb8041b47ba758dd2e9dfc9405acbef88524d6ff7d3aea92743ceb559ec1c8516554c289adc5e934b93d1b613b86eed50fed25d73e1357d7bee0ffcee8f0a675e1759e2ab75e4fb3cd66e001aaa2c8b7b8709276b0d3403a46cc98a9131e58dc78f47ed7a9289a17cad0aa0820094199a7155d127ac4c6ad0cfcab48973e1e2abfd682df80824cbd68ba4f18b0551d64876dbd48af5b522e0aac1a848b258450bca3bccd925a2a70ce26b9da73691747f2e3ec4ab0c839bd0445d59b761afea5db5e93d94d24d46c009defaaafb1a25e9b7387d3b7aa12fb6b84955bf4771ac23891674dc45debcb14c7e6bf190fe405d8989334a93ba214d7423ed5141f5bda9bdfc483c5a265129cb7ed25197d07d796ffa737ebcf18fa7306f126fdc23a9fde0e5db7421b00199879058ac47afcd662479ea847c0e84cf888d6a347368ea09fbb92aaa136c520d00d21522b4b7063493f16b2db7cbe9a75c4cee251737f369ec5fbd9f92aacdd560e23a3df42aabb654c07081742f46e8eb03c3ae5a5d64e3794d132963af474973a9bfc073e5b616fd9fbe4ace6a76708b1fecdca3942dfb2c66fcc998d66c5069948df8268f4217a1e747e66c0621dd37928c6653348cdf2183850427648f3c7ffd67ebfeba361f993c5f921591c03e9476486e845edcb2ef3196a0d2a6c66a2d53069e01a86c4d153b377056bf00f27d8173559783a305936b8289e429c0f1266e949592fc461ebaa5177736ec52549b1b9b8facb8ccd749bcf468ffad092ebb36c0b6f6a542a805e0ad3b50d382d5583915b6ee8390dfa58a276d8ea531c096dcc0936e1781bee1482bbac3a76dd86ffb2c54a8bc9d8f39224e3fe0d6ebd695f22dd9be3828c2c49ad64c41003fcc3aeff3fae063f0a43d7bc2bc090687c5b56e98b93c3708e24f95a189e4906c212a23e99272c35b662ad6a3c070ac105c6f331aca17f866d1b84ed1542d64e384982e8bdf48e4ed05aa22477b0945313c2630cb2cc24a2bcc95fe5264eac5bcaa76394023eae04ad6847f62c4b708cf2cccf1a387d119cd930ebf8ce8e0a25e20693733d86f6087df164caeae93634c62a02212c975600ec3155f4fa966fbf304ea9c7bdf77c936275956d2cc15b75ba4dd301ee977e2d78f20610ed53132aa3231e1e1cf93a0661fcf1044738876fe58dc4e8f7ad118024781b184f8332eeedf35b850b555ebeed2f8cf65a2f10a0248633346fd7db4afea731dfd8d89c69725257c33c4153dc4d5999b295f1dc21af2d16860f622a60e7ee42138ec3f77d59f998fe48624a3bae5846b0876a914829847bd4ba7f2af0cf1e67c3e75c82e95963bb9ef17a73d4636bb95a98ba369ff41e0c2b748f86b477f911e12de8f09bab08592398ba62d3b9d67496eb486974e7deecbfac913f5a17f8dd784326bfcefeceb069504af24ac8967a5516e5bd451e32cbfcf0946722a849eb858d7f8bb1d24481c895a3afe3c1bc2f2eadd3eb32b5faf6d14a55d8ff2bec16d48a991eaa3b0b1b5ef9e3f623c3381d719bea18c3c0915b48f5e188804ecd6e02354d093d54dc6bb0e16d619195cb4744cb23096b38d0027b47c287aacf3566b5d53a12a725e5043a969976aa3e6228d02366f3cd1440ac7574bde3e1ad145106607f79af0c798e2e7021f472f2ad2a7641f1532d75c977d03fc8df23a543b21fa0953e151707cc4c8cb4551d74ec42277ff1082296ae32b808bcf87513c05a57e8fe9f56ac760b2df0e6ecd8d96f83a27eddeafd9be4123d8891558bcbe2533e492c8666afad8a88321f5e2f394a42e130059c772daedefb246d02e6a49c44dd7ecb9db86a33a7e2c87d9507fa7dd64c503d519896de0cd49dea3a793b28e5d29a889c64528b163bbd3361b6c1cdde672870022d015889224a87dff624f60b31e10a2452afa29a1d834ff610f48bb797303f8ba9d4d15e9c94fb0ab043b2af991435505eec958a6a15c1288bce27d7449e572196f4b43d5ade14e051c148443c47c9d8ab6b76f98043fbfb2a39c9d329f47e270facf4156e63eb0ce528c892b08608fc0b1e701b4cb5b3b808a01a0445077916681268c5a03f291efe70d43c5c1a7afb1d87aaea988bd66b3a91986e7b8f8d417be2d304e7d548208da44f72557217bd0baf1486b5daefe34e83c00f0ce3a25198d0da9db98d7a615afde7f80da2234e5dc5bb3c037aef2aa66cd0aed14c9846f85eb5390bd6ff9bd3ea8f8abf97f49f00bc5ba62fcf86846d3a710371b465faf08fd1c899069060351e56563a4bff432b17a3bce09c3dace1910fa2f4068933c11d156a54569fca4f19011ef14db029d567a48ee914a5afd6b67de7fea0c7fe4e753044485650d9f529f9569484803898273c389691ca410b5e5af5160bbb85cf7ab35a49025918e05237c082cbcda48620a0846c1271255ee38ef54fab4925fd4c57f5e1a832bc2c4882040c83f1640e20fa6d802826eab086441337da7f0bede24d4b5bcf09dc0ae7e1c063213cedcec87b2a4ceb184b30af122dea41f295c6c56e32f8043c7595c869d469074ac00aa25de93394b77831510d121141fb128c33de6a9730485284873cc1a2f2aed6dfdea5cb1849e89a255f8b4f298216489085b5428489b1aefb8a5bc4448a09e27d6d7588f4a8a312db2f57b7d4bdf434adacc14c9fa82bbbef6516b6540c014855f2b4dfad764ab7ce343ba56c3d5aa315685fd1c9525345d2f0e55bde2ee12c7c47c4da475760d0b001c5c5034dbffaf3ea91b87d19cc02280dac26e6c531d2ac0c6c9ccd4afd11af1947fc9cde6d92846a6477877efceeda38a2ec054b92319e22899aa538f38c6c260ed838a58e57c9f8968940644a44b82a463c45c9f488b801da27936370449603e953f15a344e2f87a8655f6aa50aa39079b471e9675658170fc3d5cb8b89d9852ea9d7fcb9905c7b6d002e2e15e3cb98d0dd214ac5b37eb3d26a53b0c63c6bd6789c2f9f0b454c4bc9c6936bad08a4343f6d0363a7c4965fb1995cabfed7cc91f1a41ca8990c31c8dbe332b0a810ed006e041044beae00045d6ca483ca0d875a7422c35439d2746b7c9795532feb2bdc8aee7e6928d0e3cf9ed9617f5a267f0a4f48cbe63c84b69a2a07512ad3502635681c5e7ffd8dce126fcb7fff35641426c95c6a71a1e51e0774c313d5b3cd62ce03242b9bc0a848aec457671758189d2e46331d35e2a25a4b68871652e97eb6ee2fd28f6726fdc5375cfa1c7733696c971876fccc8e3d50f5440fd9031e55631d73c222415efcc817c71fc1ff0280ce68cf8b439c887424f955f7d55542a602d7c663950cea4babeb8b62389d93e56ddab4f97539518f74c9cc50750bbfdcc522575c101b3c471bd6765bbb4b34614890e8dd7fb0d28803457551a1ba91612552391e800979c3eadd8104bce420b7f87f41e80839256b55ac1a73af598b62228ef7b06f618a425774c33da3833c0ce2421ff4b26a2ce3e942438e9c9c11a61e84b8c1533cc1769590ffbc322871d546f336d6ce55a570a3ad86fa9888fe87599e75c73c6f068ce249ca9c6704f099a8d97016ae3169947ad4f10d81c9847b0dab50ae044096ac8f2c8166300d5c83de26dd07acd5a2a0093cd7793efae092aaf5f4e48098de684fc3f9863cd45e29bae57b0924ab2ca887f9c0d96</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>加密手册</category>
      </categories>
      <tags>
        <tag>私人文件</tag>
      </tags>
  </entry>
  <entry>
    <title>占卜</title>
    <url>/2020/myfile_divination/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f8a7438510715033bf2830ef2f4d0d59174b3f0d897d9f74323f2b8923615d9c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>加密手册</category>
      </categories>
      <tags>
        <tag>加密手册</tag>
      </tags>
  </entry>
  <entry>
    <title>科学上网法</title>
    <url>/2020/myfile_gwf/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d4552d90723c5c839286f522fffc49345b62cb53cf311de76a06ef5c21319077">865f2e72ea08bcc61a1dc5a840263739e4b8a7174c6ec8dcd8b4bca836307b927f265efa887d63a78e458c7974aded6133c69536f6993dc9aa938024c3247e64030b8fc153fbf26102871fdfe728197b2ac337bba95ee9cf6e1906a58922ce27f483368dd956ab060cc69a27259babdc3388d33c64ced78c0958a45dee31465f8245652036c1ca15b161542235ee3217d856da162343b1967169bc3cb38d33ea541e745721f3f228edf6887776b85b5f1dbc2982772fd63ab65f5bfca5390fe849dd2a9e22a6f9e330c57819872b7b6b5ad228708261c55e3c9c80d8abec397ff0b0187523d8cb432977ed4fa40734c77f406e3aa732400909f3f5c7cd3d1ee79df153b588e701c3e520642e2cb1b3f947f0b5b418900fd82bc84a8348ebbb932bb2ef0f5cf6e57cfcf4c051b83d414f99af7b2499c99d5456942878a3222a7dca98bf95a16ca5ecdae81a6a9127c9e88c3ffb8bd1de03af834f15fd8c9542fcfdd2b28653bf44242003abcb8ce89d0b032cde766df5c71e7bf74d013f9e627a5086734795174eed45fb84d17295d56f44870a23f2a934e60fd029c21aa3e9913b4c994bc532855af7fc134bd57826b22e0b6bcf234e8347838d7d1560db569b63842f9c38677e5984c09846be0732d8e2869e389021a5f85c48a25bd6ade96ca4c7fe3047c57dc86d26282569b806686d8c5524a3bfce722b4b7cdf0697db92ba86d33e5cdd81afb184adec7719a0819946dff03abc2df95ff1e8d29464e5332373f549a9a1d07f4ab6b94c0500c475366c559315169acb92f344a7c41b2bb8d472763c1aa6d32df44fa87ba5c80898525ec00b39562298e121ce2eb96483086c76c46871461f02b04e05d8bce9ffb88cfd08c4058890b40fb40016ba1a60be318e0f24b0934e8243babcfb57afaf5a4acc610bad54372bc244ee75c1b3825b00bd7e4584a28cdc1580c95068b3769f1ac2616d1312cd9220e3df389127daf8cfad2b8203b4ad712fac519c8b7b3922ec2c772d44f5443433c2031d7842362948c888e75e2327722758a6f4985ae1260e850ebc0c883d0231a15c5695825ac2aa6a268e3de941109e6c0759bb0c7a79b326bc56626fd7ee8842cbfd7e6bd14ee7cdb372f9e4edee3bd7a7eb3653129c80275e1a9e4c70fcb0f35e036b427abc57aec21b55f969f94bb144447b84bac386b8f9d14a983d37e5e9d5f5de62fe826a7224a88359bd3446d5993ec9e72773375ccfd86c7089e1fc304004a16708b02e6ef90253b24c7f5b3e00816f0bc1a0ad7db5f952dd401901ead6f9c7659d194595e5e5428f222607af544bf656b16328157102138c787db69d87286e17193391d78c13a1c9a68612216e3aedd34f88dba8d5d81148019a8777088ced5fb27cd30d5822bdbd148e26b39221dd37dfcc30a57cdcdb33d58069fe0758b39e5f5ffc344319a7f961857653a61343b56c0c9fe9ac01ef0856b7067b425a70e72e3da7a80e9c24ea40af6778d72fc0f41f91aae35eb1425f7335266002b8525b77bcdea9af62e1bb522082a3c585d5b8282c5f4f626e4b338646956b621494c9dc978f2cdb5deae1a1f71bfc5eea5da253497b6f7dfee5f79b62ef4411281bb5d4ed8912161c511df835f1fc8e7d02bcb41ebc3a2a72f47fda447111d8e8d6573e35f99968d479ae2d68d2c8b955485e32294ce0b04a4b13382140cfca447850ee618a04610873da26f4c025e6991488e71cabf05c40967a1f9d7d90256b050120bde0e1eefed194c87b01c5e5ba3ee50b4fc990e92ef60a325e4368124cad59425fdd59531cf6d0e711f5e4f2f84e302a2e5a11a8cca02bc2234d618f0eae3f9af53c44fd55756bb31f2c531644ee290953f8f07540189956ddbe5b548894ecac6eaa2da13a8d7d2d4362b40123afcf854a400324963eab6d2916c979f7a3e34292ce85ca54ebd86e6e15d44ecdf128c813f7a928a320161b0d2ab4fa51f7d99f18baa2044c4fcd26d683cdaa3963d1410f30fd56f363a686b8362362651f2214aac50cb36d4405a4e01875c8883f62a962308b602f99af09b068aab4fc4a1dce4241542b917a99f76da85a3b52a1f92c5d58733fb197ba10c991f6e29d2537690c7ee858d49a17f7e8faa57d96445eed753fd1fc70c44690ca6adac6984699ee6146ed3b2f3e487db5a931daf0552728eebf968eccdfd81352abbde92a5710eb9ca62a353cc180a6fc6c0f62569c183e2dcce8031b2d151eec3e25be898ce571075a94b4bb200b1dcf5a33bb42bd947bf86e082941dae3a9ebd927427a3bd06f86dc5b1b42df0e3762c91ba9a6e18ffa770fffae21e35b4cf1bc2ad9b30b50139480f8ab5e9fb42d2033b90dd8e76e67081e7ceecc1dbe4d1c0424d3a64367d67e627c755e52e61dbc6f86f1c66355b2fb0365980b542533edbcb01974db4aae4cf17e2066522a5126654ea192b2f1070c612651fb3c5e0ba7ecd97373cc2ed627b955b08d8f12bdbfc7d632cd86a691b661236a735d72bc23169d4e90cb5903bd4f26ac1704b6388ec51a2d0f489782ac65dede1a8ae24aea935151f02bc90c9e4fdc869d026ab111e99fe48c0136f6c322b303500e1bbe53c8db1a8e8ebf58952ed4be632c9d3b829686c35a9943be633f39bd08568d70a0c253f55f69ff082d31b107f9b9dbdf74ef88788d7154292b8e1f558d72e577b7da23bc76590a4f02e1fe7b1f71fad04a70bd3a31f414f7555330d6aa300a328d1a3c25cc2931a8fca0c902dac5d486be496519737c98b92d8f1d7271143f0280cde03012105f310391b19ffbc8d2f1d165ab2b32238abaa01889a3cbff1142b465fb81955d5b42343d89fd7783fbab422b2f7d54b7c0a76d42dc0555077feb236df37079c0a4a869532445fb7bb597918be940c28657edf7c0564be953178817940b9548f4e8f9caf5e41c5ebb1957e396ed34416df71015c1d4c605a44eae8a4c0392034962fe04d8db36b66806cc16dbf7d40fda570dd842a0386d3972ade5091f2eca0f485fc92b9d1c652ef9098f878e07fb7060ad3663c3810f3ef418b8f28dcd5c30841bde3efec526f1c3820137646f041934fc064a52eaf53cad5da6bf8fd0298e23983fbd753a822649371147b47a9e6df1026af1d91937b7f0b0a12fd933e8329e2e0ac4e49998f1725dc3a01d8a0d18b7f9d7272b7090508cda764ef07a16942af65618fd1a0c96667824334be9a070e3d5390c641209d37b5d1b1602a756ace6c422f49106b05829779d3bd75b1b806a96187b26f0e4a42931c28aced3ff77a5e77776d9f6e8cc1cdc43f5e5954ae0e7d38594ef8d60e5da904b83261580517153d2b36430b77631eea64d5820bad067b73000eaf17147b65cf47ccde3b7debd03ebb85b68a55307007c242648138584e8a1f71674baff41609f0018091ce319c75c7d91c510f6291e6a30918e3fa6a19884b0e001404139a871db3410757fca15a71d08cdf4a8ccc7705e1c69985189545f9cb4ad1f57f9da523ec9d7b6a68eb90129c6b2c7e9ec69dfd88d740eeab6bc8be9575e3f5aa7d3113b03a1fcd5aa877c481bbbba29dfe9fe203d5f2327394751a694730c83048a992794e204eb1c26b2ef350bfb849610cb902fefb337107192578780c50615726b036594a242253153dc9b39c37cd04f067c9478e0e0b68f8d696aa0e90ebcd854d7bc7487a65809480a305f2669b66c73e453eda13cf9fdb92ecb8fe8226f958742f9d315a6a40c6fb63be7ada02993bb9f52f8aea7af8b98a617ccfaf14dc55f9e213f1f4e79ba3fe531b1e3bb53571a19f9feaa6ae0342746c795eccf47b3b73fec5c0767b24d8b8b06ff88c5b8d6ca44bc286d9d63c766853384097fef4dcbc3f7a652a6c9eb55c8613a145d5d82fd3641ae34ea50875489976b06f00714813db150d8e287968e377bfd6a17b4d5496360c97d61f70987f73c136bac30a8e4bfc56a82b9f8378c50f113d95e92367fc7ccbeac49d0590aa67fb94d0ff8d75279b4a815b38724669a3e5c8d2eb745aa654dc496a880e338cc4bd3881aadadec14e35d9370b8100d7c820386da39537d08a8d8463f23255363a728091dde367423cb09f920aa1c8cacdbd86ed27c0148c27cea5e0bd2e7bdfdd70561adf32385b10065fb21538913d72d1c82ba227923f71fca3c683404d4b44ecfea5dfb5104acea361e85808cb2cd7eb9c89fdc1c7b56c6793beb7152e70cc19c633eb68f8016cd7b07b260e82e4f9ce89fd734b4921fb084cf0be8f5b58745ed4e1fc5f5318b5d42f84a1c51eb5cfd42f8989683c086ce2085a7bcff4f59e150e2faf9d41809abb3f7bf0cef622f9c884658caee5cd179788bb4487afdf7ee0a7293138a97657c8f97f19c3ae02a4776bab22ddc3e5e5f49f4e449e18605e22df6bffbcbf26ab183751135eb51</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>加密手册</category>
      </categories>
      <tags>
        <tag>加密手册</tag>
      </tags>
  </entry>
  <entry>
    <title>个人文件Pass</title>
    <url>/2020/myfile_pass/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a47560bde16ffd0987e02e93c4253edd1e26685fc8d34ba71e80970027a06957">5b958215de3474a7467406f9b308a4ea1b68040e000451bd137996c40bccea1dae9279c2570f73b7ad931c3ffa97fa2bbc649caebe4efa89f6cb921adbd2df8f0774a39b5828038fc23490edf0478b35274a397226914ecde181cc1547c09a0c79a078dc49312a061fafe6dfe4226c2fb0057d30e5dec21c353af66948582c3831b7e3d35a9dfbf57607b0d4e544c943b76d0bf56f17f5495a4a0d920589b7df3f70f6430631c1999840581883e4ff8b94ed3e3a66a0bff06d1a3b78a4b6c8b9b287290055442ecb1b223684a0679148622d03da96fd7975fef5ce021b39975b8a704cd50b8bec0aaf811daeb057f09107709526752722bfbac7e685296ec341a910196695ae181b5aac10c941afcc4c82d8eedbb65a28e6b7020d0d66a766084d48f876f6d419edae50d469c0e2122cf5e0d07e95f3426f0be40ac5b426c711602b8eb797a51ef6074c9298076da0cea4475b233b140869669c7901f7dcf6a7ca05157a9965422b127c2522a57d967c265755d9443e792370ce85d811b808e1a191db21b833f2e3f23867e933ac06420c1f570eb26a513c93d9cb6c0e4ba8b2bb4a29bdf185ff405b2125f45c652c531a6d62811deb9d8e31307447dc71030855c596352ba64f1fb947b8d249e77b744c4d2d115a32199d68480d8d72e48471d9fe922c32bf52ca55ed76cd11530d7ef2b01472af964dff86cd2af0c80bdf38f6f7176c1f4f0922b5eafbb313bccfad9f8ddf293b5be28e99bf64da2b2949d054ce9e8a17cfdeb8c6be73e05db0e7c8403be6449f1e1357777051728eb7ecd6e3ab044bc53ec29bfcd46ffecb58e8bc560f90c978e9f19f67c6b93ea9c11f214f1ff368a6e8f788373bfce6f86858672920ac25c994daabf1c1a9539b2f5fa4b31b170820b59d3ccc30f0108fae8106fa0d2d604d4c790caf043383f8bd95e9f1e963decb9e8cffe5111b9855d4ad492a5aef50cb68714ba3f4abd045cd7d1b145193daf8293177b73941de55d2c9813ec30d32f5b8f5b5a0668d2a7a3d0877af86ea68ac8325b456b25e2dfcb2cabeb9ede65b1bb77f45b3cd1f17026a7b370d8a75cc76d34ac2c3c620f5d152ec8151d18476d4cda7861b3582cca2cba33439914121ffcd0a933530b85cf371a2addce85d4ece60cea0fa9e870b016f4eb951894375120e11ee6b9c052c0cdb5dea7a47c7b4b381b6fb07f170dddc82ee9c42d6a3686b63447ea14bbd676ebc808787dd894a0f1e5a370d4a483f1e95e84fd92a56fb13aadaacfcabf988e16b054b7af4d722e141817402a999653da3e21d1e9df85ec2b1e1591dbc44ff119ccb5a11ac5086d05d33fc064abac7a2d540343b3506c6dce24169d10cbb9b193f3ad8eee62135aeeed4043a688b49316758b64a7ab26faf4880ebc6d370423f8162db494c6e9cd02d6b0dc93a9117e84ff4e80a5c826be64b36feb9304be785e0e862b38c1a111dea251afcc5761a952f660e7321163f987b411088f047f651e9e441c9cda579090fff00642e0173e9dff59ac7f57f6786db3bb8f754c7a6acbcefa7d49f4582cafc15dd6764ebcbb160ca0e50a6ce53f53094c0fdb713437e32c9a2c14114031f27cd7cf387af3890c454bbcc74743a1da85a170032cc5ee19afd3cffc85c1b71ce7bda1b16edc0ca14aa9b3a2af69325e8410c7f91707f4f3720fec19496fbc1c0eaabf85691d39ba2318f1b568a28ebbc223f27a901d49f1a856d82ef1465106ff84c9c5d344436a699c94983edf5e2ad2db6f284ee365a5d648e6cca41a5e246ab97f7ddebacf34ff225e1621d4556a2ffac975c2a50891441436582aba34e1e760c7a2debea44c5485c1a8021108b86a95d2942fa8ef30210f5fae290c9d71b679b92cd6d9c6f633a0e4c75f03e5910144dc83df7d5c2457f545eb373e0133f4ce27ce69b0d75e208cce2277f651a73620254784fe5185991c2ac2a8ba402520ed10e659b903b25cf47f59fee01fbfa291c1def35bd7d4dc77caaca1ec513534d90586b77ba417c062ad69cf94ab9e3006183e16bb3af5fff7ce2f57e8fc7c880f87c53b1ca1dbfb4865eba5e7ed05c03cecf1f77e745256eb2505b6fa528bac118f51a7f6aee6a9d388bb27a19a78e20d8f65b88fb0432d3785f2e0e0c93a0cf7e2ee81fbcab31977bd471bfbd22b75e4c8769617d57afc4122ac71cfa29262d0eb69e0470ab8592c58a48c29af8a1f6893d569e969d1692bd9a5b047cf6990154f32575f589ed5980b86937e2d603b9c3cbaecfff33aa470449eec65cd01759fee23102562c8c2ea3e238fe979f7a4bb5db31d91fca4a46c38a4980cbe5e77b2d3c9205e23de581b50b388ccc3c8dcc20d5e66ba1d2f6c6e7102976c28b76960562b12faf8fbee37c4acfa12be355e6467daca10daf1710f29a4c0e494d7718702a1da1395603bc67d018ba83a5a1ce77c347068cca9654c0cbff7483e6f378e67bbc7d50eb829933abcab16f151381a056291a58087e2049c651a5db43962d92edc9fd279f8a9d4598ab9df81b29b3e0e743c7fd3bbe0045cf89c03527f3877b3ca0803c3b33a69fede05b40622081d6631eef8c43474fc9c2d7ffb8cc33b8822aa339e5cc4a2e267d6676ed5491fc956b81fb39cefd855627f065c8834853cb7e844989b1a15ea2739edecf5eef9d48d945310f42ebf3402394b0acff4b8278dd8b90600f4561cc4f2fa5130ecfd4e7c554e26e5c7d8e41fada4c6e45094808cd04609750076b1d19747084421e8a635f76594c53502ffbff8635cbc57465ede388e5204f054bd524273ac269b454f0e2a8373a882ed8f596b9c2d31591eecbf4e1b88856d00dfeed0019c79953a577fccefe44b1eb1c7b4ff934ea52a3abf7d4bd1418bc367902679506fbe5406b5aaf20741ce738476b73038ecbc1b740ded589b98a205e5aaca761d7a14f52ea4ca18b54e7def5621ab8ec55dfe37696bd82e4fcdd11d76b79db27944dc7937348123c64a0aba4030bc346ddc337cfcdbb9653ce3e8d742375d316439286d51d02b30786bdc5da942d72489865cfc5c7bfc5c7d371fdc3388d04e159045708b3c9871d8f0970629f2fa13ff8ec6117a644f2db158404e8030986ae8e5882f344a930a91696d3d1b64c6165156ff63d0c252518d60de8cbb6d3e56d4b0ff67f836e43d1a304d87987852efff1872415573d7afdf2878dac0fa437a2472239a5bf82646fbe1eea387a2c5feeee13aa153468b5e4338cd718f00a0378782aea34abe7674007e71943ee4db671d3e777261c2debc49990731392d38f52982db7461b76eb3b66d74100befb6a81c38867c2a28efb5aef49bfddb7335a80b4f34f365637b76b39ddda013f8ecd7b3a99559a9a39178726908cb5a5f90276a032e1ac58e53cc8a47c0e4a081e2c7220afdfc53dc6d556d34aac61e09ba9a2d09848f0e1179debe6126a5f649b06322c9e067877f514973dec2bf5c7565c770325d99512d156578ce60fb37a39769644bf9d3265613a29b449b131a0c4c6b2c75fcab2a567f0a4e6e4fee8c87df9827f4b42ec26b6e85cf2381176cf1ea34229b0f445637b6bc485c9316bf3959c2a2b7140c75c50a31b203ce81fe5c9a0a2697a00fe8ee4c48eeb7e2ce68839a7ee86e94265676effcc962ae608aa1c4f6df9d657f4c67d1dfcb334f46a5c1226e9366400b701134d6cfbcca5244273c1574ba0f961df45b0f3331bd3acb1083c58ae3d8f5d86779f23482cf30beb2503b9e1d54ef14e3847b92b420bd398227157f9cdbeacc5e01c36d4c86c3beb922c66cf5ce598a515c62dc0a2eb67b6b8300a349980eaf10ddfe6b14339cb58b30cd481582b949a58679d7b0974c396d1118c42b81f9922832838b00aa30d730b07d7d67a8c6eedd4ea13797052c29345df47c186dbb72596f58f151e569c60d90fabfac6c2ce20d76070944fad679656a4b82d02b8f2d6dee5b0b57c937cfeadc4672fd089a6e1e2b85f3744701421727160d7f4a1106652e7429a81f6911f32c9d554f86df5fc055619529edcf18178daa1a18a5b39e4970d820c16c510dc6b5bd590612fcf72349c107d76702d392b46e0dd34557f4cfbad337882dd3f55cdd8db25ffea860526920e6f6a6b6b2291bb4ce836c255dc810193dbd108428af8faeed54743af492d83c5a3e6abe78e4f9f2c1564a5ea4114e262c99e8218b0099fcfc93ad6a1a4dbf6fb6750acfb5f112214fb3cd75a98b08f8140a8bafbeca456f5ce7aa5ac7e79c95cd0283270e6bef3c689b07632580d314ef0529f7da3d09f159e46fb0cd1ee2a33600c1077b0973b5ee79d781ae781592e443da7feedaf0f903d0760b5905497e31acdcb029f028e821a627f7fd1b5be0e854659244dd4ad96975bbe7a1c01a333486bf0156740942ae8cff23a95e8c58029f4aef05ecc944307a1a45744d26d2d31ca36d02fe7ae112f9238f863dfeb70305527f23a71a0cbf58220bcc0622bca3c9a2f60baf50cd9aaecec1f3f6ff05befcb14a7e5b9621d034873a78eed0f562178fdfc32b4bd30b82940cdb0e5c1352e0edcfc74d3e1105c314c3e0789c3bcfd46a1d8ad6a979ff453a816103e386740e236e4a568e1b5af8b554e551cd07310993c0251eed95a45723911762377ac7d6b382e61d5d71957588418fa30862e0c4deb121072e077c8c6059d1213c6987ac9efd4e9ddb6b28db26de3dedfb96017bdb1a504fa05e6da33225f4315dd1917fe05f2c31042b0620cba37ae080c7328b761e1561594fbf90c2820534fc7b81001fbdc6e79c1db35d68f2795d0cdd69e7bab3eb6f5bf3291cf4a77337cca0404e3d4e24360b246b9f64e9d71157c1b3ea5ee8601121a2e94bbf6c1c9020101a9d1e9bc5f64183615a0998db136afb0b0afde28140c0fe7e953bf110f265eee4ba3ef8ac478ab2e010cafdd23b339db3eed9984f1189b571d2f6f8a1d52e17d5cf42036cdba66bc8fb14437275a90bb205e3681643b5a2487b8bd8e0d866d0c44f4d10857017c298afa7422012a1933e76023dd7961419e5bc7eca6caf8945325a8846aa2571432edb998457eb163c1f514e716a044fe8ae3112bc381d886755618ebcfb5f8dad4be053d2edc625aa8a21c417003b82a641263808de91311a5b09447584044750c4b6dce2d792665aa572dd8b453b9ba4a3fd81f5537673859ae2dfe070f6b01b6e3db549f8b7da1adca763c08a045ef00a08d5646a0739feec8460b65f4d4ea0003ed0d462eb58b115fac7369963ef8e7cd60b8748faa890b172cd957c7d8</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>加密手册</category>
      </categories>
      <tags>
        <tag>私人文件</tag>
      </tags>
  </entry>
  <entry>
    <title>个人文件密钥</title>
    <url>/2020/myfile_secret/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8daa9de30c5fae6c4b57c2bcabb62eb3a3ed9d14ff8cab0c5264249fe1fae5c0">5b958215de3474a7467406f9b308a4ea1b68040e000451bd137996c40bccea1d6572691e7d3e489db93ea1df9a61e4bd737c9c3a675f0d67acfadb0060659ee08b1a7e1f8d5c101e7b8d40376ac743511c3822cd3fa99ca7c5377abfeaf942f4744aad2d60bfcbe7749c8537b9911499c7e472cc30e145dd33720f0c55faa8556460f5919a06a15f46bf0db8c16ad2835c3a74e4d9eae1cafeebdba1c0b39e6ce143222ef96c5ccf9b0e70a08b5a68bb03ea1a615574beda87a272303e592f7729d2544e188ded735b21c92b804a58b4ece0b6eb07f5853dfcae939a8a5616b9c5ff91215129f9a8c9ae3c9a69b1a8e093501e7d702fe9604c07b6544539dd3eff0393a9538c2e82c0d1695b9d273b96897f8fe9718992354066d3248bd41521</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>加密手册</category>
      </categories>
      <tags>
        <tag>私人文件</tag>
      </tags>
  </entry>
  <entry>
    <title>个人文件总结</title>
    <url>/2020/myfile_summary/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fd336c0bb02b8e0d213cf910e9287f27d442652494f47d840cfc8d0f95e06735"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>加密手册</category>
      </categories>
      <tags>
        <tag>私人文件</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/2020/mysql_basic/</url>
    <content><![CDATA[<h2 id="SQL名词"><a href="#SQL名词" class="headerlink" title="SQL名词"></a>SQL名词</h2><ul>
<li>DQL（Data Query Language）：数据查询语言，指Select语句，通常会归类到DML中</li>
<li>DDL（Data Definition Language）：数据定义语言，通常指Create、Drop、Alter等对表操作的语句</li>
<li>DML（Data Manipulation Language）：数据操作语言，通常指Insert、Delete、Update等对数据操作的语句</li>
<li>DCL（Data Control Language）：数据控制语言，通常指Grant、Revoke等对数据库权限控制的语句</li>
</ul>
<h3 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h3><ol>
<li>原子性：数据不可再分</li>
<li>唯一性：所有数据都要和数据表中的键有完全依赖关系</li>
<li>冗余性：非键属性之间是完全无关的</li>
</ol>
<h3 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h3><ol>
<li><p>实体完整性：每个实体都是独一无二的</p>
<ul>
<li>主键（primary key）</li>
<li>唯一约束</li>
<li>唯一索引（unique）</li>
</ul>
</li>
<li><p>引用完整性（参照完整性）：关系中不允许引用不存在的实体</p>
<ul>
<li>外键（foreign key）</li>
</ul>
</li>
<li><p>域完整性：数据是有效的</p>
<ul>
<li>数据类型及长度</li>
<li>非空约束（not null）</li>
<li>默认值约束（default）</li>
<li>检查约束（check）<ul>
<li>说明：在MySQL数据库中，检查约束并不起作用。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h3><p>实现原理：事务</p>
<h2 id="数据库相关的命令"><a href="#数据库相关的命令" class="headerlink" title="数据库相关的命令"></a>数据库相关的命令</h2><h3 id="普通命令"><a href="#普通命令" class="headerlink" title="普通命令"></a>普通命令</h3><ul>
<li><code>SHOW ENGINES;</code> - 查看数据库支持的数据引擎</li>
<li><code>begin/start transaction</code> - 开启事务</li>
<li><code>commit/rollback</code> - 提交&#x2F;回滚</li>
<li><code>explain sql语句</code> - 查看执行计划</li>
<li><code>savepoint 保存点名称</code> - 在事务中添加保存点</li>
<li><code>rollback [work] to [savepoint] 保存点名称</code> - 事务中回滚到保存点</li>
<li><code>release savepoint 保存点名称</code> - 删除保存点</li>
</ul>
<h3 id="变量命令"><a href="#变量命令" class="headerlink" title="变量命令"></a>变量命令</h3><p>注意：变量的查看可以通过<code>show variables like &#39;%变量名%&#39;</code>，也可以通过<code>select @@变量名</code>，非特殊情况不做说明</p>
<ul>
<li><code>show global variables;</code> - 查看所有全局变量</li>
<li><code>show variables;</code> - 查看局部变量</li>
<li><code>show variables like &#39;%storage_engine%&#39;;</code> - 查看数据库的默认引擎，此处storage_engine不是完整的变量名</li>
<li><code>show variables like &#39;%datadir%&#39;;</code> - 查看当前数据保存位置</li>
<li><code>show variables like &quot;innodb_page_size&quot;;</code> - 查看innodb一个数据页的大小</li>
<li><code>set session autocommit = on/off</code> - 设定事务是否自动开启</li>
<li><code>select @@tx_isolation;</code> - 查看数据库的事务隔离级别（8.0.3之前版本）</li>
<li><code>select @@transaction_isolation;</code> - 查看数据库的事务隔离级别（8.0.3之后版本）</li>
<li><code>set session transaction isolation level 事务隔离名称</code> - 设置事务隔离级别</li>
</ul>
<h2 id="MySQL数据引擎"><a href="#MySQL数据引擎" class="headerlink" title="MySQL数据引擎"></a>MySQL数据引擎</h2><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">数据结构可视化查看</a></p>
<table>
<thead>
<tr>
<th>特性</th>
<th>InnoDB</th>
<th>MRG_MYISAM</th>
<th>MEMORY</th>
<th>MyISAM</th>
</tr>
</thead>
<tbody><tr>
<td>存储限制</td>
<td>有</td>
<td>没有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>事务、集群索引、外键</td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>锁机制</td>
<td>行锁</td>
<td>表锁</td>
<td>表锁</td>
<td>表锁</td>
</tr>
<tr>
<td>B树索引、索引缓存</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>哈希索引</td>
<td></td>
<td></td>
<td>支持</td>
<td></td>
</tr>
<tr>
<td>全文检索</td>
<td>支持（5.6+）</td>
<td></td>
<td></td>
<td>支持</td>
</tr>
<tr>
<td>数据缓存</td>
<td>支持</td>
<td></td>
<td>支持</td>
<td></td>
</tr>
<tr>
<td>数据可压缩</td>
<td></td>
<td></td>
<td></td>
<td>支持</td>
</tr>
<tr>
<td>内存使用</td>
<td>高</td>
<td>低</td>
<td>中</td>
<td>低</td>
</tr>
<tr>
<td>存储空间使用</td>
<td>高</td>
<td>低</td>
<td></td>
<td>低</td>
</tr>
<tr>
<td>批量插入性能</td>
<td>低</td>
<td>高</td>
<td>高</td>
<td>高</td>
</tr>
</tbody></table>
<p>MySQL从5.5开始默认使用InnoDB，InnoDB也是唯一一个支持<strong>外键、事务、行锁</strong>的数据引擎。</p>
<h3 id="InnoDB-简介"><a href="#InnoDB-简介" class="headerlink" title="InnoDB 简介"></a>InnoDB 简介</h3><p>支持事务安全表（ACID）</p>
<ul>
<li>A（Atomicity）：原子性；事务，要么全成功，要么全失败</li>
<li>C（Consistency）：一致性；事务前后数据的完整性必须保持一致。</li>
<li>I（Isolation）：隔离性；多个事务之间相互隔离</li>
<li>D（Durability）：持久性；持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的</li>
</ul>
<p>事务特性的实现</p>
<ul>
<li>隔离性：读写锁 + MVCC</li>
</ul>
<p>事务隔离级别：</p>
<ul>
<li>无事务隔离级别：会出现第一类丢失更新、脏读、不可重复读、第二类丢失更新和幻读</li>
<li>Read uncommitter（未提交读）：会出现脏读、不可重复读、第二类丢失更新、幻读，解决了第一类丢失更新</li>
<li>Read Committer（提交读）：会出现不可重复读、第二类丢失更新、幻读，解决了脏读和第一类丢失更新</li>
<li>Repeatable Read（可重复读）：会出现幻读，解决了脏读、不可重复读和第二类丢失更新，MySQL默认的级别，InnoDB引擎下该级别也解决了幻读</li>
<li>Serializable（串行化）：最安全，速度最慢，所有问题都解决了</li>
</ul>
<p>备注：</p>
<ul>
<li>第一类丢失更新：撤销一个事务的时候，把其他事务已提交的更新覆盖了</li>
<li>脏读：一个事务修改了数据未提交，另一个事务读到了修改后的数据</li>
<li>不可重复读：第一个事务读取了数据后，第二个事务修改了该数据，第一个事务再次读该数据就会读到和第一次不同是数据</li>
<li>第二类丢失更新：一个事务提交更新的时候，将其他事务已提交的事务覆盖了，是不可重复读的特例</li>
<li>幻读：事务一操作了数据库的多条记录，事务二向数据库中插入一条满足事务一操作的数据。事务一中就会发现这条满足条件的数据。像是出现幻觉一样</li>
</ul>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">第一类丢失更新</th>
<th align="center">脏读</th>
<th align="center">第二类丢失更新</th>
<th align="center">不可重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Read uncommitted</td>
<td align="center">✅</td>
<td align="center">❌</td>
<td align="center">❌</td>
<td align="center">❌</td>
<td align="center">❌</td>
</tr>
<tr>
<td align="center">Read Committed</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">❌</td>
<td align="center">❌</td>
<td align="center">❌</td>
</tr>
<tr>
<td align="center">Repeatable Read</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">❌</td>
</tr>
<tr>
<td align="center">Serializable</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
<td align="center">✅</td>
</tr>
</tbody></table>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>MySQL中，所有数据类型的列都可以被索引，常用的存储引擎InnoDB和MyISAM能支持每个表创建16个索引。InnoDB和MyISAM使用的索引其底层算法是B-tree（B树），B-tree是一种自平衡的树，类似于平衡二叉排序树，能够保持数据有序。这种数据结构能够让查找数据、顺序访问、插入数据及删除的操作都在对数时间内完成。</p>
<p>B-tree：是一颗多路平衡查找树；</p>
<ul>
<li>每个节点最多有m-1个关键字。</li>
<li>根节点最少可以只有1个关键字。</li>
<li>非根节点至少有m&#x2F;2个关键字。</li>
<li>每个节点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。</li>
<li>所有叶子节点都位于同一层，或者说根节点到每个叶子节点的长度都相同。</li>
<li>每个节点都存有索引和数据，也就是对应的key和value。</li>
</ul>
<p>B+tree：</p>
<ul>
<li>根节点至少一个元素。</li>
<li>非根节点元素范围：m&#x2F;2 &lt;&#x3D; k &lt;&#x3D; m-1。</li>
<li>B+树有两种类型的节点：内部结点（也称索引结点）和叶子结点。内部节点就是非叶子节点，内部节点不存储数据，只存储索引，数据都存储在叶子节点。</li>
<li>内部结点中的key都按照从小到大的顺序排列，对于内部结点中的一个key，左树中的所有key都小于它，右子树中的key都大于等于它。叶子结点中的记录也按照key的大小排列。</li>
<li>每个叶子结点都存有相邻叶子结点的指针，叶子结点本身依关键字的大小自小而大顺序链接。</li>
<li>父节点存有右孩子的第一个元素的索引。</li>
</ul>
<p>参考链接：<a href="https://segmentfault.com/a/1190000020416577">面试官问你B树和B+树，就把这篇文章丢给他</a></p>
<h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><p>MVCC:Multi Version Concurrency Control（多版本并发控制）</p>
<p><a href="https://github.com/mysql/mysql-server/blob/ee4455a33b10f1b1886044322e4893f587b319ed/storage/innobase/include/read0read.h#L43">MVCC的定义源码</a></p>
<p>MVCC只在 Read Committed 和 Repeatable Read两个隔离级别下工作。Read Uncommitted总是读取最新的记录行，Serializable 会对所有读取的记录行都加锁。</p>
<p>MCVV 的实现：隐藏字段、Read View、Undo log</p>
<p>隐藏字段</p>
<ol>
<li>DB_TRX_ID(6字节)：表示最近一次对本记录行作修改（insert|update）的事务ID。至于delete操作，InnoDB认为是一个update操作，不过会更新一个另外的删除位，将行表示为deleted。并非真正删除。</li>
<li>DB_ROLL_PTR(7字节)：回滚指针，指向当前记录行的undo log信息</li>
<li>DB_ROW_ID(6字节)：随着新行插入而单调递增的行ID。理解：当表没有主键或唯一非空索引时，innodb就会使用这个行ID自动产生聚簇索引。如果表有主键或唯一非空索引，聚簇索引就不会包含这个行ID了。这个DB_ROW_ID跟MVCC关系不大。</li>
</ol>
<p>官方文档：<a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html">15.3 InnoDB Multi-Versioning</a></p>
<p>Read View（读视图）结构</p>
<p>和快照、snapshot是类似的概念。主要是用来做可见性判断的, 里面保存了“对本事务不可见的其他活跃事务”。</p>
<p><a href="https://github.com/mysql/mysql-server/blob/ee4455a33b10f1b1886044322e4893f587b319ed/storage/innobase/include/read0types.h#L47">Read View的定义源码</a>，其中包括主要的几个变量</p>
<ol>
<li>low_limit_id：目前出现过的最大的事务ID+1，即下一个将被分配的事务ID。</li>
<li>up_limit_id：活跃事务列表trx_ids中最小的事务ID，如果trx_ids为空，则up_limit_id 为 low_limit_id。</li>
<li>trx_ids：Read View创建时其他未提交的活跃事务ID列表。意思就是创建Read View时，将当前未提交事务ID记录下来，后续即使它们修改了记录行的值，对于当前事务也是不可见的。Read View中trx_ids的活跃事务，不包括当前事务自己和已提交的事务（正在内存中）</li>
<li>creator_trx_id：当前创建事务的ID，是一个递增的编号。（这个编号并不是DB_ROW_ID）</li>
</ol>
<p>Undo log</p>
<p>Undo log中存储的是老版本数据，当一个事务需要读取记录行时，如果当前记录行不可见，可以顺着undo log链找到满足其可见性条件的记录行版本。</p>
<p>大多数对数据的变更操作包括 insert&#x2F;update&#x2F;delete，在InnoDB里，undo log分为如下两类：</p>
<ol>
<li>insert undo log : 事务对insert新记录时产生的undo log, 只在事务回滚时需要, 并且在事务提交后就可以立即丢弃。</li>
<li>update undo log : 事务对记录进行delete和update操作时产生的undo log，不仅在事务回滚时需要，快照读也需要，只有当数据库所使用的快照中不涉及该日志记录，对应的回滚日志才会被purge线程删除。</li>
</ol>
<p>Purge线程：为了实现InnoDB的MVCC机制，更新或者删除操作都只是设置一下旧记录的deleted_bit，并不真正将旧记录删除。<br>为了节省磁盘空间，InnoDB有专门的purge线程来清理deleted_bit为true的记录。purge线程自己也维护了一个read view，如果某个记录的deleted_bit为true，并且DB_TRX_ID相对于purge线程的read view可见，那么这条记录一定是可以被安全清除的。</p>
<p>参考文档：<a href="https://blog.csdn.net/Waves___/article/details/105295060">MySQL中MVCC的正确打开方式（源码佐证）</a></p>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>普通select<br>1.读未提交，读提交，可重复读 不加锁，快照读<br>2.串行化，普通select会升级为select … in share mode</p>
<p>加锁select<br>select … for update<br>select … in share mode<br>1.唯一索引，唯一条件 记录锁(Record Locks)<br>2.其他的查询条件和索引条件 间隙锁(Gap Locks)与临键锁(Next-Key Locks)</p>
<p>update与delete<br>1.唯一索引，唯一条件 记录锁(Record Locks)<br>2.其他， 排他临键锁(Next-Key Locks)</p>
<p>insert<br>排它锁、同时，会在插入区间加插入意向锁(insert intention lock)。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>技术原理</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL安装避坑</title>
    <url>/2020/mysql_install_issue/</url>
    <content><![CDATA[<p>安装MySQL可能会遇到的一些错误总结<span id="more"></span></p>
<h2 id="安装遇坑"><a href="#安装遇坑" class="headerlink" title="安装遇坑"></a>安装遇坑</h2><h2 id="启动遇坑"><a href="#启动遇坑" class="headerlink" title="启动遇坑"></a>启动遇坑</h2><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>Mac下homebrew安装mysql的数据默认路径：<code>/usr/local/var/mysql</code></p>
<p>Mac下设置数据保存路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /usr/local/etc/my.cnf</span><br><span class="line">datadir=/Users/stolen/docker_volumes/shiyanlou/mysql</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>Issue</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 中的一些坑</title>
    <url>/2022/mysql_issue/</url>
    <content><![CDATA[<h2 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h2><p>在 MySQL 中，使用 <code>format</code> 函数可以将一个数字保留指定的小数位数，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> format(<span class="number">123456.12645</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">-- 124556.13</span></span><br></pre></td></tr></table></figure>

<p>但是，如果将 <code>format</code> 嵌套进 <code>SUM</code> 中使用，就会出现问题：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(format(<span class="number">123456.12345</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">-- 123</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(format(<span class="number">1234567.12345</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">-- 1</span></span><br></pre></td></tr></table></figure>

<p>该情况从 MySQL 5.6 - 8.0.27 测试都存在这个问题，尚未知是某种特性还是 bug，观察其特征或许是将 <code>format</code> 输出的结果中的千位分隔符当作小数点处理了。</p>
<h2 id="order-by-limit-造成优化器选择索引错误"><a href="#order-by-limit-造成优化器选择索引错误" class="headerlink" title="order by limit 造成优化器选择索引错误"></a>order by limit 造成优化器选择索引错误</h2><p>参考：<a href="https://developer.aliyun.com/article/51065">MySQL · 捉虫动态 · order by limit 造成优化器选择索引错误</a></p>
<p>该问题在 5.7 及以上的版本中已经修复，但是在 5.6 版本中仍然存在。</p>
<p>在 MySQL 中，优化器会先选择 where 条件中字段的索引，该索引过滤性较好； 但当 SQL 中同时存在有 order by limit 时，优化器会优先选择 order by 后面的字段作为索引，导致查询效率降低</p>
<p>例如：</p>
<p>存在一个 user 表，有 id, name, age 三个字段，id 为主键，name 为普通索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;test&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ***************************[ 1. row ]***************************</span></span><br><span class="line"><span class="comment">-- id            | 1</span></span><br><span class="line"><span class="comment">-- select_type   | SIMPLE</span></span><br><span class="line"><span class="comment">-- table         | user</span></span><br><span class="line"><span class="comment">-- partitions    | &lt;null&gt;</span></span><br><span class="line"><span class="comment">-- type          | ref</span></span><br><span class="line"><span class="comment">-- possible_keys | idx_name</span></span><br><span class="line"><span class="comment">-- key           | PRIMARY</span></span><br><span class="line"><span class="comment">-- key_len       | 130</span></span><br><span class="line"><span class="comment">-- ref           | const</span></span><br><span class="line"><span class="comment">-- rows          | 8</span></span><br><span class="line"><span class="comment">-- filtered      | 100.0</span></span><br><span class="line"><span class="comment">-- Extra         | &lt;null&gt;</span></span><br></pre></td></tr></table></figure>

<p>解决办法通常使用强制索引，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> FORCE INDEX (idx_name) <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;test&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Binary"><a href="#Binary" class="headerlink" title="Binary"></a>Binary</h2><p>在 MySQL 中，大小写是不敏感的，在做查询的时候，可能就会出现一些问题，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="comment">-- id	name</span></span><br><span class="line"><span class="comment">-- 1	test</span></span><br><span class="line"><span class="comment">-- 2	TeSt</span></span><br><span class="line"><span class="comment">-- 2	TEsT</span></span><br><span class="line"><span class="comment">-- 3	TEST</span></span><br></pre></td></tr></table></figure>

<p>此时，为了达到精确查询的效果，可以使用 <code>BINARY</code> 关键字，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> <span class="type">BINARY</span> name<span class="operator">=</span><span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="comment">-- id	name</span></span><br><span class="line"><span class="comment">-- 1	test</span></span><br><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> name<span class="operator">=</span> <span class="type">BINARY</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="comment">-- id	name</span></span><br><span class="line"><span class="comment">-- 1	test</span></span><br></pre></td></tr></table></figure>

<p>但上面两种都能在线上环境中使用吗，笔者用教训回答是不可以的，因为如果恰好 <code>name</code> 字段上有索引，那么第一种方法是走不了索引的，只能用第二种方法，故只推荐以下方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> `<span class="keyword">user</span>` <span class="keyword">WHERE</span> name<span class="operator">=</span> <span class="type">BINARY</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="comment">-- id	name</span></span><br><span class="line"><span class="comment">-- 1	test</span></span><br></pre></td></tr></table></figure>

<h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><p>MySQL 中的时间格式化占位符和 Python 语言中的时间格式化方式有区别，导致经常会得到不想要的结果</p>
<table>
<thead>
<tr>
<th>占位符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>%Y</code></td>
<td>4位的年份</td>
</tr>
<tr>
<td><code>%y</code></td>
<td>2位的年份</td>
</tr>
<tr>
<td><code>%M</code></td>
<td>英文月份, 如 <code>January</code></td>
</tr>
<tr>
<td><code>%b</code></td>
<td>缩写月名, 如 <code>Jan</code></td>
</tr>
<tr>
<td><code>%m</code></td>
<td>数字月份, 00-12, 如 <code>01</code></td>
</tr>
<tr>
<td><code>%c</code></td>
<td>数字月份, 0-12, 如 <code>1</code></td>
</tr>
<tr>
<td><code>%d</code></td>
<td>每月的第几天, 00-31, 如 <code>01</code></td>
</tr>
<tr>
<td><code>%D</code></td>
<td>带有英文前缀的月中的天, 如 <code>1st</code></td>
</tr>
<tr>
<td><code>%e</code></td>
<td>每月的第几天, 0-31, 如 <code>1</code></td>
</tr>
<tr>
<td><code>%j</code></td>
<td>每年的第几天, 000-366, 如 <code>001</code></td>
</tr>
<tr>
<td><code>%W</code></td>
<td>星期名, 如 <code>Monday</code></td>
</tr>
<tr>
<td><code>%a</code></td>
<td>缩写星期名, 如 <code>Mon</code></td>
</tr>
<tr>
<td><code>%w</code></td>
<td>每周的第几天, 0&#x3D;星期日, 6&#x3D;星期六, 如 <code>1</code></td>
</tr>
<tr>
<td><code>%H</code></td>
<td>小时, 00-23, 如 <code>01</code></td>
</tr>
<tr>
<td><code>%h</code></td>
<td>小时, 01-12, 如 <code>01</code></td>
</tr>
<tr>
<td><code>%I</code></td>
<td>小时, 01-12, 如 <code>01</code></td>
</tr>
<tr>
<td><code>%k</code></td>
<td>小时, 1-23, 如 <code>1</code></td>
</tr>
<tr>
<td><code>%l</code></td>
<td>小时, 1-12, 如 <code>1</code></td>
</tr>
<tr>
<td><code>%p</code></td>
<td>上午或下午, AM&#x2F;PM, 如 <code>AM</code></td>
</tr>
<tr>
<td><code>%i</code></td>
<td>分钟, 00-59, 如 <code>04</code></td>
</tr>
<tr>
<td><code>%S</code></td>
<td>秒钟, 00-59, 如 <code>04</code></td>
</tr>
<tr>
<td><code>%s</code></td>
<td>秒钟, 00-59, 如 <code>04</code></td>
</tr>
<tr>
<td><code>%f</code></td>
<td>微秒, 000000-999999, 如 <code>000000</code></td>
</tr>
<tr>
<td><code>%r</code></td>
<td>时间, 12小时制表示, hh:mm:ss AM&#x2F;PM, 如 <code>03:04:05 PM</code></td>
</tr>
<tr>
<td><code>%T</code></td>
<td>时间, 24小时制表示, hh:mm:ss, 如 <code>15:04:05</code></td>
</tr>
<tr>
<td><code>%U</code></td>
<td>(不知道啥用) 每年的第几周, 星期日是一周的第一天, 00-53, 如 <code>01</code></td>
</tr>
<tr>
<td><code>%u</code></td>
<td>(不知道啥用) 每年的第几周, 星期一是一周的第一天, 00-53, 如 <code>01</code></td>
</tr>
<tr>
<td><code>%V</code></td>
<td>(不知道啥用) 每年的第几周, 星期日是一周的第一天, 01-53, 如 <code>01</code></td>
</tr>
<tr>
<td><code>%v</code></td>
<td>(不知道啥用) 每年的第几周, 星期一是一周的第一天, 01-53, 如 <code>01</code></td>
</tr>
<tr>
<td><code>%X</code></td>
<td>(不知道啥用) 年, 其中的星期日是周的第一天, 与 %V 使用</td>
</tr>
<tr>
<td><code>%x</code></td>
<td>(不知道啥用) 年, 其中的星期一是周的第一天, 与 %v 使用</td>
</tr>
</tbody></table>
<p>示例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(&quot;2006-01-02 15:04:05.123456&quot;, &quot;%Y-%Y %M-%M-%B-%C %D-%D-%E-%J %W-%A-%W %H-%H-%I-%K-%L-%P %I %S-%S %F %R %T&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2006-06 January-01-Jan-1 02-2nd-2-002 Monday-Mon-1 15-03-03-15-3-PM 04 05-05 123456 03:04:05 PM 15:04:05</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>Issue</tag>
      </tags>
  </entry>
  <entry>
    <title>网络相关技术点</title>
    <url>/2020/network/</url>
    <content><![CDATA[<h2 id="TCP连接过程"><a href="#TCP连接过程" class="headerlink" title="TCP连接过程"></a>TCP连接过程</h2><p>状态码含义：</p>
<ul>
<li>SYN(synchronous) - 表示建立连接</li>
<li>ACK(acknowledgment) - 表示响应</li>
<li>FIN(finish) - 表示关闭连接</li>
<li>RST(reset) - 表示重置</li>
<li>PSH(push) - 表示有Data传送</li>
<li>URG(urgent) - 表示紧急</li>
<li>Sequence Number - 顺序号码</li>
<li>Acknowledge Number - 确认号码</li>
</ul>
<p>三次握手：</p>
<ol>
<li>主机A发送位码为syn&#x3D;1，随机产生seq number&#x3D;1234567的数据包到服务器，主机B由SYN&#x3D;1知道，A要求建立联机。</li>
<li>主机B收到请求后要确认联机信息，向A发送ack number&#x3D;(主机A的seq+1)，syn&#x3D;1，ack&#x3D;1，随机产生seq&#x3D;7654321的包。</li>
<li>主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number&#x3D;(主机B的seq+1)，ack&#x3D;1，主机B收到后确认seq值与ack&#x3D;1则连接建立成功。</li>
</ol>
<p>四次挥手：</p>
<ol>
<li>主机A发送位码为fin&#x3D;1，seq number&#x3D;(前面已经传送过来的数据的最后一个字节的序号加1)并发送，主机B由fin&#x3D;1知道A要关闭连接。</li>
<li>主机B返回ack&#x3D;1，ack number&#x3D;(主机A的seq&#x3D;1)，随机产生seq number&#x3D;1234567。然后等待主机B的socket服务关闭。</li>
<li>主机B的socket服务关闭后，向主机A发送fin&#x3D;1，ack&#x3D;1，ack number&#x3D;(主机A的seq&#x3D;1)，seq number&#x3D;(前面已经传送过来的数据的最后一个字节的序号加1)并发送。</li>
<li>主机A收到主机B的fin后，返回ACK&#x3D;1，ack number&#x3D;(最后一次发送过来的seq number加1)</li>
</ol>
<h2 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h2><table>
<thead>
<tr>
<th></th>
<th>UDP</th>
<th>TCP</th>
</tr>
</thead>
<tbody><tr>
<td>是否连接</td>
<td>无连接</td>
<td>面向连接</td>
</tr>
<tr>
<td>是否可靠</td>
<td>不可靠传输，不使用流量控制和拥塞控制</td>
<td>可靠传输，使用流量控制和拥塞控制</td>
</tr>
<tr>
<td>连接对象个数</td>
<td>支持一对一，一对多，多对一和多对多交互通信</td>
<td>只能是一对一通信</td>
</tr>
<tr>
<td>传输方式</td>
<td>面向报文</td>
<td>面向字节流</td>
</tr>
<tr>
<td>首部开销</td>
<td>首部开销小，仅8字节</td>
<td>首部最小20字节，最大60字节</td>
</tr>
<tr>
<td>适用场景</td>
<td>适用于实时应用（IP电话、视频会议、直播等）</td>
<td>适用于要求可靠传输的应用，例如问卷传输</td>
</tr>
</tbody></table>
<ul>
<li>TCP向上层提供面向连接的可靠服务，UDP向上层提供无连接不可靠服务</li>
<li>虽然UDP并没有TCP传输来的准确，但是也能在很多实用性要求高的地方有所作为</li>
<li>对数据准确性要求高，速度可以相对较慢的，可以选用TCP</li>
</ul>
<h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>socket是一种应用程序接口，一般指的是网络中一个连接的两端，socket中通常封装了TCP和UDP的通信方式，直接使用socket就可以进行TCP或UDP的对话。</p>
<ul>
<li>SOCK_STREAM - 可靠数据传输，基于TCP</li>
<li>SOCK_DGRAM - 不可靠数据传输，基于UDP</li>
</ul>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>HTTP是一个基于TCP协议的超文本传输协议。</p>
<p>请求体结构：</p>
<p>请求行 - 请求体 - 空行 - 消息体</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>响应体结构：</p>
<p>响应头 - 响应体 - 空行 - 消息体</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Bdpagetype: 2</span><br><span class="line">Bdqid: 0xb6dda1710004f934</span><br><span class="line">Cache-Control: private</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h3 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP 0.9"></a>HTTP 0.9</h3><ul>
<li>只有GET请求</li>
<li>服务器只能回应HTML格式的字符串</li>
</ul>
<h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP 1.0"></a>HTTP 1.0</h3><ul>
<li>增加了POST和HEAD请求</li>
<li>可以发送任何格式的内容</li>
<li>每次通信都必须包括头信息</li>
<li>状态码（status code）、多字符集支持、多部分发送（multi-part type）、权限（authorization）、缓存（cache）、内容编码（content encoding）等。</li>
</ul>
<h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP 1.1"></a>HTTP 1.1</h3><ul>
<li>持久连接：Connection: keep-alive</li>
<li>管道机制：同一个TCP连接里面，客户端可以同时发送多个请求。</li>
<li>Content-Length 字段：声明本次回应的数据长度。</li>
<li>分块传输编码：Transfer-Encoding: chunked，对不定长度的内容使用分块传输</li>
<li>新增了许多动词方法：<code>PUT</code>、<code>PATCH</code>、<code>HEAD</code>、 <code>OPTIONS</code>、<code>DELETE</code>。</li>
<li>新增了Host字段，用来指定服务器的域名</li>
</ul>
<h3 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP 2"></a>HTTP 2</h3><ul>
<li>二进制协议：将HTTP 1.1中数据头为文本，数据体为文本或二进制，改为全为二进制，统称为帧（frame）：头信息帧和数据帧。</li>
<li>多功：在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应，这样就避免了”队头堵塞”。</li>
<li>数据流：将每个请求或回应的所有数据包，称为一个数据流（stream）。每个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流ID，用来区分它属于哪个数据流。另外还规定，客户端发出的数据流，ID一律为奇数，服务器发出的，ID为偶数。</li>
<li>头信息压缩：头信息使用<code>gzip</code>或<code>compress</code>压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了。</li>
<li>服务器推送：允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送（server push）。</li>
</ul>
<p>参考链接：<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html">互联网协议入门（一）</a>、<a href="http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html">互联网协议入门（二）</a>、<a href="http://www.ruanyifeng.com/blog/2016/08/http.html">HTTP 协议入门</a></p>
<h2 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h2><p>HTTPS是在HTTP的基础上对传输的内容进行了加密。</p>
<p>HTTPS传输就是在HTTP的传输过程上添加了ssl校验</p>
<ol>
<li><p><strong>客户端发出请求</strong>：支持的协议版本，比如TLS 1.0版；一个客户端生成的随机数，稍后用于生成”对话密钥”；支持的加密方法，比如RSA公钥加密； 支持的压缩方法。</p>
</li>
<li><p><strong>服务器回应</strong>：确认使用的加密通信协议版本，比如TLS 1.0版本；一个服务器生成的随机数，稍后用于生成”对话密钥”；确认使用的加密方法，比如RSA公钥加密；服务器证书。</p>
</li>
<li><p><strong>客户端回应</strong>：客户端验证服务器证书有效后，向服务器发送三个信息：一个随机数。该随机数用服务器公钥加密，防止被窃听；编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送；客户端握手结束通知，表示客户端的握手阶段已经结束。</p>
</li>
<li><p><strong>服务器的最后回应</strong>：将客户机发送的随机数解密后，向客户机发送两个信息：编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送；服务器握手结束通知，表示服务器的握手阶段已经结束。</p>
</li>
<li><p>至此，整个握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的HTTP协议，只不过用”会话密钥”加密内容。</p>
</li>
</ol>
<p>参考内容：<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html">SSL&#x2F;TLS协议运行机制的概述</a></p>
<h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><table>
<thead>
<tr>
<th align="center">状态码</th>
<th align="left">状态码英文名称</th>
<th align="left">中文描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">100</td>
<td align="left">Continue</td>
<td align="left">继续。客户端应继续其请求</td>
</tr>
<tr>
<td align="center">101</td>
<td align="left">Switching Protocols</td>
<td align="left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">状态码</th>
<th align="left">状态码英文名称</th>
<th align="left">中文描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">200</td>
<td align="left">OK</td>
<td align="left">请求成功，一般用于GET与POST请求</td>
</tr>
<tr>
<td align="center">201</td>
<td align="left">Created</td>
<td align="left">已创建，成功请求并创建了新的资源</td>
</tr>
<tr>
<td align="center">202</td>
<td align="left">Accepted</td>
<td align="left">已接受，已经接受请求，但未处理完成</td>
</tr>
<tr>
<td align="center">203</td>
<td align="left">Non-Authoritative Information</td>
<td align="left">非授权信息。请求成功。服务器已成功处理了请求，但返回的信息可能来自另一来源。</td>
</tr>
<tr>
<td align="center">204</td>
<td align="left">No Content</td>
<td align="left">无内容。服务器成功处理，但未返回内容。</td>
</tr>
<tr>
<td align="center">205</td>
<td align="left">Reset Content</td>
<td align="left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。</td>
</tr>
<tr>
<td align="center">206</td>
<td align="left">Partial Content</td>
<td align="left">部分内容，服务器成功处理了部分GET请求</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">状态码</th>
<th align="left">状态码英文名称</th>
<th align="left">中文描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">300</td>
<td align="left">Multiple Choices</td>
<td align="left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端选择</td>
</tr>
<tr>
<td align="center">301</td>
<td align="left">Moved Permanently</td>
<td align="left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI</td>
</tr>
<tr>
<td align="center">302</td>
<td align="left">Found</td>
<td align="left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td>
</tr>
<tr>
<td align="center">303</td>
<td align="left">See Other</td>
<td align="left">查看其它地址。与301类似。使用GET和POST请求查看</td>
</tr>
<tr>
<td align="center">304</td>
<td align="left">Not Modified</td>
<td align="left">所请求的资源未修改，服务器不会返回任何资源。客户端通过一个头信息指定日期之后修改的资源</td>
</tr>
<tr>
<td align="center">305</td>
<td align="left">Use Proxy</td>
<td align="left">使用代理。所请求的资源必须通过代理访问</td>
</tr>
<tr>
<td align="center">306</td>
<td align="left">Unused</td>
<td align="left">已经被废弃的HTTP状态码</td>
</tr>
<tr>
<td align="center">307</td>
<td align="left">Temporary Redirect</td>
<td align="left">临时重定向。与302类似。使用GET请求重定向</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">状态码</th>
<th align="left">状态码英文名称</th>
<th align="left">中文描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">400</td>
<td align="left">Bad Request</td>
<td align="left">客户端请求的语法错误，服务器无法理解</td>
</tr>
<tr>
<td align="center">401</td>
<td align="left">Unauthorized</td>
<td align="left">请求要求用户的身份认证</td>
</tr>
<tr>
<td align="center">402</td>
<td align="left">Payment Required</td>
<td align="left">保留，将来使用</td>
</tr>
<tr>
<td align="center">403</td>
<td align="left">Forbidden</td>
<td align="left">服务器理解请求客户端的请求，但是拒绝执行此请求</td>
</tr>
<tr>
<td align="center">404</td>
<td align="left">Not Found</td>
<td align="left">服务器无法根据客户端的请求找到资源（网页）</td>
</tr>
<tr>
<td align="center">405</td>
<td align="left">Method Not Allowed</td>
<td align="left">客户端请求中的方法被禁止</td>
</tr>
<tr>
<td align="center">406</td>
<td align="left">Not Acceptable</td>
<td align="left">服务器无法根据客户端请求的内容特性完成请求</td>
</tr>
<tr>
<td align="center">407</td>
<td align="left">Proxy Authentication Required</td>
<td align="left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td>
</tr>
<tr>
<td align="center">408</td>
<td align="left">Request Time-out</td>
<td align="left">服务器等待客户端发送的请求时间过长，超时</td>
</tr>
<tr>
<td align="center">409</td>
<td align="left">Conflict</td>
<td align="left">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td>
</tr>
<tr>
<td align="center">410</td>
<td align="left">Gone</td>
<td align="left">客户端请求的资源已经不存在。通常标识资源以前有现在被永久删除了</td>
</tr>
<tr>
<td align="center">411</td>
<td align="left">Length Required</td>
<td align="left">服务器无法处理客户端发送的不带Content-Length的请求信息</td>
</tr>
<tr>
<td align="center">412</td>
<td align="left">Precondition Failed</td>
<td align="left">客户端请求信息的先决条件错误</td>
</tr>
<tr>
<td align="center">413</td>
<td align="left">Request Entity Too Large</td>
<td align="left">由于请求的实体过大，服务器无法处理，因此拒绝请求</td>
</tr>
<tr>
<td align="center">414</td>
<td align="left">Request-URI Too Large</td>
<td align="left">请求的URI过长（URI通常为网址），服务器无法处理</td>
</tr>
<tr>
<td align="center">415</td>
<td align="left">Unsupported Media Type</td>
<td align="left">服务器无法处理请求附带的媒体格式</td>
</tr>
<tr>
<td align="center">416</td>
<td align="left">Requested range not satisfiable</td>
<td align="left">客户端请求的范围无效</td>
</tr>
<tr>
<td align="center">417</td>
<td align="left">Expectation Failed</td>
<td align="left">服务器无法满足Expect的请求头信息</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">状态码</th>
<th align="left">状态码英文名称</th>
<th align="left">中文描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">500</td>
<td align="left">Internal Server Error</td>
<td align="left">服务器内部错误，无法完成请求</td>
</tr>
<tr>
<td align="center">501</td>
<td align="left">Not Implemented</td>
<td align="left">服务器不支持请求的功能，无法完成请求</td>
</tr>
<tr>
<td align="center">502</td>
<td align="left">Bad Gateway</td>
<td align="left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td>
</tr>
<tr>
<td align="center">503</td>
<td align="left">Service Unavailable</td>
<td align="left">由于超载或系统维护，服务器暂时的无法处理客户端的请求</td>
</tr>
<tr>
<td align="center">504</td>
<td align="left">Gateway Time-out</td>
<td align="left">充当网关或代理的服务器，未及时从远端服务器获取请求</td>
</tr>
<tr>
<td align="center">505</td>
<td align="left">HTTP Version not supported</td>
<td align="left">服务器不支持请求的HTTP协议的版本，无法完成处理</td>
</tr>
</tbody></table>
<p>参考内容：<a href="https://www.runoob.com/http/http-status-codes.html">HTTP状态码</a></p>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>网络技术</title>
    <url>/2021/network_improve/</url>
    <content><![CDATA[<h2 id="网络互联模型"><a href="#网络互联模型" class="headerlink" title="网络互联模型"></a>网络互联模型</h2><table>
    <tr>
        <th>层数</th>
        <th>OSI七层参考模型</th>
        <th>TCP/IP协议模型</th>
        <th>学习研究模型</th>
        <th>请求过程数据封装</th>
    </tr>
    <tr>
        <td>7</td>
        <td>应用层(Application)</td>
        <td rowspan=3>应用层(Application)</td>
        <td rowspan=3>应用层(Application)</td>
        <td rowspan=3>(5)</td>
    </tr>
    <tr>
        <td>6</td>
        <td>表示层(Presentation)</td>
    </tr>
    <tr>
        <td>5</td>
        <td>会话层(Session)</td>
    </tr>
    <tr>
        <td>4</td>
        <td>运输层(Transport)</td>
        <td>运输层(Transport)</td>
        <td>运输层(Transport)</td>
        <td>(4)(5)</td>
    </tr>
    <tr>
        <td>3</td>
        <td>网络层(Network)</td>
        <td>网际层(Internet)</td>
        <td>网络层(Network)</td>
        <td>(3)(4)(5)</td>
    </tr>
    <tr>
        <td>2</td>
        <td>数据链路层(Data Link)</td>
        <td rowspan=2>网络接口层(Network Access)</td>
        <td>数据链路层(Data Link)</td>
        <td>(2)(3)(4)(5)(2)</td>
    </tr>
    <tr>
        <td>1</td>
        <td>物理层(Physical)</td>
        <td>物理层(Physical)</td>
        <td>(1)(2)(3)(4)(5)(2)</td>
    </tr>
</table>

<h2 id="数据通信方式"><a href="#数据通信方式" class="headerlink" title="数据通信方式"></a>数据通信方式</h2><ol>
<li>首先知道对方ip</li>
<li>知道ip后发送ARP广播请求，获取对方mac地址</li>
<li>发送数据到指定mac地址，网卡发现mac地址是自己就向网络模型上层传递处理，不是自己就会丢掉</li>
</ol>
<h2 id="计算机之间的连接方式"><a href="#计算机之间的连接方式" class="headerlink" title="计算机之间的连接方式"></a>计算机之间的连接方式</h2><p>两个相同的设备之间使用交叉线，不同的设备使用直通线</p>
<p>同轴电缆：一根总线。总线两端需要中介电阻，计算机通过T型连接器接到总线上，</p>
<ul>
<li>半双工通信</li>
<li>容易冲突</li>
</ul>
<p>集线器(Hub)：所有节点集中在一个节点上</p>
<ul>
<li>半双工通信</li>
<li>容易冲突</li>
<li>不安全</li>
<li>和同轴电缆类似</li>
</ul>
<p>网桥(Bridge)：</p>
<ul>
<li>能够通过自学习得知每个接口那侧的MAC地址</li>
<li>可以隔绝冲突域，网桥一侧内部发送数据不会影响其他侧</li>
</ul>
<p>交换机(Switch)：</p>
<ul>
<li>相当于更多的网桥</li>
<li>全双工通信</li>
<li>比集线器安全</li>
</ul>
<p>网线直连、同轴电缆、网桥、交换机、集线器：</p>
<ul>
<li>连接的设备必须在同一网段</li>
<li>连接的设备处在同一广播域</li>
</ul>
<p>路由器(Router)：</p>
<ul>
<li>可以在不同的网段之间转发数据</li>
<li>可以隔绝广播域</li>
</ul>
<h2 id="网络相关名词"><a href="#网络相关名词" class="headerlink" title="网络相关名词"></a>网络相关名词</h2><p>MAC地址(Media Access Control Address)</p>
<ul>
<li><p>全球唯一标识</p>
</li>
<li><p>前三个字节是组织唯一标识OUI(Organizationally Unique Identifyer)，</p>
</li>
<li><p>后六位为网络接口标识（厂商自行分配）</p>
</li>
<li><p>OUI查询：<a href="http://standards-oui.ieee.org/oui.txt">查询地址1</a>、<a href="https://mac.51240.com/">查询地址2</a></p>
</li>
<li><p>MAC地址48位全为1时表示广播地址</p>
</li>
<li><p>MAC地址可在操作系统层面上进行修改</p>
</li>
<li><p>当不知道对方当MAC地址时，可以通过ARP广播方式获取对方当MAC地址</p>
</li>
<li><p>获取成功后，会缓存IP地址、MAC地址的映射信息，俗称：ARP缓存</p>
</li>
<li><p>通过ARP广播获取的MAC地址，属于动态(dynamic)缓存，存储时间较短，通常为2分钟</p>
</li>
<li><p><code>arp -a [主机地址]</code> - 查询ARP缓存</p>
</li>
<li><p><code>arp -d [主机地址]</code> - 删除ARP缓存</p>
</li>
<li><p><code>arp -s 主机地址 MAC地址</code> - 增加一条（静态）缓存信息</p>
</li>
</ul>
<p>IP地址(Internet Protocol Address)</p>
<ul>
<li>互联网上每个主机都有一个IP地址</li>
<li>IP地址分为IPv4和IPv6，IPv4地址已经用完</li>
<li>IPv4 32bit（4字节）</li>
<li>IPv6 128bit（16字节）</li>
<li>IP地址由两部分组成：网络标识（网络ID）、主机标识（主机ID）</li>
<li>同一网段都计算机，网络ID相同</li>
<li>通过子网掩码，可以算出网络ID：子网掩码 &amp; IP地址</li>
<li>计算机和其他计算机通讯，会先判断是否时同一个网段中的，同一网段不需要路由器转发，不同网段需要路由器转发</li>
<li>判断ip是否和自己在同一个网段是用自己的子网掩码 &amp; 其他IP，网段是否一样。</li>
</ul>
<p>IP地址分类</p>
<ul>
<li><p>A类地址：默认子网掩码是255.0.0.0，网络ID是以0开头，网络ID占8位，主机ID占24位</p>
<ul>
<li>A类地址网络ID不能为0，127为保留字段，所以A类地址网络ID取值范围为1-126</li>
</ul>
</li>
<li><p>B类地址：默认子网掩码是255.255.0.0，网络ID是以10开头，网络ID占16位，主机ID占16位</p>
<ul>
<li>B类地址网络ID取值范围为128-191</li>
</ul>
</li>
<li><p>C类地址：默认子网掩码是255.255.255.0，网络ID是以110开头，网络ID占24位，主机ID占8位</p>
<ul>
<li>C类地址网络ID取值范围为192-223</li>
</ul>
</li>
<li><p>D类地址：以1110开头，没有子网掩码，多播地址</p>
<ul>
<li>D类地址网络ID取值范围为224-239</li>
</ul>
</li>
<li><p>E类地址：以1111开头，保留为今后使用</p>
<ul>
<li>E类地址网络ID取值范围为240-255</li>
</ul>
</li>
<li><p>只有ABC类地址才能分配给主机</p>
</li>
<li><p>主机ID为全0，表示主机所在的网段</p>
</li>
<li><p>主机ID为全1，表示主机所在网段的全部主机（广播）</p>
</li>
</ul>
<p>子网掩码CIDR(Classless Inter-Domain Routing)表示法</p>
<ul>
<li>192.168.1.100&#x2F;24 代表子网掩码有24个1，即255.255.255.0</li>
<li>144.168.1.100&#x2F;16 代表子网掩码有16个1，即255.255.0.0</li>
</ul>
<p>网络划分</p>
<ul>
<li>子网：将子网掩码在原基础上添加1的个数</li>
<li>超网：将子网掩码在原基础上减少1的个数</li>
<li>判断子网和超网：根据网络类型划分判断子网掩码中1的个数添加了还是减少了</li>
</ul>
<p>路由</p>
<ul>
<li>在不同网段之间转发数据，需要有路由器的支持</li>
<li>默认情况下，路由器只知道和它直连的网段，非直连的网段需要通过静态路由、动态路由获取</li>
<li>静态路由：管理员手动添加，只适用于小规模网络，网络和子网掩码配置为目标ip的网段，可以全设置为0表示全网段，下一跳表示访问的路由器地址</li>
<li>动态路由：通过路由选择协议(RIP、OSPF)自动获取，适用于大规模网络</li>
</ul>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Node使用及其管理</title>
    <url>/2020/node/</url>
    <content><![CDATA[<h2 id="nvm-安装"><a href="#nvm-安装" class="headerlink" title="nvm 安装"></a>nvm 安装</h2><p><code>wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</code></p>
<h2 id="nvm配置源"><a href="#nvm配置源" class="headerlink" title="nvm配置源"></a>nvm配置源</h2><p><code>sudo find / -name nvm.sh</code> - 找到nvm.sh文件的位置。通常在 <code>~/nvm/nvm.sh</code> 下</p>
<p>找到 <code>NVM_NODEJS_ORG_MIRROR</code> 将后面的地址改为<code>https://npm.taobao.org/mirrors/node/</code></p>
<h2 id="nvm管理版本"><a href="#nvm管理版本" class="headerlink" title="nvm管理版本"></a>nvm管理版本</h2><p><code>nvm list</code> - 查看本地安装的所有版本</p>
<p><code>nvm install 11.0.0</code> - 安装指定版本node</p>
<p><code>nvm install stable</code> - 安装最新稳定版</p>
<p><code>nvm use 11.0.0</code> - 切换版本</p>
<p><code>nvm alias default 11.0.0</code> - 设置默认版本</p>
<p><code>nvm uninstall 11.0.0</code> - 卸载指定版本</p>
<p><code>nvm on</code> - 开启版本切换</p>
<p><code>nvm off</code> - 关闭版本切换</p>
<p><code>node -v</code> - 查看当前版本</p>
<h2 id="npm使用"><a href="#npm使用" class="headerlink" title="npm使用"></a>npm使用</h2><p><code>npm config set registry http://registry.npm.taobao.org</code> - 设置镜像地址为淘宝</p>
<p><code>npm config get registry</code> - 查看镜像地址</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>OAuth2.0认证</title>
    <url>/2022/oauth2/</url>
    <content><![CDATA[<h2 id="OAuth介绍"><a href="#OAuth介绍" class="headerlink" title="OAuth介绍"></a>OAuth介绍</h2><p><a href="https://datatracker.ietf.org/doc/html/rfc6749">OAuth2.0官方文档</a></p>
<ul>
<li>Open Standard Authorization (OAuth)</li>
<li>OAuth是一个网络开放协议。为保证用户资源的安全授权提供了简易的标准</li>
</ul>
<p>特点：</p>
<ul>
<li>简单：不管是OAUTH服务提供者还是应用开发者，都很易于理解与使用</li>
<li>安全：没有涉及到用户密钥等信息，更安全更灵活</li>
<li>开放：任何服务提供商都可以实现OAUTH，任何软件开发商都可以使用OAuth</li>
</ul>
<h2 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h2><ul>
<li>2012年10月，OAuth 2.0协议正式发布为RFC 6749</li>
<li>OAuth协议的下一版本，但不向后兼容OAuth 1.0</li>
<li>OAuth 2.0关注客户端开发者的简易性，同时为Web应用，桌面应用和手机，和起居室设备提供专门的认证流程</li>
</ul>
<h2 id="OAuth2-0角色"><a href="#OAuth2-0角色" class="headerlink" title="OAuth2.0角色"></a>OAuth2.0角色</h2><p>resource owner: 资源所有者，指的是用户</p>
<p>resource server: 资源服务器，指的是应用服务器</p>
<p>client: 客户端，指的是应用</p>
<p>authorization server: 授权服务器，指的是应用服务器</p>
<h2 id="OAuth2-0流程"><a href="#OAuth2-0流程" class="headerlink" title="OAuth2.0流程"></a>OAuth2.0流程</h2><pre><code> +--------+                               +---------------+
 |        |--(A)- Authorization Request -&gt;|   Resource    |
 |        |                               |     Owner     |
 |        |&lt;-(B)-- Authorization Grant ---|               |
 |        |                               +---------------+
 |        |
 |        |                               +---------------+
 |        |--(C)-- Authorization Grant --&gt;| Authorization |
 | Client |                               |     Server    |
 |        |&lt;-(D)----- Access Token -------|               |
 |        |                               +---------------+
 |        |
 |        |                               +---------------+
 |        |--(E)----- Access Token ------&gt;|    Resource   |
 |        |                               |     Server    |
 |        |&lt;-(F)--- Protected Resource ---|               |
 +--------+                               +---------------+
</code></pre>
<p>A: 客户端向资源所有者请求授权。这授权请求可以直接向资源所有者提出，或者最好通过授权间接服务器作为中介</p>
<p>B: 客户端收到授权授权，这是一个代表资源所有者授权的凭证</p>
<p>C: 客户端通过身份验证请求访问令牌 授权服务器并提供授权许可</p>
<p>D: 授权服务器对客户端进行身份验证并验证授权，如果有效，则颁发访问令牌</p>
<p>E: 客户端向资源请求受保护的资源 服务器并通过提供访问令牌进行身份验证</p>
<p>F: 资源服务器验证访问令牌，如果有效，则提供资源</p>
<h2 id="OAuth2-0授权类型"><a href="#OAuth2-0授权类型" class="headerlink" title="OAuth2.0授权类型"></a>OAuth2.0授权类型</h2><ul>
<li>授权码（Authorization Code）</li>
<li>隐藏式（implicit）</li>
<li>密码式（password）</li>
<li>客户端凭证（client credentials）</li>
</ul>
<h3 id="授权码授权类型（Authorization-Code）"><a href="#授权码授权类型（Authorization-Code）" class="headerlink" title="授权码授权类型（Authorization Code）"></a>授权码授权类型（Authorization Code）</h3><p>第三方应用先申请一个授权码，再通过授权码获取访问令牌。适合有后端的应用，比如网站应用。</p>
<p>scope参数</p>
<p>步骤：</p>
<ol>
<li>A网站提供一个链接，链接中包含本网站的跳转地址、网站的身份（client_id或app_key），点击后跳转到B网站</li>
<li>B网站进行登陆，登陆成功后，跳转到A网站，并且在URL中携带一个授权码</li>
<li>A网站拿到授权码，在后端携带授权码来请求A网站的接口（携带授权码、appkey、secretkey）</li>
<li>B站收到请求，验证授权码，如果验证成功，则返回访问令牌，重刷令牌（access_token, refresh_token）</li>
</ol>
<p>通常请求格式为: <code>https://stolenzc.com/oauth/authorize?response_type=code&amp;appkey=appkey&amp;redirect_uri=redirect_uri&amp;scope=scope</code></p>
<ul>
<li>response_type: 授权类型，必须为code</li>
<li>appkey: 网站的身份，为应用在网站申请的appkey</li>
<li>redirect_uri: 申请成功后网站的回跳地址</li>
<li>scope: 网站的范围，可以为空，为空则表示全部范围，可以为多个范围，用逗号分隔</li>
</ul>
<p>响应格式: 在回跳地址中携带授权码，比如：<code>https://stolenzc.com/callback?code=1234567890</code></p>
<p>后台再请求令牌的格式: <code>https://stolenzc.com/oauth/token?appkey=appkey&amp;appsecret=appsecret&amp;grant_type=authorization_code&amp;code=code&amp;redirect_uri=redirect_uri</code></p>
<ul>
<li>grant_type: 授权类型，必须为authorization_code</li>
<li>appkey: 网站的身份，为应用在网站申请的appkey</li>
<li>appsecret: 网站的身份，为应用在网站申请的appsecret,appsecret为保密的，所以只能在后端请求</li>
<li>code: 授权码</li>
<li>redirect_uri: 验证成功后授权方带上token数据请求该uri地址传递token数据</li>
</ul>
<h3 id="隐藏式授权类型（implicit）"><a href="#隐藏式授权类型（implicit）" class="headerlink" title="隐藏式授权类型（implicit）"></a>隐藏式授权类型（implicit）</h3><p>第三方应用请求接口直接获取访问令牌。适合没有后端的应用，比如移动应用。</p>
<p>步骤：</p>
<ol>
<li>A网站提供一个链接，链接中包含本网站的跳转地址、网站的身份（client_id或app_key），点击后跳转到B网站</li>
<li>B网站进行登陆，登陆成功后，跳转到A网站，并且在URL中以锚点的形式携带一个访问令牌</li>
</ol>
<p>通常请求格式为: <code>https://stolenzc.com/oauth/authorize?response_type=token&amp;appkey=appkey&amp;redirect_uri=redirect_uri&amp;scope=scope</code></p>
<ul>
<li>response_type: 授权类型，必须为token</li>
<li>appkey: 网站的身份，为应用在网站申请的appkey</li>
<li>redirect_uri: 申请成功后网站的回跳地址</li>
<li>scope: 网站的范围，可以为空，为空则表示全部范围，可以为多个范围，用逗号分隔</li>
</ul>
<h3 id="密码式授权类型（password）"><a href="#密码式授权类型（password）" class="headerlink" title="密码式授权类型（password）"></a>密码式授权类型（password）</h3><p>第三方应用拿到用户账号密码，直接用账号密码获取令牌</p>
<ol>
<li>A网站要求用户提供账号和密码，拿到后A网站直接向B网站请求令牌</li>
<li>B网站验证密码后，直接返回令牌，不需要进行跳转</li>
</ol>
<p>请求令牌的格式: <code>https://stolenzc.com/oauth/token?appkey=appkey&amp;grant_type=password&amp;username=username&amp;password=password</code></p>
<ul>
<li>grant_type: 授权类型，必须为password</li>
<li>appkey: 网站的身份，为应用在网站申请的appkey</li>
<li>username: 用户名</li>
<li>password: 密码</li>
</ul>
<h3 id="凭证式授权类型（client-credentials）"><a href="#凭证式授权类型（client-credentials）" class="headerlink" title="凭证式授权类型（client credentials）"></a>凭证式授权类型（client credentials）</h3><p>凭证式适用于没有前端的命令行应用，通常是多个用户享用一个令牌，通常针对第三方应用，不是针对用户的。</p>
<ol>
<li>A应用在命令行向B应用发出接口请求，只需要携带appkey和secretkey即可</li>
<li>B应用验证通过后，直接返回令牌</li>
</ol>
<p>请求令牌的格式: <code>https://stolenzc.com/oauth/token?grant_type=client_credentials&amp;appkey=appkey&amp;secretkey=secretkey</code></p>
<ul>
<li>grant_type: 授权类型，必须为client_credentials</li>
<li>appkey: 网站的身份，为应用在网站申请的appkey</li>
<li>secretkey: 网站的身份，为应用在网站申请的appsecret</li>
</ul>
<h2 id="使用令牌和令牌过期"><a href="#使用令牌和令牌过期" class="headerlink" title="使用令牌和令牌过期"></a>使用令牌和令牌过期</h2><p>后续请求资源的时候，需要将令牌放在请求头中携带</p>
<p>通常在申请令牌的时候，会同时返回一个refresh_token，用来在token失效的时候，重新申请一个新的令牌。</p>
<p>重刷令牌的格式: <code>https://stolenzc.com/oauth/token?grant_type=refresh_token&amp;appkey=appkey&amp;secretkey=secretkey&amp;refresh_token=refresh_token</code></p>
<ul>
<li>grant_type: 授权类型，必须为refresh_token</li>
<li>appkey: 网站的身份，为应用在网站申请的appkey</li>
<li>secretkey: 网站的身份，为应用在网站申请的appsecret</li>
<li>refresh_token: 重刷令牌</li>
</ul>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP 526 -- 变量注解的语法</title>
    <url>/2023/pep-0526/</url>
    <content><![CDATA[<h2 id="Meta"><a href="#Meta" class="headerlink" title="Meta"></a>Meta</h2><ul>
<li>Python 版本：3.6</li>
<li>发布时间：2016-08-09</li>
<li>原文链接：<a href="https://peps.python.org/pep-0526/">PEP 526 - Syntax for Variable Annotations</a></li>
<li>翻译日期：2023-11-23</li>
<li>翻译作者：<a href="mailto:stolenzc@88.com">联系或纠错</a></li>
</ul>
<h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>本 PEP 已经被 Python 监管裁决者 (Guido) 临时性的通过了，更多通过的信息参阅 <a href="https://mail.python.org/pipermail/python-dev/2016-September/146282.html">https://mail.python.org/pipermail/python-dev/2016-September/146282.html</a></p>
<h2 id="读者注意"><a href="#读者注意" class="headerlink" title="读者注意"></a>读者注意</h2><p>这个 PEP 是在单独的仓库 <a href="https://github.com/phouse512/peps/tree/pep-0526">https://github.com/phouse512/peps/tree/pep-0526</a> 中起草的。</p>
<p>这个想法的初步的讨论在 <a href="https://github.com/python/typing/issues/258">https://github.com/python/typing/issues/258</a></p>
<p>在公开的论坛上提出异议之前，请至少先阅读一个这个 PEP 文末的关于被拒绝想法的部分。</p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p><a href="https://peps.python.org/pep-0484/">PEP 484</a> 引入了类型提示，也称为类型注解。虽然它重点聚焦于函数的注解，但它也引入了通过类型注释来注解变量的概念：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &#x27;primes&#x27; 是一个列表，其中的元素都是整数</span></span><br><span class="line">primes = []  <span class="comment"># type: <span class="type">List</span>[<span class="built_in">int</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;captain&#x27; 是一个字符串 (注意：初始化变量是错误的)</span></span><br><span class="line">captain = ...  <span class="comment"># type: <span class="built_in">str</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Starship</span>:</span><br><span class="line">    <span class="comment"># &#x27;stats&#x27; 是一个类变量</span></span><br><span class="line">    stats = &#123;&#125;  <span class="comment"># type: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]</span></span><br></pre></td></tr></table></figure>

<p>这个 PEP 的目标是添加一个对 Python 变量 (也包括类变量和实例变量) 注解的语法来替代通过注释表达式注释。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">primes: <span class="type">List</span>[<span class="built_in">int</span>] = []</span><br><span class="line"></span><br><span class="line">captain: <span class="built_in">str</span>  <span class="comment"># 注意：没有初始化值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Starship</span>:</span><br><span class="line">    stats: ClassVar[<span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]] = &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://peps.python.org/pep-0484/">PEP 484</a> 明确指出类型注释旨在帮助在复杂的情况下进行类型推断，并且此 PEP 也不会改变此意图。然而，由于类型注释在实际中也被采用在类变量和实例变量上，因此这个 PEP 也会讨论这些变量的类型注解。</p>
<h2 id="理由说明"><a href="#理由说明" class="headerlink" title="理由说明"></a>理由说明</h2><p>尽管类型注释当前工作的很好，但实际上通过注释来传递类型信息有一些缺点：</p>
<ul>
<li><p>文本编辑器通常将类型注解和注释以不同的方式进行高亮。</p>
</li>
<li><p>没有办法对未定义的变量进行类型的注解。一种方法是需要将其初始化为 <code>None</code> (例如： <code>a = None # type: int</code>) 。</p>
</li>
<li><p>在条件分支中对变量的注解阅读很困难：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> some_value:</span><br><span class="line">    my_var = function() <span class="comment"># type: Logger</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    my_var = another_function() <span class="comment"># 为什么这儿没有类型</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>由于类型注释不是语言真实的一部分，如果 Python 脚本想要解析他们，就需要自定义的解析器来代替单一使用 <code>AST</code> 。</p>
</li>
<li><p>类型注释在 typeshed (译者注：Python标准库和Python内置程序的外部类型注释) 中被大量使用，使用变量注解语法来代替类型注释进行迁移将会提高存根的可读性。</p>
</li>
<li><p>在普通注释和类型注释一起使用的情况下，很难区分它们：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path = <span class="literal">None</span>  <span class="comment"># type: <span class="type">Optional</span>[<span class="built_in">str</span>]  # 模块的路径</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>除了尝试查找模块的源代码并在运行时解析它之外，不可能在运行时检索注释，至少可以说，这是不优雅的。</p>
</li>
</ul>
<h3 id="不是的理由"><a href="#不是的理由" class="headerlink" title="不是的理由"></a>不是的理由</h3><p>虽然提案在标准库中携带了 <code>typing.get_type_hints</code> 函数用来在运行时获取注解的函数，但变量注解并不是为运行时类型检查而设计的。第三方包应该为单独开发来实现该功能。</p>
<p>还应该强调的是，<strong>Python仍然是一个动态类型语言，即使按照惯例，作者也没有将类型提示作为强制的打算</strong>。类型注解不应该与静态类型语言的变量声明引起混淆。注解语法的目的是用简单的方式为三方攻击指定结构化元数据。</p>
<p>本 PEP 并不要求类型检查器修改他们的检查规则。它只是提供了一种更易读的语法来替换类型注释。</p>
<h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p>类型注解可以被添加到赋值表达式中或者单独对变量作注解来被第三方类型检查器使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_var: <span class="built_in">int</span></span><br><span class="line">my_var = <span class="number">5</span>  <span class="comment"># 类型检查通过</span></span><br><span class="line">other_var: <span class="built_in">int</span> = <span class="string">&#x27;a&#x27;</span>  <span class="comment"># 会被类型检查器标记为错误，但是运行时不会报错</span></span><br></pre></td></tr></table></figure>

<p>这个语法在 PEP 484 之外没有引入新的语法，所以以下三个表达式是等价的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var = value  <span class="comment"># type: annotation</span></span><br><span class="line">var: annotation; var = value</span><br><span class="line">var: annotation = value</span><br></pre></td></tr></table></figure>

<p>下面我们具体来说说类型注解的语法在不同的上下文以及运行时的影响。</p>
<p>我们依然建议类型检查器能够解释注解，但是是否遵循这些注解不是强制的 (这与 PEP 484 中的建议是一致的) 。</p>
<h3 id="全局变量和局部变量的注解"><a href="#全局变量和局部变量的注解" class="headerlink" title="全局变量和局部变量的注解"></a>全局变量和局部变量的注解</h3><p>全局变量和局部变量的类型注解可以通过以下方式进行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">some_number: <span class="built_in">int</span>           <span class="comment"># 变量没有初始值</span></span><br><span class="line">some_list: <span class="type">List</span>[<span class="built_in">int</span>] = []  <span class="comment"># 变量有初始值</span></span><br></pre></td></tr></table></figure>

<p>允许没有初始值对变量做类型注解能够在条件分支中更容易使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sane_world: <span class="built_in">bool</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">2</span> + <span class="number">2</span> == <span class="number">4</span>:</span><br><span class="line">    sane_world = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sane_world = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>请注意，尽管允许元组打包的语法，但不允许在元组解包时对变量的类型做注解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 带有变量注解的元组打包语法</span></span><br><span class="line">t: <span class="type">Tuple</span>[<span class="built_in">int</span>, ...] = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">t: <span class="type">Tuple</span>[<span class="built_in">int</span>, ...] = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>  <span class="comment"># 这个语法在 Python3.8+ 的版本才支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带有变量注解的元组解包语法</span></span><br><span class="line">header: <span class="built_in">str</span></span><br><span class="line">kind: <span class="built_in">int</span></span><br><span class="line">body: <span class="type">Optional</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span><br><span class="line">header, kind, body = message</span><br></pre></td></tr></table></figure>

<p>省略初始值会导致变量未初始化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a: <span class="built_in">int</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 会报出 NameError 错误</span></span><br></pre></td></tr></table></figure>

<p>然而，对局部变量做注解将会导致解释器始终将其作为局部变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    a: <span class="built_in">int</span></span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 会报出 UnboundLocalError 错误</span></span><br><span class="line">    <span class="comment"># 如果将 a:int 注释掉，那么会报出 NameError 错误</span></span><br></pre></td></tr></table></figure>

<p>同如下的代码一样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">        a = <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 会报出 UnboundLocalError 错误</span></span><br></pre></td></tr></table></figure>

<p>虽然重复的类型注解会被忽略。但是静态类型检查器可能会对同一个变量的不痛类型注解报出警告：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a: <span class="built_in">int</span></span><br><span class="line">a: <span class="built_in">str</span>  <span class="comment"># 静态检查器可能会报出警告</span></span><br></pre></td></tr></table></figure>

<h3 id="类变量和实例变量的注解"><a href="#类变量和实例变量的注解" class="headerlink" title="类变量和实例变量的注解"></a>类变量和实例变量的注解</h3><p>类型注解同样可以被用在类层级或类方法中的类变量或实例变量中。特别是，没有值的标记 <code>a: int</code> 允许注解在 <code>__init__</code> 或 <code>__new__</code> 中初始化的实例变量。推荐的语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BasicStarship</span>:</span><br><span class="line">    captain: <span class="built_in">str</span> = <span class="string">&#x27;Picard&#x27;</span>  <span class="comment"># 带默认值的实例变量</span></span><br><span class="line">    damage: <span class="built_in">int</span>  <span class="comment"># 没有默认值的实例变量</span></span><br><span class="line">    stats: ClassVar[<span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]] = &#123;&#125;  <span class="comment"># 类变量</span></span><br></pre></td></tr></table></figure>

<p>这儿的 <code>ClassVar</code> 是一个在 <code>typing</code> 模块中定义的特殊的类，用来向静态类型检查器标识这个变量不应该在实例中被设置。</p>
<p>请注意，无论嵌套级别如何， <code>ClassVar</code> 都不能包含任何类型变量：如果 T 是一个类型变量，那么 <code>ClassVar[T]</code> 和 <code>ClassVar[List[T]]</code> 都是不合法的。</p>
<p>这需要用更多的例子来说明，在下面这个类中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Starship</span>:</span><br><span class="line">    captain = <span class="string">&#x27;Picard&#x27;</span></span><br><span class="line">    stats = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, damage, captain=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.damage = damage</span><br><span class="line">        <span class="keyword">if</span> captain:</span><br><span class="line">            <span class="variable language_">self</span>.captain = captain  <span class="comment"># 否则保持默认</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hit</span>(<span class="params">self</span>):</span><br><span class="line">        Starship.stats[<span class="string">&#x27;hits&#x27;</span>] = Starship.stats.get(<span class="string">&#x27;hits&#x27;</span>, <span class="number">0</span>) + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><code>stats</code> 旨在作为一个类变量 (跟踪许多不同比赛的统计数据) ，而 <code>captain</code> 是一个实例变量，在类中设置了默认值。这种差异可能不会被类型检查器发现，因为它们都在类中进行了初始化，但 <code>captain</code> 仅仅被用作实例变量的默认值，而 <code>stats</code> 是一个真正的类变量，它在所有的实例中被共享。</p>
<p>由于两个类型都恰好在类中被初始化，使用被 <code>ClassVar[...]</code> 包裹的类型注解来标记它们对于区分类变量和实例变量是很有用。在这种情况下，类型检查器可以对在实例中相同名称的变量意外赋值做出标记。</p>
<p>例如，对前面所讨论的类做注解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Starship</span>:</span><br><span class="line">    captain: <span class="built_in">str</span> = <span class="string">&#x27;Picard&#x27;</span></span><br><span class="line">    damage: <span class="built_in">int</span></span><br><span class="line">    stats: ClassVar[<span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, damage: <span class="built_in">int</span>, captain: <span class="built_in">str</span> = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.damage = damage</span><br><span class="line">        <span class="keyword">if</span> captain:</span><br><span class="line">            <span class="variable language_">self</span>.captain = captain  <span class="comment"># 否则用默认值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hit</span>(<span class="params">self</span>):</span><br><span class="line">        Starship.stats[<span class="string">&#x27;hits&#x27;</span>] = Starship.stats.get(<span class="string">&#x27;hits&#x27;</span>, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">enterprise_d = Starship(<span class="number">3000</span>)</span><br><span class="line">enterprise_d.stats = &#123;&#125; <span class="comment"># 类型检查器会在这儿标记一个错误</span></span><br><span class="line">Starship.stats = &#123;&#125; <span class="comment"># 这样是合法的</span></span><br></pre></td></tr></table></figure>

<p>为了方便 (和约定) ，实例变量可以在 <code>__init__</code> 或其他方法中做注解，而不是在类中做注解。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Generic</span>, TypeVar</span><br><span class="line">T = TypeVar(<span class="string">&#x27;T&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>(<span class="type">Generic</span>[T]):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, content</span>):</span><br><span class="line">        <span class="variable language_">self</span>.content: T = content</span><br></pre></td></tr></table></figure>

<h3 id="注解表达式"><a href="#注解表达式" class="headerlink" title="注解表达式"></a>注解表达式</h3><p>注解的目标可以是任何有效的单一赋值目标，至少语法上是如此的。 (取决与类型检查器如何处理)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cls</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">c = Cls()</span><br><span class="line">c.x: <span class="built_in">int</span> = <span class="number">0</span>  <span class="comment"># 将 c.x 注解为 int</span></span><br><span class="line">c.y: <span class="built_in">int</span>      <span class="comment"># 将 c.y 注解为 int</span></span><br><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line">d[<span class="string">&quot;a&quot;</span>]: <span class="built_in">int</span> = <span class="number">0</span>  <span class="comment"># 将 d[&quot;a&quot;] 注解为 int</span></span><br><span class="line">d[<span class="string">&quot;b&quot;</span>]: <span class="built_in">int</span>      <span class="comment"># 将 d[&quot;b&quot;] 注解为 int</span></span><br></pre></td></tr></table></figure>

<p>注意，即使是带括号的名称也被视为表达式，而不是简单的名称：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(x): <span class="built_in">int</span>      <span class="comment"># 将 x 注解为 int，但是 (x) 会被编译器视为表达式</span></span><br><span class="line">(y): <span class="built_in">int</span> = <span class="number">0</span>  <span class="comment"># 同上</span></span><br></pre></td></tr></table></figure>

<h3 id="不允许注解的地方"><a href="#不允许注解的地方" class="headerlink" title="不允许注解的地方"></a>不允许注解的地方</h3><p>尝试在同一函数作用域中对 <code>global</code> 或 <code>nonlocal</code> 变量做注解都是不允许的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">global</span> x: <span class="built_in">int</span>  <span class="comment"># SyntaxError</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>():</span><br><span class="line">    x: <span class="built_in">int</span>  <span class="comment"># 同样也会报 SyntaxError</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br></pre></td></tr></table></figure>

<p>原因是 <code>global</code> 和 <code>nonlocal</code> 不是他们自己的变量，因此，类型注解属于拥有变量的作用域。</p>
<p>只有单个赋值目标和单个右侧的值被允许。此外，注解不能在 <code>for</code> 或 <code>with</code> 中声明的变量，他们可以提前进行注解，类似于元组解包：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a: <span class="built_in">int</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> my_iter:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">f: MyFile</span><br><span class="line"><span class="keyword">with</span> myfunc() <span class="keyword">as</span> f:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h3 id="在存根文件-stub-file-中的变量注解"><a href="#在存根文件-stub-file-中的变量注解" class="headerlink" title="在存根文件 (stub file) 中的变量注解"></a>在存根文件 (stub file) 中的变量注解</h3><p>由于变量注解比类型注释可读性更好，所以在存根文件中的方式对所有 Python 版本都是首选的 (包括 Python2.7 ) 。注意，存根文件不会被 Python 解释器执行，因此使用变量注解不会导致错误。类型检查器应该支持所有 Python 的版本在存根文件中的变量注解。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># file lib.pyi</span></span><br><span class="line">ADDRESS: unicode = ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Error</span>:</span><br><span class="line">    cause: <span class="type">Union</span>[<span class="built_in">str</span>, unicode]</span><br></pre></td></tr></table></figure>

<h3 id="首选的代码注解风格"><a href="#首选的代码注解风格" class="headerlink" title="首选的代码注解风格"></a>首选的代码注解风格</h3><p>对模块层级的变量、类和实例变量、局部变量的注解应该在冒号后面有一个空格。在冒号前面没有空格。如果存在右侧的赋值，那么等号的两边都应该有一个空格。例如：</p>
<ul>
<li><p>正确的风格</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">code: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    coords: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]</span><br><span class="line">    label: <span class="built_in">str</span> = <span class="string">&#x27;&lt;unknown&gt;`</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>错误的风格</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">code:<span class="built_in">int</span>  <span class="comment"># 冒号后面没有空格</span></span><br><span class="line">code : <span class="built_in">int</span>  <span class="comment"># 冒号前面有空格</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    result <span class="built_in">int</span>=<span class="number">0</span>  <span class="comment"># 等号两边没有空格</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="标准库和文档的修改"><a href="#标准库和文档的修改" class="headerlink" title="标准库和文档的修改"></a>标准库和文档的修改</h2><ul>
<li>在 <code>typing</code> 模块中添加了一个新的的协作类型 <code>ClassVar[T_co]</code> 。它只接收一个应该是有效类型的参数。并用来注解不应该被设置为类实例的类变量。这是通过静态检查器来限制的，而不是运行时来限制。查阅 <a href="https://peps.python.org/pep-0526/#classvar">classvar</a> (译者注：本 PEP 的其他位置) 部分了解关于 <code>ClassVar</code> 的示例与说明，并可以查看 <a href="https://peps.python.org/pep-0526/#pep-526-rejected">rejected</a> 部分了解到 <code>ClassVar</code> 背后的更多原因。</li>
<li><code>typing</code> 模块中的 <code>get_type_hints</code> 函数将被扩展，以便能够像函数一样在运行时获取到模块或类的类型注解。注解将会通过变量或参数与类型提示所组成的有序映射的形式返回，并评估向前引用。在类中将会返回一个在方法解析顺序 (MRO) 中构建注解的映射 (也可能是 <code>collections.ChainMap</code> ) 。</li>
<li>使用注解的推荐指南将被添加进文档中，包括本 PEP 以及 <a href="https://peps.python.org/pep-0484/">PEP 484</a> 中明确描述的教学概述。此外，用来将类型注释翻译为类型注解的脚本将会在发布后与标准库分开。</li>
</ul>
<h2 id="类型注解在运行时的效果"><a href="#类型注解在运行时的效果" class="headerlink" title="类型注解在运行时的效果"></a>类型注解在运行时的效果</h2><p>在对局部变量进行注解时，解释器会认为变量是一个局部变量，即使还没有进行赋值。局部变量的注解不会进行求值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    x: NonexistentName  <span class="comment"># No error.</span></span><br></pre></td></tr></table></figure>

<p>但是，如果是模块或类层级的变量就会进行类型求值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x: NonexistentName  <span class="comment"># Error!</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>:</span><br><span class="line">    var: NonexistentName  <span class="comment"># Error!</span></span><br></pre></td></tr></table></figure>

<p>此外，在模块或类的层级下，如果被当做注解的对象是一个简单的名称，那么会将名称与注解以有序映射的形式存储到模块或类（非私有）中的 <code>__annotations__</code> 属性中。如下示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>:</span><br><span class="line">    ...</span><br><span class="line">players: <span class="type">Dict</span>[<span class="built_in">str</span>, Player]</span><br><span class="line">__points: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(__annotations__)</span><br><span class="line"><span class="comment"># prints: &#123;&#x27;players&#x27;: typing.Dict[str, __main__.Player],</span></span><br><span class="line"><span class="comment">#          &#x27;_Player__points&#x27;: &lt;class &#x27;int&#x27;&gt;&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>__annotations__</code> 是可写的，所以以下代码是允许的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__annotations__[<span class="string">&#x27;s&#x27;</span>] = <span class="built_in">str</span></span><br></pre></td></tr></table></figure>

<p>但尝试将 <code>__annotations__</code> 更新为有序映射之外的其他类型，就会得到一个 TypeError</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    __annotations__ = <span class="number">42</span></span><br><span class="line">    x: <span class="built_in">int</span> = <span class="number">5</span>  <span class="comment"># raises TypeError</span></span><br></pre></td></tr></table></figure>

<p>（请注意，对 &#96;&#96;<strong>annotations</strong>&#96; 的赋值是罪魁祸首，Python 解释器会毫无疑问地接受它，但后续的类型注释期望它是 MutableMapping 并且会失败。）</p>
<p>在运行时获取注解的推荐方式是使用 <code>typing.get_type_hints</code> 方法；和所有双下划线的属性一样，任何未注明的 <code>__annotations__</code> 使用都可能在没有警告的情况下被破坏。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, ClassVar, get_type_hints</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Starship</span>:</span><br><span class="line">    hitpoints: <span class="built_in">int</span> = <span class="number">50</span></span><br><span class="line">    stats: ClassVar[<span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]] = &#123;&#125;</span><br><span class="line">    shield: <span class="built_in">int</span> = <span class="number">100</span></span><br><span class="line">    captain: <span class="built_in">str</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, captain: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> get_type_hints(Starship) == &#123;<span class="string">&#x27;hitpoints&#x27;</span>: <span class="built_in">int</span>,</span><br><span class="line">                                    <span class="string">&#x27;stats&#x27;</span>: ClassVar[<span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]],</span><br><span class="line">                                    <span class="string">&#x27;shield&#x27;</span>: <span class="built_in">int</span>,</span><br><span class="line">                                    <span class="string">&#x27;captain&#x27;</span>: <span class="built_in">str</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> get_type_hints(Starship.__init__) == &#123;<span class="string">&#x27;captain&#x27;</span>: <span class="built_in">str</span>,</span><br><span class="line">                                             <span class="string">&#x27;return&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，如果无法在静态环境中找到注解，那么 <code>__annotations__</code> 字典将不会被创建。此外，将注解可用于局部环境的价值并不能抵消在每次函数调用时都必须创建和填充注解字典的成本。因此，函数级别的注解不会被求值或存储。</p>
<h3 id="注解的其他用途"><a href="#注解的其他用途" class="headerlink" title="注解的其他用途"></a>注解的其他用途</h3><p>使用这个 PEP 的 Python 将不会反对：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alice: <span class="string">&#x27;well done&#x27;</span> = <span class="string">&#x27;A+&#x27;</span></span><br><span class="line">bob: <span class="string">&#x27;what a shame&#x27;</span> = <span class="string">&#x27;F-&#x27;</span></span><br></pre></td></tr></table></figure>

<p>所以它将不会关心类型注解之外会引起报错的求值，类型检查器遇到时会将其标记，除非使用 <code># type: ignore</code> 或者 <code>@no_type_check</code> 来禁用。</p>
<p>然而，由于 Python 不关心类型是什么，所以上述代码片段如果存在于全局模块或类层级中。那么 <code>__annotations__</code> 中将会存在 <code>&#123;&#39;alice&#39;: &#39;well done&#39;, &#39;bob&#39;: &#39;what a shame&#39;&#125;</code> 的键值对。</p>
<p>将这些注解存储起来也能用于其他的目的，但通过这个 PEP ，我们明确的建议将类型注解作为首选用途。</p>
<h2 id="拒绝-推迟的提案"><a href="#拒绝-推迟的提案" class="headerlink" title="拒绝&#x2F;推迟的提案"></a>拒绝&#x2F;推迟的提案</h2><ul>
<li><p>我们到底该不该引入变量注释？在 PEP 484 的批准下，变量注释已经以类型注释的形式存在近两年了。他们被第三方类型检查器 (mypy，pytype，pycharm 等) 和使用类型检查的项目大量的使用。然而，使用注释语法有很多如理由说明中的缺点。本 PEP 并不涉及是否需要类型注解，而是关于此类类型注解的语法应该是怎样的</p>
</li>
<li><p>引入一个新关键字：选择一个好的关键字非常难，例如，不能使用 <code>var</code> 因为这是一个太常见的变量名；如果我们想把它用作类变量或全局变量，就不能使用 <code>local</code> 。其次无论我们选择什么，我们都需要 <code>__future__</code> 来导入</p>
</li>
<li><p>使用 <code>def</code> 作为关键字：这个提案将会是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">primes</span>: <span class="type">List</span>[<span class="built_in">int</span>] = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">captain</span>: <span class="built_in">str</span></span><br></pre></td></tr></table></figure>

<p>问题在于对于一些长久的 Python 程序员 (或工具) 来说， <code>def</code> 的含义是定义一个函数，并且这也不能让变量的定义变得更明确 (尽管这是很主观的)</p>
</li>
<li><p>使用基于函数的语法：建议使用 <code>var = cast(annotation[, value])</code> 来对变量的类型做注解。尽管这个语法缓解了一些类型注释中的问题，如，AST 中没有注释，但它没有解决其他例如可读性和运行时可能导致开销的问题。</p>
</li>
<li><p>允许元组解包使用注解：这将会导致歧义，不清楚这个声明的含义：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, y: T</span><br></pre></td></tr></table></figure>

<p>到底是 <code>x</code> 和 <code>y</code> 的类型都是 <code>T</code> ，还是我们预期 <code>T</code> 是 元组的两个元素的类型饭后分配给 <code>x</code> 和 <code>y</code> ，也可能 <code>x</code> 的类型是 <code>Any</code> ，而 <code>y</code> 的类型是 <code>T</code> (如何在函数的签名中出现了，则后者意味着什么) 。我们禁止这个做法而不是让读者来猜测，至少现在是这样。</p>
</li>
<li><p>用括号的形式注解 <code>(var: type)</code> ：它作为前面提到关于歧义的补救措施在 python-ideas 上被提出，它被拒绝的原因是这种语法会很麻烦，好处很小，并且可读性会变得更低。</p>
</li>
<li><p>允许在链式赋值中进行注解：它和元组解包一样会导致歧义和可读性的问题。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x: <span class="built_in">int</span> = y = <span class="number">1</span></span><br><span class="line">z = w: <span class="built_in">int</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><code>y</code> 和 <code>z</code> 的类型到底是什么这是不明确的，而且第二行语法解析也会很麻烦。</p>
</li>
<li><p>允许在 <code>with</code> 和 <code>for</code> 声明中进行注解：这被拒绝了，因为在 <code>for</code> 中会很难发现实际的可迭代对象，而在 <code>with</code> 中，会与 Cpython 中的 LL(1) 解析器混淆。</p>
</li>
<li><p>在函数定义时计算本地注解：这一点被 Guido 拒绝了，因为注解的位置强烈表明它与周围代码处于相同的范围内。</p>
</li>
<li><p>在函数作用域内存储变量的注解：在本地提供注释的价值不足以大幅抵消每次函数调用时创建和填充字典的成本。</p>
</li>
<li><p>不带赋值的对变量进行初始化：这是在 python-ideas 中提出的，使用 <code>x: int</code> 来将 <code>x</code> 初始化为 <code>None</code> 或者额外添加一个例如 JavaScript 中的 <code>undefined</code> 的特殊常量。然后，在语言中额外添加一个单例值需要在代码的其他任何地方进行值的检测。所以，Guido 对这个提案直接说 No 了。</p>
</li>
<li><p>在 typing 模块中添加一个 <code>InstanceVar</code> ：这是一个多余的，因为实例变量比类变量更常见，更常见的用法理应成为默认的用法。</p>
</li>
<li><p>允许仅在方法中对实例变量做注解：它的问题在于，许多 <code>__init__</code> 方法在初始化实例变量之外还会做很多其他的事情，这会让读者很难找到所有的实例变量的注解。 有时，<code>__init__</code> 会被加入到更多辅助的方法中，这会让找到它们更难了。在类中将实例变量的注解放在一起，可以帮助第一次阅读代码的人更快速的找到他们。</p>
</li>
<li><p>对类变量使用 <code>x: class t = v</code> 的语法：这将会依赖更复杂的解析器，并且也会让简单的语法高亮器对 <code>class</code> 这个关键字困惑。无论如何，我们都需要使用 <code>ClassVar</code> 来将类变量存储到 <code>__annotations__</code> ，所以我们选择了更简单的语法。</p>
</li>
<li><p>完全不用 <code>ClassVar</code> ：这是因为 mypy 似乎在不区分类变量和实例变量下没有办法很好的工作。但类型检查器可以通过额外的信息做一些有用的事情，例如通过实例对类变量错误的赋值的提醒 (或者创建一个实例变量附带掉类变量) 。它还可以标记具有可变默认值的实例变量，这是一个众所周知的危险行为。</p>
</li>
<li><p>使用 <code>ClassAttr</code> 来代替 <code>ClassVar</code> ：为什么 <code>ClassVar</code> 更好的主要原因是：许多东西都是类属性，例如方法、描述器等。但从概念上来说，只有特定的属性才是类变量 (也可能是常量) 。</p>
</li>
<li><p>不要对注解求结果，把它们当做字符串：这将与函数的注解始终会被求值的语法相冲突。虽然将来可能会重新考虑这个提议，但 PEP 484 已经将其作为一个单独的 PEP。</p>
</li>
<li><p>在类的文档中对变量类型进行注解： 许多项目已经使用了各种文档格式约定，但往往缺乏一致性，而且一般还不符合 PEP 484 注释语法。此外，这还需要一个特别复杂的解析器。这反过来又违背了 PEP 的目的–与第三方类型检查工具合作。</p>
</li>
<li><p>将 <code>__annotations__</code> 实现为一个描述器：提出该建议是为了禁止将 <code>__annotations__</code> 设置为空字典或者为 None。Guido 拒绝了这个提议，认为没有必要；相反如果当 <code>__annotations__</code> 不是一个映射的时候，对其更新值将会抛出一个 TypeError 异常。</p>
</li>
<li><p>以同样的方式对 global 或 nonlocal 做裸注解：被拒绝的提案更倾向于在函数体中出现不带赋值的注解时不进行任何评价。相比之下，PEP 暗示如果目标注解比单个名称更复杂，则应该在函数体内对其左边部分进行求值，以确保注解已被定义。例如，在本例中：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self</span>):</span><br><span class="line">    slef.name: <span class="built_in">str</span></span><br></pre></td></tr></table></figure>

<p>  <code>slef</code> 应该被求值，这样如果它未被定义 (本例中很可能会出现这个情况) ，错误就会在运行时发现。这与在此进行初始化值的情况更相似，因此有望能减少意外的发生。 (同样需要注意的是如果检测的目标是 <code>self.name</code> (拼写正确的情况) ，优化编译器只要能证明 <code>self</code> 肯定会被定义，就没有义务评估 <code>self</code>)</p>
</li>
</ul>
<h2 id="向后兼容性"><a href="#向后兼容性" class="headerlink" title="向后兼容性"></a>向后兼容性</h2><p>此 PEP 完全向后兼容</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>在 Python 3.6 中的实现可以在 <a href="https://github.com/ilevkivskyi/cpython/tree/pep-526">https://github.com/ilevkivskyi/cpython/tree/pep-526</a> (译者注：该文件已无法被找到) 这个 GitHub 仓库中找到。</p>
<h2 id="版权"><a href="#版权" class="headerlink" title="版权"></a>版权</h2><p>本文档已置于公共领域。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>翻译</tag>
        <tag>PEP</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP 593 -- 函数或变量更灵活的注释方法</title>
    <url>/2023/pep-0593/</url>
    <content><![CDATA[<h2 id="Meta"><a href="#Meta" class="headerlink" title="Meta"></a>Meta</h2><ul>
<li>Python 版本：3.9</li>
<li>发布时间：2019-04-26</li>
<li>原文链接：<a href="https://peps.python.org/pep-0593/">PEP 593 – Flexible function and variable annotations</a></li>
<li>翻译日期：2023-11-11</li>
<li>翻译作者：<a href="mailto:stolenzc@88.com">联系或纠错</a></li>
</ul>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>该 PEP 引入了一种机制，可以使用任意源数据用来扩展 <a href="https://peps.python.org/pep-0484/">PEP 484</a> 中的类型注释</p>
<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>PEP 484 为 <a href="https://peps.python.org/pep-3107/">PEP 3107</a> 提供了标准的类型注释语意介绍。PEP 484 是一个规范，但对于大多数使用注释的用户来说成为了一个实际的标准；在许多静态检查的代码库中，类型注释被广泛使用，它实际上排挤掉了一些其他的形式的注释。在 PEP 3107 中描述的一些注释的例子(数据库映射、外语桥接)，鉴于类型注释的通用性，目前还并不现实。此外，类型注释的标准化排除了一些特殊类型检查的高级功能。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>这个 PEP 在 <code>typing</code> 模块中添加了一个 <code>Annotated</code> 类型，以使用特定上下文元数据来装饰现有类型。具体来说，类型 <code>T</code> 可以通过类型注释 <code>Annotated[T, x]</code> 被元数据 <code>x</code> 进行装饰。这个元数据能够被用在其他的静态分析或者运行时分析中。如果在一个库(或工具)中遇到了类型注释 <code>Annotated[T, x]</code> ，但是又没有对元数据 <code>x</code> 进行特殊的逻辑处理，那么此处应该忽略它，单纯的被解释为类型 <code>T</code>。与当前 <code>typing</code> 模块中存在的 <code>no_type_check</code> 完全禁用函数或类的类型注释功能不同，<code>Annotated</code> 类型既允许对类型 <code>T</code> 进行静态检查(例如 mypy 或 Pyre 能够安全的忽略 <code>x</code> )，也允许在特定的应用中对元数据 <code>x</code> 进行运行时访问。这种类型的引入将解决更广泛的 Python 社区感兴趣的各种用例</p>
<p>这个问题最初是在 <a href="https://github.com/python/typing/issues/600">issue 600</a> 中被提出，然后在 Python ideas 中进行了讨论</p>
<h2 id="令人激动的例子"><a href="#令人激动的例子" class="headerlink" title="令人激动的例子"></a>令人激动的例子</h2><h3 id="使用注解结合运行时和静态分析"><a href="#使用注解结合运行时和静态分析" class="headerlink" title="使用注解结合运行时和静态分析"></a>使用注解结合运行时和静态分析</h3><p>库在运行时利用类型注释的趋势正在兴起(例如：数据类)；能够使用外部数据扩展类型注释对于这些库来说将是一个巨大的福音。</p>
<p>下面是一个如何借助类型注释来读取 c 结构体的虚拟模块的示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">UnsignedShort = Annotated[<span class="built_in">int</span>, struct2.ctype(<span class="string">&#x27;H&#x27;</span>)]</span><br><span class="line">SignedChar = Annotation[<span class="built_in">int</span>, struct2.ctype(<span class="string">&#x27;b&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(struct2.Packed):</span><br><span class="line">    <span class="comment"># mypy 静态检查 name 为 str 类型</span></span><br><span class="line">    name: Annotated[<span class="built_in">str</span>, struct2.ctype(<span class="string">&quot;&lt;10s&quot;</span>)]</span><br><span class="line">    serialnum: UnsignedShort</span><br><span class="line">    school: SignedChar</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;unpack&#x27; 仅使用类型注释中的元数据</span></span><br><span class="line">Student.unpack(record)</span><br><span class="line"><span class="comment"># Student(name=b&#x27;raymond   &#x27;, serialnum=4658, school=264)</span></span><br></pre></td></tr></table></figure>

<h3 id="降低开发新类型结构的成本"><a href="#降低开发新类型结构的成本" class="headerlink" title="降低开发新类型结构的成本"></a>降低开发新类型结构的成本</h3><p>通常，在添加新类型时，开发者需要上传改类型到类型模块，并更改 mypy, Pycharm, Pyre, pytype 等，在处理这些类型的开源代码时，这一点尤为重要，如果没有额外的逻辑，这些无法立即传达给其他开发人员。因此在代码库中试图开发一个新类型的成本很高。理想情况下，作者应该能够允许以一种简单优雅的方式引入新的类型(例如：当客户端没有使用自定义的 mypy 插件时)，这将降低开发成本并确保向后兼容性。</p>
<p>例如，假设作者想要在 Python 中添加一个联合标记的支持，方法是在 Python 中注解 <code>TypeDict</code> ，使其只支持一个字段被设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Currency = Annotated[</span><br><span class="line">    TypedDict(<span class="string">&quot;Currency&quot;</span>, &#123;<span class="string">&#x27;dolars&#x27;</span>: <span class="built_in">float</span>, <span class="string">&#x27;pounds&#x27;</span>: <span class="built_in">float</span>&#125;, total=<span class="literal">False</span>),</span><br><span class="line">    TaggedUnion,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>这种语法有点繁琐，但它允许我们对对概念验证进行迭代，并让使用尚未支持该功能的类型检查库或工具的人员在带有标记联合的代码库中工作。作者能够轻松的进行测试该提案并在推送标记联合到 typing, mypy 等之前解决其中的问题。此外未支持 TaggedUnion 标记的的工具能过正常将 Currency 作为 TypedDict 进行处理，这仍然是个近似值(严格程度降低)。</p>
<h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>Annotated</code> 的参数爆火一个类型和一个代表注释的 Python 值的任意列表，下面是语法的具体细节：</p>
<ul>
<li><p><code>Annotated</code> 的第一个参数必须是一个有效的类型</p>
</li>
<li><p><code>Annotated</code> 支持多种类型注解(支持可变参数)： <code>Annotated[int, ValueRange(3, 10), ctype(&quot;char&quot;)]</code></p>
</li>
<li><p><code>Annotated</code> 至少需要两个参数才能调用( <code>Annotated[int]</code> 无效)</p>
</li>
<li><p>注释的顺序得到保留，并且相等性检查很严格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Annotated[<span class="built_in">int</span>, ValueRange(<span class="number">3</span>, <span class="number">10</span>), ctype(<span class="string">&quot;char&quot;</span>)] != Annotated[</span><br><span class="line">    <span class="built_in">int</span>, ctype(<span class="string">&quot;char&quot;</span>), ValueRange(<span class="number">3</span>, <span class="number">10</span>)]</span><br></pre></td></tr></table></figure>
</li>
<li><p>嵌套的 <code>Annotated</code> 会被扁平化，元数据从最内层开始排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Annotated[Annotated[<span class="built_in">int</span>, ValueRange(<span class="number">3</span>, <span class="number">10</span>)], ctype(<span class="string">&quot;char&quot;</span>)] == Annotated[</span><br><span class="line">    <span class="built_in">int</span>, ValueRange(<span class="number">3</span>, <span class="number">10</span>), ctype(<span class="string">&quot;char&quot;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>重复的批注不会被删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Annotated[<span class="built_in">int</span>, ValueRange(<span class="number">3</span>, <span class="number">10</span>), ValueRange(<span class="number">3</span>, <span class="number">10</span>)] == Annotated[</span><br><span class="line">    <span class="built_in">int</span>, ValueRange(<span class="number">3</span>, <span class="number">10</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Annotated</code> 可以与嵌套别名和通用别名一起使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Typevar T = ...</span><br><span class="line">Vec = Annotated[<span class="type">List</span>[<span class="type">Tuple</span>[T, T]], MaxLen(<span class="number">10</span>)]</span><br><span class="line">V = Vec[<span class="built_in">int</span>]</span><br><span class="line">V == Annotated[<span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]], MaxLen(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><p>归根结底，如何解释注释(如果存在)是由遇到的注释类型的工具或库的责任。一个工具或库可以在遇到注解类型时进行扫描注解来确定是否是值得关注的注解类型(例如：使用 <code>isinstance()</code> )。</p>
<p>未知注解：当工具或库遇到未知或不支持的注解时，应该选择忽略并将其注解类型视为基础类型，例如，在对 <code>Annotated[str, &#39;foo&#39;, struct2.ctype(&quot;&lt;10s&quot;)]</code> 所注解的 <code>name</code> 不是 <code>struct2.ctype</code> 的情况下，应该将其忽略并注解为 <code>str</code></p>
<p>命名空间注解：注释不需要命名空间，因为注释使用的类就是命名空间。</p>
<p>多个注解：由使用批注的工具决定是否允许客户端在一种类型上拥有多个批注以及如何合并这些批注。</p>
<p>由于 <code>Annotated</code> 类型运行你在任何节点放置多个相同或不同的类型，因此使用这些注释的工具或库负责处理潜在的重复项，例如，如果你正在进行值范围分析，你可以这样做</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">T1 = Annotated[<span class="built_in">int</span>, ValueRange(-<span class="number">10</span>, <span class="number">5</span>)]</span><br><span class="line">T2 = Annotated[T1, ValueRange(-<span class="number">20</span>, <span class="number">3</span>)]</span><br></pre></td></tr></table></figure>

<p>扁平化嵌套注解意味着</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">T2 = Annotated[<span class="built_in">int</span>, ValueRange(-<span class="number">10</span>, <span class="number">5</span>), ValueRange(-<span class="number">20</span>, <span class="number">3</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="与-get-type-hints-的交互"><a href="#与-get-type-hints-的交互" class="headerlink" title="与 get_type_hints() 的交互"></a>与 <code>get_type_hints()</code> 的交互</h3><p><code>typing.get_type_hints()</code> 将采用新的参数 <code>include_extras</code> 默认为 <code>False</code> 来保持向后兼容性，当 <code>include_extras</code> 值为 <code>False</code> 时，额外的返回值将从返回值中去除，否则，注释将原封不动的返回：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@strct2.packed</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">NamedTuple</span>):</span><br><span class="line">    name: Annotated[<span class="built_in">str</span>, struct2.ctype(<span class="string">&quot;&lt;10s&quot;</span>)]</span><br><span class="line"></span><br><span class="line">get_type_hints(Student) == &#123;<span class="string">&#x27;name&#x27;</span>: <span class="built_in">str</span>&#125;</span><br><span class="line">get_type_hints(Student, include_extras=<span class="literal">False</span>) == &#123;<span class="string">&#x27;name&#x27;</span>: <span class="built_in">str</span>&#125;</span><br><span class="line">get_type_hints(Student, include_extras=<span class="literal">True</span>) == &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: Annotated[<span class="built_in">str</span>, struct2.ctype(<span class="string">&quot;&lt;10s&quot;</span>)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="别名和对冗长的关注"><a href="#别名和对冗长的关注" class="headerlink" title="别名和对冗长的关注"></a>别名和对冗长的关注</h3><p>在多处频繁使用 <code>Annotated</code> 可能会很冗长；幸运的是，别名注解的能力意味着在实践中我们不期望用户编写大量样板代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">T = TypeVar(<span class="string">&#x27;T&#x27;</span>)</span><br><span class="line">Const = Annotated[T, my_annotations.Const]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">const_method</span>(<span class="params">self: Const[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<h2 id="被拒绝的提议"><a href="#被拒绝的提议" class="headerlink" title="被拒绝的提议"></a>被拒绝的提议</h2><p>在这个 PEP 中拒绝了一些提案想法，因为它们会导致 <code>Annotated</code> 无法与其他类型注解完全集成：</p>
<ul>
<li><code>Annotated</code> 无法推断修饰类型，你可以想象一下， <code>Annotated[..., Immutable]</code> 可以用来标记一个值为不可变的类型，同时还能推断出它的类型。类型定义不支持在其他地方使用推断类型；最好不要作为一个特例添加。</li>
<li>使用 <code>(Type, Ann1, Ann2, ...)</code> 来替代 <code>Annotated[Type, Ann1, Ann2, ...]</code> 。当注解中存在嵌套时，将会造成混乱，( <code>Callable[[A, B], C]</code> 与 <code>Callable[(A, B), C]</code> 过于相似)，并且使构造函数无法传递 ( <code>T(5) == C(5)</code> 当 <code>C = Annotation[T, Ann]</code> )。</li>
</ul>
<p>为了保持设计简单，下面这个功能被省略了：</p>
<ul>
<li><code>Annotated</code>不能使用单个参数调用，Annotated 可以支持在使用单个参数调用时返回基础值，(例如：<code>Annotated[int] == int</code> )。这使规格复杂化，并且几乎没有好处的增加。</li>
</ul>
<h2 id="版权"><a href="#版权" class="headerlink" title="版权"></a>版权</h2><p>本文已发布在公共网络上</p>
<h2 id="翻译注释"><a href="#翻译注释" class="headerlink" title="翻译注释"></a>翻译注释</h2><ul>
<li><code>de facto</code> - 事实上的</li>
<li><code>encounters</code> - 遇到\遭遇</li>
<li><code>leverage</code> - 利用\借助</li>
<li><code>hypothetical</code> - 假设的</li>
<li><code>degradation</code> - 退化\降解</li>
<li><code>graceful</code> - 优雅的</li>
<li><code>iron out the kinks</code> - 消除缺陷</li>
<li><code>preserve backward compatibility</code> - 保持向后兼容性</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>翻译</tag>
        <tag>PEP</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP 3107 -- 函数注解</title>
    <url>/2023/pep-3107/</url>
    <content><![CDATA[<h2 id="Meta"><a href="#Meta" class="headerlink" title="Meta"></a>Meta</h2><ul>
<li>Python 版本：3.0</li>
<li>发布时间：2006-12-02</li>
<li>原文链接：<a href="https://peps.python.org/pep-3107/">PEP 3107 – Function Annotations</a></li>
<li>翻译日期：2023-11-11</li>
<li>翻译作者：<a href="mailto:stolenzc@88.com">联系或纠错</a></li>
</ul>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>该 PEP 引入了一个为 Python 的函数 [<a href="#1">1</a>] (可调用对象)添加任意元数据注解的语法</p>
<h2 id="理由"><a href="#理由" class="headerlink" title="理由"></a>理由</h2><p>由于 Python 2.x 缺少一个对函数参数和返回值注解的标准语法，各种工具或库的出现填补了这一空白，有些利用了 <a href="https://peps.python.org/pep-0318/">PEP 318</a> 中引入的装饰器，还有一些则通过解析函数的文档注释，寻找其中的注释来实现。</p>
<p>本 PEP 的目的是为这些信息提供一个唯一、标准的方法，减少由于机制和语法的巨大差异而造成的困惑</p>
<h2 id="函数注释基础"><a href="#函数注释基础" class="headerlink" title="函数注释基础"></a>函数注释基础</h2><p>在开始讨论 Python3.0 函数注解的确切来龙去脉之前，我们先从管以上谈谈什么是注解，什么不是注解：</p>
<ol>
<li><p>函数注解，无论是参数还是返回值，都是可选的</p>
</li>
<li><p>函数注解只不过是在编译时将独立的 Python 表达式与函数任意部分关联起来的一种方式</p>
<p> 就其本身而言，Python 并没有为注解添加任何特定的含义或意义，就起本身而言，Python 只是单纯的让下文中<a href="#%E8%AE%BF%E9%97%AE%E5%87%BD%E6%95%B0%E6%B3%A8%E8%A7%A3">访问函数注解</a>的表达式可用。</p>
<p> 注解具有的唯一意义是能够被第三方库所解释。注解的使用者能够用这些函数注解作任何它们想做的事情。例如，一个库可能使用基于字符串的注解来提供帮助信息。如下所示：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compile</span>(<span class="params">source: <span class="string">&quot;something compilable&quot;</span>,</span></span><br><span class="line"><span class="params">            filename: <span class="string">&quot;where the compilable thing comes from&quot;</span>,</span></span><br><span class="line"><span class="params">            mode: <span class="string">&quot;is this a single statement or a suite?&quot;</span></span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p> 另一个库可能用来对 Python 的函数或方法提供类型检查，这个库能够使用注解来提示期待的输入和输出的类型，可能像下面这样：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hula</span>(<span class="params">item: Hualable, *vargs: PackAnimal</span>) -&gt; Distance:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p> 然后，无论是第一个示例中的字符串，还是第二个示例中的类型信息本身都没有任何含义，这些含义仅取决于三方库</p>
</li>
<li><p>基于第 2 点，这个 PEP 没有尝试引入任何标准的语法，即使是内置类型也是如此，这项工作将留给第三方库</p>
</li>
</ol>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>参数的注解采用跟在参数后面的可选表达式的形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">a: expression, b: expression = <span class="number">5</span></span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>在伪语法中，参数现在形如 <code>identifier [: expression] [= expression]</code> 。也就是说，注解始终位于默认值的前面，并且注解和默认值都是可选的。就像用等号表示默认值一样，冒号用来标识注解。所有的注解表达式都会在函数定义时被执行，就像默认值表达式一样。</p>
<p>多余参数 (如：<code>*args</code> 和 <code>**kwargs</code>) 的注解也以类似的方式标识：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">*args: expression, **kwargs: expression</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>嵌套参数的注解始终跟在参数名称后面，而不是最后一个括号后面，不需要对签到参数的所有参数进行注解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">(<span class="params">x1, y1: expression</span>),</span></span><br><span class="line"><span class="params">        (<span class="params">x2: expression, y2: expression</span>)=(<span class="params"><span class="literal">None</span>, <span class="literal">None</span></span>)</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>这些示例到目前为止忽略了函数返回值类型注解。具体做法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>() -&gt; expression:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>也就是说，现在参数列表后面可以跟随一个字面的 <code>-&gt;</code> 符号和一个 Python 的表达式，与参数注解一样，这个表达式将会在函数定义的时候被执行。</p>
<p>现在函数定义 [<a href="#11">11</a>] 的语法是:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">decorator: <span class="string">&#x27;@&#x27;</span> dotted_name [ <span class="string">&#x27;(&#x27;</span> [arglist] <span class="string">&#x27;)&#x27;</span> ] NEWLINE</span><br><span class="line">decorators: decorator+</span><br><span class="line">funcdef: [decorators] <span class="string">&#x27;def&#x27;</span> NAME parameters [<span class="string">&#x27;-&gt;&#x27;</span> test] <span class="string">&#x27;:&#x27;</span> suite</span><br><span class="line">parameters: <span class="string">&#x27;(&#x27;</span> [typedargslist] <span class="string">&#x27;)&#x27;</span></span><br><span class="line">typedargslist: ((tfpdef [<span class="string">&#x27;=&#x27;</span> test] <span class="string">&#x27;,&#x27;</span>)*</span><br><span class="line">                (<span class="string">&#x27;*&#x27;</span> [tname] (<span class="string">&#x27;,&#x27;</span> tname [<span class="string">&#x27;=&#x27;</span> test])* [<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;**&#x27;</span> tname]</span><br><span class="line">                 | <span class="string">&#x27;**&#x27;</span> tname)</span><br><span class="line">                | tfpdef [<span class="string">&#x27;=&#x27;</span> test] (<span class="string">&#x27;,&#x27;</span> tfpdef [<span class="string">&#x27;=&#x27;</span> test])* [<span class="string">&#x27;,&#x27;</span>])</span><br><span class="line">tname: NAME [<span class="string">&#x27;:&#x27;</span> test]</span><br><span class="line">tfpdef: tname | <span class="string">&#x27;(&#x27;</span> tfplist <span class="string">&#x27;)&#x27;</span></span><br><span class="line">tfplist: tfpdef (<span class="string">&#x27;,&#x27;</span> tfpdef)* [<span class="string">&#x27;,&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p><code>lambda</code> 的语法不支持注解，可以改变 <code>lambda</code> 的语法，要求在参数列表周围加上括号来支持注解，但是，决定 [<a href="#12">12</a>] 不进行这个修改，因为：</p>
<ul>
<li>这是一个不兼容的修改</li>
<li>lambda 总是被精简过的</li>
<li>lambda 总是可以修改为一个函数</li>
</ul>
<h2 id="访问函数注解"><a href="#访问函数注解" class="headerlink" title="访问函数注解"></a>访问函数注解</h2><p>编译后，一个函数的注解始终可以通过函数的 <code>__annotations__</code> 属性来获得。这个属性是一个可变字典，参数名称将会映射到一个注解表达式执行的对象上。</p>
<p><code>__annotations__</code> 映射中有一个特殊的键 <code>return</code> 。这个键只有为函数返回值提供注解的时候才会存在。</p>
<p>例如，存在一下注解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">a: <span class="string">&#x27;x&#x27;</span>, b: <span class="number">5</span> + <span class="number">6</span>, c: <span class="built_in">list</span></span>) -&gt; <span class="built_in">max</span>(<span class="number">2</span>, <span class="number">9</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>那么，<code>__annotations__</code> 将会是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>: <span class="built_in">list</span>,</span><br><span class="line">    <span class="string">&#x27;return&#x27;</span>: <span class="number">9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之所以选择 <code>return</code> 作为键，是因为它不会与参数名称冲突，任何尝试将 <code>return</code> 作为参数名称的函数都将报 <code>SyntaxError</code> 的错误。</p>
<p>如果函数没有任何注解或者函数从 <code>lambda</code> 创建的，那么 <code>__annotations__</code> 会是一个空的可变字典</p>
<h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><p>在讨论注解的过程中，有一些案例被提出来了。这里介绍了一些，它们按照传达的信息进行了分类。还包含了一些使用了注解的现有的产品或包的示例。</p>
<ul>
<li>提供类型信息<ul>
<li>类型检查 ([<a href="#3">3</a>], [<a href="#4">4</a>])</li>
<li>帮助 IDE 显示函数期望的参数和返回值类型 ([<a href="#16">16</a>])</li>
<li>函数重载&#x2F;泛型函数 ([<a href="#21">21</a>])</li>
<li>外语桥接 ([<a href="#17">17</a>], [<a href="#18">18</a>])</li>
<li>改写 ([<a href="#19">19</a>], [<a href="#20">20</a>])</li>
<li>谓词逻辑函数</li>
<li>数据库查询映射</li>
<li>RPC 参数封装 ([<a href="#22">22</a>])</li>
</ul>
</li>
<li>其他信息<ul>
<li>参数和返回值文档 ([<a href="#23">23</a>])</li>
</ul>
</li>
</ul>
<h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><h3 id="pydoc-和-inspect"><a href="#pydoc-和-inspect" class="headerlink" title="pydoc 和 inspect"></a>pydoc 和 inspect</h3><p><code>pydoc</code> 模块应该在显示函数帮助的时候同时显示函数的注解</p>
<p><code>inspect</code> 模块应该进行修改来支持注解</p>
<h2 id="关联的其他-PEP"><a href="#关联的其他-PEP" class="headerlink" title="关联的其他 PEP"></a>关联的其他 PEP</h2><h3 id="函数签名对象-PEP-362"><a href="#函数签名对象-PEP-362" class="headerlink" title="函数签名对象(PEP 362)"></a>函数签名对象(PEP 362)</h3><p>函数签名对象应该展示函数的注解，<code>Parameter</code> 对象可能需要更改或者其他的更改来保证该展示</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>参考实现已经在 py3k (前身为 p3yk) 修改分支 53130 [<a href="#10">10</a>] 中完成</p>
<h2 id="被拒绝的提案"><a href="#被拒绝的提案" class="headerlink" title="被拒绝的提案"></a>被拒绝的提案</h2><ul>
<li>BDFL(译者注: 指被称为 Python 独裁者的 Guido Van Rossum) 以 “太难看了” 拒绝了作者关于为生成器添加注解的特殊语法的想法[<a href="#2">2</a>]</li>
<li>尽管在早期讨论过 ([<a href="#5">5</a>], [<a href="#6">6</a>])，但是在 stdlib 中关于生成器和高阶函数的特殊对象注解最终被拒绝，因为它更适合第三方库，将它们包含在标准库中会引发更多棘手的问题。</li>
<li>尽管对标准类型参数化语法进行了大量的讨论，最后还是决定将其留给第三方库。([<a href="#7">7</a>], [<a href="#8">8</a>], [<a href="#9">9</a>])。</li>
<li>尽管进行了更多的讨论，但是还是决定不对注释互操作性进制进行标准化。在这个时候将互操作性约定标准化为时尚早。我们宁可让这些惯例根据实际使用情况和需要有机的发展起来，而不是试图强迫所有用户采用某种设计好的方案。 ([<a href="#13">13</a>], [<a href="#14">14</a>], [<a href="#15">15</a>])</li>
</ul>
<h2 id="参考文献和注释"><a href="#参考文献和注释" class="headerlink" title="参考文献和注释"></a>参考文献和注释</h2><ul>
<li>[<a id=1>1</a>] - 非特殊说明，函数指的是 Python 中的可调用对象</li>
<li>[<a id=2>2</a>] - <a href="https://mail.python.org/pipermail/python-3000/2006-May/002103.html">https://mail.python.org/pipermail/python-3000/2006-May/002103.html</a></li>
<li>[<a id=3>3</a>] - <a href="http://web.archive.org/web/20070730120117/http://oakwinter.com/code/typecheck/">http://web.archive.org/web/20070730120117/http://oakwinter.com/code/typecheck/</a></li>
<li>[<a id=4>4</a>] - <a href="http://web.archive.org/web/20070603221429/http://maxrepo.info/">http://web.archive.org/web/20070603221429/http://maxrepo.info/</a></li>
<li>[<a id=5>5</a>] - <a href="https://mail.python.org/pipermail/python-3000/2006-May/002091.html">https://mail.python.org/pipermail/python-3000/2006-May/002091.html</a></li>
<li>[<a id=6>6</a>] - <a href="https://mail.python.org/pipermail/python-3000/2006-May/001972.html">https://mail.python.org/pipermail/python-3000/2006-May/001972.html</a></li>
<li>[<a id=7>7</a>] - <a href="https://mail.python.org/pipermail/python-3000/2006-May/002105.html">https://mail.python.org/pipermail/python-3000/2006-May/002105.html</a></li>
<li>[<a id=8>8</a>] - <a href="https://mail.python.org/pipermail/python-3000/2006-May/002209.html">https://mail.python.org/pipermail/python-3000/2006-May/002209.html</a></li>
<li>[<a id=9>9</a>] - <a href="https://mail.python.org/pipermail/python-3000/2006-June/002438.html">https://mail.python.org/pipermail/python-3000/2006-June/002438.html</a></li>
<li>[<a id=10>10</a>] - <a href="http://svn.python.org/view?rev=53170&view=rev">http://svn.python.org/view?rev=53170&view=rev</a> (译者注: 该链接需要身份认证)</li>
<li>[<a id=11>11</a>] - <a href="http://docs.python.org/reference/compound_stmts.html#function-definitions">http://docs.python.org/reference/compound_stmts.html#function-definitions</a></li>
<li>[<a id=12>12</a>] - <a href="https://mail.python.org/pipermail/python-3000/2006-May/001613.html">https://mail.python.org/pipermail/python-3000/2006-May/001613.html</a></li>
<li>[<a id=13>13</a>]- <a href="https://mail.python.org/pipermail/python-3000/2006-August/002895.html">https://mail.python.org/pipermail/python-3000/2006-August/002895.html</a></li>
<li>[<a id=14>14</a>] - <a href="https://mail.python.org/pipermail/python-ideas/2007-January/000032.html">https://mail.python.org/pipermail/python-ideas/2007-January/000032.html</a></li>
<li>[<a id=15>15</a>] - <a href="https://mail.python.org/pipermail/python-list/2006-December/420645.html">https://mail.python.org/pipermail/python-list/2006-December/420645.html</a></li>
<li>[<a id=16>16</a>] - <a href="http://www.python.org/idle/doc/idle2.html#Tips">http://www.python.org/idle/doc/idle2.html#Tips</a></li>
<li>[<a id=17>17</a>] - <a href="http://www.jython.org/Project/index.html">http://www.jython.org/Project/index.html</a></li>
<li>[<a id=18>18</a>] - <a href="http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython">http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython</a></li>
<li>[<a id=19>19</a>] - <a href="http://peak.telecommunity.com/PyProtocols.html">http://peak.telecommunity.com/PyProtocols.html</a></li>
<li>[<a id=20>20</a>] - <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=155123">http://www.artima.com/weblogs/viewpost.jsp?thread=155123</a></li>
<li>[<a id=21>21</a>] - <a href="http://www-128.ibm.com/developerworks/library/l-cppeak2/">http://www-128.ibm.com/developerworks/library/l-cppeak2/</a></li>
<li>[<a id=22>22</a>] - <a href="http://rpyc.wikispaces.com/">http://rpyc.wikispaces.com/</a></li>
<li>[<a id=23>23</a>] - <a href="http://docs.python.org/library/pydoc.html">http://docs.python.org/library/pydoc.html</a></li>
</ul>
<h2 id="版权"><a href="#版权" class="headerlink" title="版权"></a>版权</h2><p>本文已发布在公共网络上</p>
<h2 id="翻译词典"><a href="#翻译词典" class="headerlink" title="翻译词典"></a>翻译词典</h2><ul>
<li><code>introduced</code> - 引入</li>
<li><code>wide</code> - 大</li>
<li><code>variation</code> - 更改，变异</li>
<li><code>mechanism</code> - 机制</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>翻译</tag>
        <tag>PEP</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman 的脚本简介</title>
    <url>/2024/postman/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Postman 是一款非常流行的 API 测试工具。特别是对于后端来讲，几乎是必备的工具。不过近些年也出现了一些国产的替代品，比如 <a href="https://www.apipost.cn/">ApiPost</a> 、 <a href="https://apifox.com/">ApiFox</a> 等。我也使用过一段时间这些工具，发现了这些工具中包含了一些非常高级的功能。例如自定义的脚本、环境变量、数据驱动等。这些功能在 Postman 中也是有的，本文用来简单介绍一下 Postman 的这些功能。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li><code>Collections</code> - 一个 Collection 就是一个 API 的集合。可以理解为一个项目<ul>
<li><code>folder</code> - 一个 Collection 中可以包含多个 folder。一个 folder 中可以包含多个 folder 或 Request。</li>
<li><code>request</code> - 一个 request 就是一个 API 接口。</li>
</ul>
</li>
<li><code>Environment</code> - 环境变量。可以理解为一个配置文件。可以在不同的环境中切换。<ul>
<li><code>Global</code> - 全局变量。可以在所有的环境中使用。</li>
<li><code>用户创建的其他环境</code> - 用户可以创建多个环境，用来在不同的环境中切换。例如：开发环境、测试环境、生产环境等。</li>
</ul>
</li>
<li><code>Pre-request Script</code> - 请求之前执行的脚本。可以用来做一些高级的操作。例如：计算签名、生成随机的数据、处理请求的返回值等。</li>
<li><code>Tests</code> - 请求之后执行的脚本。可以用来对请求的返回值进行断言、处理返回值等。</li>
</ul>
<h2 id="环境变量的使用"><a href="#环境变量的使用" class="headerlink" title="环境变量的使用"></a>环境变量的使用</h2><p>环境变量的使用非常简单。只需要在请求的 URL 或者请求的参数中使用 <code>&#123;&#123;variable&#125;&#125;</code> 的方式引用环境变量即可。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --location <span class="string">&#x27;&#123;&#123;local_ip&#125;&#125;/login&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;sign: &#123;&#123;sign&#125;&#125;&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">--data <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;user_name&quot;: &quot;&#123;&#123;user_name&#125;&#125;&quot;,</span></span><br><span class="line"><span class="string">    &quot;password&quot;: &quot;&#123;&#123;password&#125;&#125;&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="内置变量和动态变量"><a href="#内置变量和动态变量" class="headerlink" title="内置变量和动态变量"></a>内置变量和动态变量</h2><p>Postman 中有一些内置的变量，使用方法和环境变量类似，但需要在变量前加 <code>$</code> 符号，形如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;$variable&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>完整的内置变量列表可以参考 <a href="https://learning.postman.com/docs/writing-scripts/script-references/variables-list/">官方文档</a>，以下列出一些常用的内置变量：</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>$guid</code></td>
<td>以 uuid4 的规则生成一个字符串</td>
<td><code>e904c776-eb1a-4147-9986-8eb1773a8c90</code></td>
</tr>
<tr>
<td><code>$timestamp</code></td>
<td>获取当前的 10 位时间戳，单位为秒</td>
<td><code>1709082557</code></td>
</tr>
<tr>
<td><code>$isoTimestamp</code></td>
<td>获取当前 UTC 时区的时间</td>
<td><code>2024-02-28T01:11:07.768Z</code></td>
</tr>
<tr>
<td><code>$randomUUID</code></td>
<td>生成一个 36 位的随机 uuid 字符串</td>
<td><code>8bbf62ed-ade6-4b6c-8535-a99daea521ca</code></td>
</tr>
<tr>
<td><code>$randomInt</code></td>
<td>生成一个 0 - 1000 的随机数</td>
<td><code>51</code></td>
</tr>
<tr>
<td><code>$randomBoolean</code></td>
<td>生成一个随机的布尔值</td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>$randomIP</code></td>
<td>生成一个随机的 ip v4 的地址</td>
<td><code>28.248.146.132</code></td>
</tr>
<tr>
<td><code>$randomIPV6</code></td>
<td>生成一个随机的 ip v6 的地址</td>
<td><code>f148:7ca0:007d:6cd9:db02:a504:3116:9daf</code></td>
</tr>
</tbody></table>
<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p><a href="https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/">脚本官方手册</a></p>
<p>Postman 中的脚本是使用 JavaScript 编写的。脚本可以在请求的各个阶段执行。例如：在请求之前执行、请求之后执行、请求失败时执行等。脚本可以用来做一些高级的操作，例如：计算签名、生成随机的数据、处理请求的返回值等。</p>
<p>postman 提供了一个 <code>pm</code> 对象用来对 postman 中的数据进行操作。例如：获取环境变量、设置环境变量、获取请求的返回值等。</p>
<p>相关的支持非常多。有需要了可以通过官方手册进行查询。以下给出一个计算请求 RSA 签名的例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取jsRSA的库</span></span><br><span class="line"><span class="keyword">let</span> jsUrl = <span class="string">&quot;https://gitee.com/lzq1357/various/raw/master/forge_min.js&quot;</span></span><br><span class="line"><span class="keyword">if</span> (!pm.<span class="property">globals</span>.<span class="title function_">has</span>(<span class="string">&#x27;forgeJS&#x27;</span>)) &#123;</span><br><span class="line">    pm.<span class="title function_">sendRequest</span>(jsUrl, <span class="keyword">function</span> (<span class="params">err, res</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&#x27;forgeJS&#x27;</span>, res.<span class="title function_">text</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;request forgs.js: Succeed, please try again&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">eval</span>(pm.<span class="property">globals</span>.<span class="title function_">get</span>(<span class="string">&#x27;forgeJS&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> privateKey = <span class="string">&quot;your_private_key&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取body数据</span></span><br><span class="line"><span class="keyword">let</span> requestBody = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(pm.<span class="property">request</span>.<span class="property">body</span>.<span class="property">raw</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果密码是明文，进行 hash , 仅针对登录</span></span><br><span class="line"><span class="keyword">if</span> (requestBody.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;password&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (requestBody.<span class="property">password</span>.<span class="property">length</span> != <span class="number">32</span>) &#123;</span><br><span class="line">        requestBody.<span class="property">password</span> = crypto.<span class="title class_">MD5</span>(requestBody.<span class="property">password</span>).<span class="title function_">toString</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(requestBody.<span class="property">password</span>)</span><br><span class="line">        pm.<span class="property">request</span>.<span class="property">body</span>.<span class="property">raw</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(requestBody);</span><br><span class="line">        pm.<span class="property">request</span>.<span class="property">body</span>.<span class="title function_">update</span>(pm.<span class="property">request</span>.<span class="property">body</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> requestStr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(requestBody)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 生成需要进行签名的字符串 &amp; 拼接参数</span></span><br><span class="line"><span class="comment">// let requestStr = &quot;&quot;</span></span><br><span class="line"><span class="comment">// Object.entries(requestBody).forEach(([key, value]) =&gt; &#123;  </span></span><br><span class="line"><span class="comment">//     requestStr += key + &quot;=&quot; + value + &quot;&amp;&quot;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算SHA256</span></span><br><span class="line"><span class="comment">// signStr = crypto.SHA256(requestStr).toString()</span></span><br><span class="line"><span class="comment">//计算md5</span></span><br><span class="line"><span class="comment">// console.log(crypto.MD5(&quot;123456&quot;).toString())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const sign = crypto.createSign(&#x27;SHA256&#x27;);</span></span><br><span class="line"><span class="comment">// sign.update(signStr);</span></span><br><span class="line"><span class="comment">// const signature = sign.sign(privateKey, &#x27;base64&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(signature)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算签名</span></span><br><span class="line"><span class="keyword">const</span> md = forge.<span class="property">md</span>.<span class="property">sha256</span>.<span class="title function_">create</span>();</span><br><span class="line"><span class="keyword">var</span> prk = forge.<span class="property">pki</span>.<span class="title function_">privateKeyFromPem</span>(privateKey);</span><br><span class="line">md.<span class="title function_">update</span>(requestStr, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> sign64 = prk.<span class="title function_">sign</span>(md);</span><br><span class="line"><span class="keyword">var</span> sign = forge.<span class="property">util</span>.<span class="title function_">encode64</span>(sign64)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将计算的签名设置到全局变量中</span></span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&quot;sign&quot;</span>, sign)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术工具</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3.10 新特性</title>
    <url>/2022/python_3_10_feature/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Python3.10 发布于2021年10月14日，这儿总结一下改版本引入的一些新功能</p>
<p>官方新特性链接 <a href="https://docs.python.org/zh-cn/3.10/whatsnew/3.10.html">Python3.10 新特性</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>此处主要介绍在Ubuntu下安装 Python3.10</p>
<ol>
<li>添加deadsnakes源<ul>
<li><code>sudo add-apt-repository ppa:deadsnakes/ppa</code></li>
<li><code>sudo apt-get update</code></li>
</ul>
</li>
<li>安装 Python3.10<ul>
<li><code>sudo apt install python3.10-full</code></li>
</ul>
</li>
<li>安装 Python3.10 的pip<ul>
<li><code>python3.10 -m ensurepip --upgrade</code></li>
</ul>
</li>
</ol>
<h2 id="结构模式匹配（match-case）"><a href="#结构模式匹配（match-case）" class="headerlink" title="结构模式匹配（match case）"></a>结构模式匹配（match case）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通用语法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> subject:</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_1&gt;:</span><br><span class="line">        &lt;action_1&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_2&gt;:</span><br><span class="line">        &lt;action_2&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_3&gt;:</span><br><span class="line">        &lt;action_3&gt;</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        &lt;action_wildcard&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">http_error</span>(<span class="params">status</span>):</span><br><span class="line">    <span class="keyword">match</span> status:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Bad request&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Not found&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">418</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;I&#x27;m a teapot&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">455</span> | <span class="number">456</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;This is a custom error&quot;</span></span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Something&#x27;s wrong with the Internet&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(http_error(<span class="number">418</span>))</span><br><span class="line"><span class="built_in">print</span>(http_error(<span class="number">455</span>))</span><br><span class="line"><span class="built_in">print</span>(http_error(<span class="number">456</span>))</span><br><span class="line"><span class="built_in">print</span>(http_error(<span class="number">499</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># I&#x27;m a teapot</span></span><br><span class="line"><span class="comment"># This is a custom error</span></span><br><span class="line"><span class="comment"># This is a custom error</span></span><br><span class="line"><span class="comment"># Something&#x27;s wrong with the Internet</span></span><br></pre></td></tr></table></figure>

<p>带有字面值和变量的模式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># point is an (x, y) tuple</span></span><br><span class="line"><span class="keyword">match</span> point:</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Origin&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">0</span>, y):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Y=<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> (x, <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;X=<span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> (x, y):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;X=<span class="subst">&#123;x&#125;</span>, Y=<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Not a point&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>模式和类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    x: <span class="built_in">int</span></span><br><span class="line">    y: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">location</span>(<span class="params">point</span>):</span><br><span class="line">    <span class="keyword">match</span> point:</span><br><span class="line">        <span class="keyword">case</span> Point(x=<span class="number">0</span>, y=<span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Origin is the point&#x27;s location.&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> Point(x=<span class="number">0</span>, y=y):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Y=<span class="subst">&#123;y&#125;</span> and the point is on the y-axis.&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> Point(x=x, y=<span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;X=<span class="subst">&#123;x&#125;</span> and the point is on the x-axis.&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> Point():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;The point is located somewhere else on the plane.&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Not a point&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>约束项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> point:</span><br><span class="line">    <span class="keyword">case</span> Point(x, y) <span class="keyword">if</span> x == y:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;The point is located on the diagonal Y=X at <span class="subst">&#123;x&#125;</span>.&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> Point(x, y):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Point is not on the diagonal.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>复杂模式和通配符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> test_variable:</span><br><span class="line">    <span class="keyword">case</span> (<span class="string">&#x27;warning&#x27;</span>, code, <span class="number">40</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A warning has been received.&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> (<span class="string">&#x27;error&#x27;</span>, code, _):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;An error <span class="subst">&#123;code&#125;</span> occurred.&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="更好的错误信息"><a href="#更好的错误信息" class="headerlink" title="更好的错误信息"></a>更好的错误信息</h2><h3 id="语法错误（SynaxErrors）"><a href="#语法错误（SynaxErrors）" class="headerlink" title="语法错误（SynaxErrors）"></a>语法错误（SynaxErrors）</h3><p>字典未关闭</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_dict = &#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  File &quot;/home/stolen/test.py&quot;, line 2</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">    ^</span></span><br><span class="line"><span class="string">SyntaxError: unexpected EOF while parsing</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.10</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  File &quot;/home/stolen/test.py&quot;, line 1</span></span><br><span class="line"><span class="string">    test_dict = &#123;1: 1, 2: 2, 3: 3</span></span><br><span class="line"><span class="string">                ^</span></span><br><span class="line"><span class="string">SyntaxError: &#x27;&#123;&#x27; was never closed</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>冒号缺失</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &gt; <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  File &quot;/home/stolen/test.py&quot;, line 1</span></span><br><span class="line"><span class="string">    if 1 &gt; 2</span></span><br><span class="line"><span class="string">            ^</span></span><br><span class="line"><span class="string">SyntaxError: invalid syntax</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.10</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  File &quot;/home/stolen/test.py&quot;, line 1</span></span><br><span class="line"><span class="string">    if 1 &gt; 2</span></span><br><span class="line"><span class="string">            ^</span></span><br><span class="line"><span class="string">SyntaxError: expected &#x27;:&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>判断等于错误</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">bool</span>(<span class="number">3.14</span>) = <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;true&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  File &quot;/home/stolen/test.py&quot;, line 1</span></span><br><span class="line"><span class="string">    if bool(3.14) = True:</span></span><br><span class="line"><span class="string">                  ^</span></span><br><span class="line"><span class="string">SyntaxError: invalid syntax</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.10</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  File &quot;/home/stolen/test.py&quot;, line 1</span></span><br><span class="line"><span class="string">    if bool(3.14) = True:</span></span><br><span class="line"><span class="string">       ^^^^^^^^^^</span></span><br><span class="line"><span class="string">SyntaxError: cannot assign to function call here. Maybe you meant &#x27;==&#x27; instead of &#x27;=&#x27;?</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="缩进错误（IndentationErrors）"><a href="#缩进错误（IndentationErrors）" class="headerlink" title="缩进错误（IndentationErrors）"></a>缩进错误（IndentationErrors）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">bool</span>(<span class="number">3.14</span>) == <span class="literal">True</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;true&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  File &quot;/home/project/demo.py&quot;, line 2</span></span><br><span class="line"><span class="string">    print(&#x27;true&#x27;)</span></span><br><span class="line"><span class="string">    ^</span></span><br><span class="line"><span class="string">IndentationError: expected an indented block</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.10</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  File &quot;/home/project/demo.py&quot;, line 2</span></span><br><span class="line"><span class="string">    print(&#x27;true&#x27;)</span></span><br><span class="line"><span class="string">    ^</span></span><br><span class="line"><span class="string">IndentationError: expected an indented block after &#x27;if&#x27; statement on line 1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="属性错误（AttributeErrors）"><a href="#属性错误（AttributeErrors）" class="headerlink" title="属性错误（AttributeErrors）"></a>属性错误（AttributeErrors）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">a.isnumerics()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;/home/project/demo.py&quot;, line 2, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    a.isnumerics()</span></span><br><span class="line"><span class="string">AttributeError: &#x27;str&#x27; object has no attribute &#x27;isnumerics&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.10</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;/home/project/demo.py&quot;, line 2, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    a.isnumerics()</span></span><br><span class="line"><span class="string">AttributeError: &#x27;str&#x27; object has no attribute &#x27;isnumerics&#x27;. Did you mean: &#x27;isnumeric&#x27;?</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="命名错误（NameErrors）"><a href="#命名错误（NameErrors）" class="headerlink" title="命名错误（NameErrors）"></a>命名错误（NameErrors）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(hallo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;/home/project/demo.py&quot;, line 2, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(hallo)</span></span><br><span class="line"><span class="string">NameError: name &#x27;hallo&#x27; is not defined</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.10</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;/home/project/demo.py&quot;, line 2, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(hallo)</span></span><br><span class="line"><span class="string">NameError: name &#x27;hallo&#x27; is not defined. Did you mean: &#x27;hello&#x27;?</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="类型提示相关的新功能"><a href="#类型提示相关的新功能" class="headerlink" title="类型提示相关的新功能"></a>类型提示相关的新功能</h2><p>从 Python3.5 开始正式引入 typing 模块，从 Python3.6 开始已经获得全面的类型声明的支持，一下将介绍 Python3.10 中的变化</p>
<h3 id="Union-可以用-简写"><a href="#Union-可以用-简写" class="headerlink" title="Union 可以用 | 简写"></a>Union 可以用 <code>|</code> 简写</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python3.9</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">number: <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">float</span>]</span>) -&gt; <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">float</span>]:</span><br><span class="line">    <span class="keyword">return</span> number ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">number: <span class="built_in">int</span> | <span class="built_in">float</span></span>) -&gt; <span class="built_in">int</span> | <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> number ** <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>这种语法也可以用在 isinstance 中 <code>isinstance(item, int | str)</code></p>
<h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>现在可以对类型别名变量做TypeHint</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python3.9</span></span><br><span class="line">MyType = <span class="built_in">str</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">something: MyType</span>) -&gt; MyType:</span><br><span class="line">    <span class="keyword">return</span> something</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.10</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeAlias</span><br><span class="line">MyType: TypeAlias = <span class="built_in">str</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">something: MyType</span>) -&gt; MyType:</span><br><span class="line">    <span class="keyword">return</span> something</span><br></pre></td></tr></table></figure>

<h2 id="带括号的上下文管理器"><a href="#带括号的上下文管理器" class="headerlink" title="带括号的上下文管理器"></a>带括号的上下文管理器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> (CtxManager() <span class="keyword">as</span> example):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (</span><br><span class="line">    CtxManager1(),</span><br><span class="line">    CtxManager2()</span><br><span class="line">):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (CtxManager1() <span class="keyword">as</span> example,</span><br><span class="line">      CtxManager2()):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (CtxManager1(),</span><br><span class="line">      CtxManager2() <span class="keyword">as</span> example):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (</span><br><span class="line">    CtxManager1() <span class="keyword">as</span> example1,</span><br><span class="line">    CtxManager2() <span class="keyword">as</span> example2</span><br><span class="line">):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h2 id="zip的长度检查"><a href="#zip的长度检查" class="headerlink" title="zip的长度检查"></a>zip的长度检查</h2><p>默认情况下 zip 在最短的迭代次数用尽时停止，现在加入了一个 <code>strict=False</code> 参数，默认情况不检查长度，如果 <code>strict=True</code> 时，如果可迭代项长度不相等，则会引发 <code>ValueError</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="number">3</span>), [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], strict=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># [(0, &#x27;a&#x27;), (1, &#x27;b&#x27;), (2, &#x27;c&#x27;)]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="number">3</span>), [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], strict=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># ValueError: zip() argument 2 is longer than argument 1</span></span><br></pre></td></tr></table></figure>

<h2 id="字典视图映射"><a href="#字典视图映射" class="headerlink" title="字典视图映射"></a>字典视图映射</h2><p>字典的三个方法 dict.keys()、dict.values() 和 dict.items() 会返回不同的视图，现在都增加了 mapping 属性，可以返回原始字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=&#123;<span class="string">&#x27;python&#x27;</span>:<span class="number">2021</span>,<span class="string">&#x27;java&#x27;</span>:<span class="number">2020</span>&#125;</span><br><span class="line">k=data.keys()</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"><span class="built_in">print</span>(k.mapping)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict_keys([&#x27;python&#x27;, &#x27;java&#x27;])</span></span><br><span class="line"><span class="comment"># &#123;&#x27;python&#x27;: 2021, &#x27;java&#x27;: 2020&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="为整数添加-popcount-计算方法"><a href="#为整数添加-popcount-计算方法" class="headerlink" title="为整数添加 popcount 计算方法"></a>为整数添加 popcount 计算方法</h2><p>汉明重量是一串符号中非零符号的个数,是以理查德·卫斯里·汉明的名字命名的，它在包括信息论、编码理论、密码学等多个领域都有应用。</p>
<p>在密码学以及其它应用中经常需要计算数据位中 1 的个数，针对如何高效地实现人们已经广泛地进行了研究。</p>
<p>Python3.10 为整数类型增加了一个新方法 int.bit_count() 可以返回给定整数的二进制位中 1 的个数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(a))    <span class="comment">#a的二进制表示</span></span><br><span class="line"><span class="built_in">print</span>(a.bit_count())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0b1011</span></span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>更新日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3.11 新特性</title>
    <url>/2022/python_3_11_feature/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Python3.11 正式版在2022年10月25日发布了，主要更新了错误提示、异常处理和类型系统进行了更新</p>
<p>Python3.11 在性能方面较 Python3.10 快大约10%-60%，平均快大概25%</p>
<p>官方新特性链接 <a href="https://docs.python.org/zh-cn/3.11/whatsnew/3.11.html">Python3.11 新特性</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>此处主要介绍在Ubuntu下安装 Python3.11</p>
<ol>
<li>添加deadsnakes源<ul>
<li><code>sudo add-apt-repository ppa:deadsnakes/ppa</code></li>
<li><code>sudo apt-get update</code></li>
</ul>
</li>
<li>安装 Python3.11<ul>
<li><code>sudo apt install python3.11</code></li>
</ul>
</li>
</ol>
<h2 id="报错提示"><a href="#报错提示" class="headerlink" title="报错提示"></a>报错提示</h2><h3 id="ZeroDivisionError"><a href="#ZeroDivisionError" class="headerlink" title="ZeroDivisionError"></a>ZeroDivisionError</h3><p>示例代码：<code>print(5/0)</code></p>
<p>特性内容：3.11会在出错的位置增加了一个波浪符号</p>
<p>Python3.10</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/project/demo.py&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(5/0)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>

<p>Python3.11</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/project/demo.py&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(5/0)</span><br><span class="line">          ~^~</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>

<h3 id="KeyError"><a href="#KeyError" class="headerlink" title="KeyError"></a>KeyError</h3><p>示例代码：<code>&#123;&#39;a&#39;: 1&#125;[&#39;b&#39;][&#39;a&#39;]</code></p>
<p>特性内容：3.11 会在出错字典下划波浪线，并且突出指出出错的key</p>
<p>Python3.10</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/project/demo.py&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    &#123;<span class="string">&#x27;a&#x27;</span>: 1&#125;[<span class="string">&#x27;b&#x27;</span>][<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">KeyError: <span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Python3.11</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/project/demo.py&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    &#123;<span class="string">&#x27;a&#x27;</span>: 1&#125;[<span class="string">&#x27;b&#x27;</span>][<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">    ~~~~~~~~^^^^^</span><br><span class="line">KeyError: <span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="IndexError"><a href="#IndexError" class="headerlink" title="IndexError"></a>IndexError</h3><p>示例代码：<code>[1, 2, 3][3]</code></p>
<p>特性内容：3.11 会在出错列表下划波浪线，并且突出指出出错的index</p>
<p>Python3.10</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/project/demo.py&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    [1, 2, 3][3]</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure>

<p>Python3.11</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/project/demo.py&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    [1, 2, 3][3]</span><br><span class="line">    ~~~~~~~~~^^^</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure>

<h2 id="异常组和异常上下文"><a href="#异常组和异常上下文" class="headerlink" title="异常组和异常上下文"></a>异常组和异常上下文</h2><h3 id="异常组"><a href="#异常组" class="headerlink" title="异常组"></a>异常组</h3><p>在 Python3.11 中增加了异常组 <code>ExceptionGroup</code> 的概念，能够一次返回多个异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">raise</span> ExceptionGroup(</span><br><span class="line">        <span class="string">&quot;多个异常&quot;</span>,</span><br><span class="line">        [</span><br><span class="line">            TypeError(<span class="string">&quot;type error&quot;</span>),</span><br><span class="line">            ValueError(<span class="string">&quot;value error&quot;</span>),</span><br><span class="line">            KeyError(<span class="string">&quot;key error&quot;</span>)</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>

<p>输出错误信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+ Exception Group Traceback (most recent call last):</span><br><span class="line">|   File <span class="string">&quot;/home/project/demo.py&quot;</span>, line 11, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">|     <span class="built_in">test</span>()</span><br><span class="line">|   File <span class="string">&quot;/home/project/demo.py&quot;</span>, line 2, <span class="keyword">in</span> <span class="built_in">test</span></span><br><span class="line">|     raise ExceptionGroup(</span><br><span class="line">| ExceptionGroup: 多个异常 (3 sub-exceptions)</span><br><span class="line">+-+---------------- 1 ----------------</span><br><span class="line">  | TypeError: <span class="built_in">type</span> error</span><br><span class="line">  +---------------- 2 ----------------</span><br><span class="line">  | ValueError: value error</span><br><span class="line">  +---------------- 3 ----------------</span><br><span class="line">  | KeyError: <span class="string">&#x27;key error&#x27;</span></span><br><span class="line">  +------------------------------------</span><br></pre></td></tr></table></figure>

<p>注意</p>
<ul>
<li><code>ExceptionGroup</code> 可以继续嵌套 <code>ExceptionGroup</code></li>
<li><code>ExceptionGroup</code> 需要使用 <code>ExceptionGroup</code> 来捕捉错误，也可以使用 <code>except*</code> 来捕捉</li>
<li><code>ExceptionGroup</code> 继承自 <code>Exception</code> ，故可使用 <code>Exception</code> 来捕捉错误</li>
</ul>
<h3 id="except"><a href="#except" class="headerlink" title="except*"></a>except*</h3><p><code>except*</code> 用于一次匹配到多个异常，主要用于对 <code>ExceptionGroup</code> 进行错误捕捉</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">    <span class="keyword">raise</span> ExceptionGroup(</span><br><span class="line">        <span class="string">&quot;多个异常&quot;</span>,</span><br><span class="line">        [</span><br><span class="line">            TypeError(<span class="string">&quot;type error&quot;</span>),</span><br><span class="line">            ValueError(<span class="string">&quot;value error&quot;</span>),</span><br><span class="line">            KeyError(<span class="string">&quot;key error&quot;</span>)</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">except</span>* TypeError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;捕捉到TypeError&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>* ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;捕捉到ValueError&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>* KeyError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;捕捉到KeyError&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">捕捉到TypeError</span><br><span class="line">捕捉到ValueError</span><br><span class="line">捕捉到KeyError</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>:</p>
<ul>
<li>如果没有完全捕捉 <code>ExceptionGroup</code> 中的所有错误，则还是会抛出错误</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">    <span class="keyword">raise</span> ExceptionGroup(</span><br><span class="line">        <span class="string">&quot;多个异常&quot;</span>,</span><br><span class="line">        [</span><br><span class="line">            TypeError(<span class="string">&quot;type error&quot;</span>),</span><br><span class="line">            ValueError(<span class="string">&quot;value error&quot;</span>),</span><br><span class="line">            KeyError(<span class="string">&quot;key error&quot;</span>)</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">except</span>* TypeError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;捕捉到TypeError&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>* ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;捕捉到ValueError&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">捕捉到TypeError</span><br><span class="line">捕捉到ValueError</span><br><span class="line">  + Exception Group Traceback (most recent call last):</span><br><span class="line">  |   File <span class="string">&quot;/home/project/demo.py&quot;</span>, line 20, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  |     main()</span><br><span class="line">  |   File <span class="string">&quot;/home/project/demo.py&quot;</span>, line 14, <span class="keyword">in</span> main</span><br><span class="line">  |     <span class="built_in">test</span>()</span><br><span class="line">  |   File <span class="string">&quot;/home/project/demo.py&quot;</span>, line 2, <span class="keyword">in</span> <span class="built_in">test</span></span><br><span class="line">  |     raise ExceptionGroup(</span><br><span class="line">  | ExceptionGroup: 多个异常 (1 sub-exception)</span><br><span class="line">  +-+---------------- 1 ----------------</span><br><span class="line">    | KeyError: <span class="string">&#x27;key error&#x27;</span></span><br><span class="line">    +------------------------------------</span><br></pre></td></tr></table></figure>

<h3 id="增强异常的注释"><a href="#增强异常的注释" class="headerlink" title="增强异常的注释"></a>增强异常的注释</h3><p>在 Python3.11 中，内置了一个方式来向异常中增加备注信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> typer</span><br><span class="line"><span class="keyword">except</span> ModuleNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">    e.add_note(<span class="string">&quot;你还没有安装 typer&quot;</span>)</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure>

<h2 id="TOML解析器"><a href="#TOML解析器" class="headerlink" title="TOML解析器"></a>TOML解析器</h2><p>在 Python3.11 中内置了一个 <code>tomllib</code> 模块进行toml解析，主要提供两个方法 <code>load</code> 和 <code>loads</code></p>
<ul>
<li><code>load</code> 主要用来读取文件内容并解析，注意文件需要以二进制形式 <code>rb</code> 打开</li>
<li><code>loads</code> 主要用来解析toml字符串内容</li>
</ul>
<p>示例1：</p>
<p>新建一个 <code>config.toml</code> 文件，写入一下内容</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[Params]</span></span><br><span class="line">  <span class="attr">foo</span> = <span class="string">&#x27;bar&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tomllib</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./config.toml&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    config = tomllib.load(f)</span><br><span class="line">    <span class="built_in">print</span>(config)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Params&#x27;</span>: &#123;<span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tomllib</span><br><span class="line"></span><br><span class="line">toml_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[Params]</span></span><br><span class="line"><span class="string">  foo = &#x27;bar&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tomllib.loads(toml_str))</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Params&#x27;</span>: &#123;<span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h2><p>Python3.11 主要新增了 <code>TypeVarTuple</code> 、 <code>TypeGuard</code> 、 <code>Self</code> 、 <code>LiteralString</code> 、 <code>Required</code> 、 <code>NotRequired</code> 等类型</p>
<h3 id="Self"><a href="#Self" class="headerlink" title="Self"></a>Self</h3><p>新的 Self 注释提供了一种简单直观的方法来注释返回类实例的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLock</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>) -&gt; Self:</span><br><span class="line">        <span class="variable language_">self</span>.lock()</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyInt</span>:</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fromhex</span>(<span class="params">cls, s: <span class="built_in">str</span></span>) -&gt; Self:</span><br><span class="line">        <span class="keyword">return</span> cls(<span class="built_in">int</span>(s, <span class="number">16</span>))</span><br></pre></td></tr></table></figure>

<h3 id="Required-和-NotRequired"><a href="#Required-和-NotRequired" class="headerlink" title="Required 和 NotRequired"></a>Required 和 NotRequired</h3><p>在使用 <code>dataclass</code> 装饰类的时候，可以指定参数是否必传</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Movie</span>(TypedDict, total=<span class="literal">False</span>):</span><br><span class="line">   title: Required[<span class="built_in">str</span>]</span><br><span class="line">   year: <span class="built_in">int</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>更新日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3.6 新特性</title>
    <url>/2022/python_3_6_feature/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Python3.6 发布于2016年12月23日，这儿总结一下改版本引入的一些新功能</p>
<p>官方新特性链接 <a href="https://docs.python.org/zh-cn/3.6/whatsnew/3.6.html">Python3.6 新特性</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>此处主要介绍在Ubuntu下安装 Python3.6</p>
<ol>
<li>添加deadsnakes源<ul>
<li><code>sudo add-apt-repository ppa:deadsnakes/ppa</code></li>
<li><code>sudo apt-get update</code></li>
</ul>
</li>
<li>安装 Python3.6<ul>
<li><code>sudo apt install python3.6-full</code></li>
</ul>
</li>
<li>安装 Python3.6 的pip<ul>
<li><code>python3.6 -m ensurepip --upgrade</code></li>
</ul>
</li>
</ol>
<h2 id="f-string"><a href="#f-string" class="headerlink" title="f-string"></a>f-string</h2><p>Python3.6 引入了一种 <code>f-string</code> 的方式来格式化字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;Fred&quot;</span></span><br><span class="line"><span class="string">f&quot;He said his name is <span class="subst">&#123;name&#125;</span>.&quot;</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># He said his name is Fred.</span></span><br><span class="line"></span><br><span class="line">width = <span class="number">10</span></span><br><span class="line">precision = <span class="number">4</span></span><br><span class="line">value = <span class="number">12.34567</span></span><br><span class="line"><span class="string">f&quot;result: <span class="subst">&#123;value:&#123;width&#125;</span>.<span class="subst">&#123;precision&#125;</span>&#125;&quot;</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># result:      12.35</span></span><br><span class="line"><span class="comment"># 备注：小数点也占10位中的一个字符宽度</span></span><br></pre></td></tr></table></figure>

<h2 id="变量注释的语法"><a href="#变量注释的语法" class="headerlink" title="变量注释的语法"></a>变量注释的语法</h2><p>在 Python3.5 中，引入了类型标注 <code>Type Hint</code> ，在 Python3.6 中又加入了函数参数的标注，包括实参和行参的标注</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>,<span class="type">Dict</span></span><br><span class="line"></span><br><span class="line">primes: <span class="type">List</span>[<span class="built_in">int</span>] = []</span><br><span class="line"></span><br><span class="line">captain: <span class="built_in">str</span>  <span class="comment"># 仅做类型标注，不初始化值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Starship</span>:</span><br><span class="line">    stats: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>] = &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数字文字中的下划线"><a href="#数字文字中的下划线" class="headerlink" title="数字文字中的下划线"></a>数字文字中的下划线</h2><p>Python3.6 中在数字值之间使用下划线改善可读性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">1_000_000_000_000_000</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li>单个下划线允许用在数码之间和任何数制指示符之后</li>
<li>不可以两个下划线连在一起</li>
<li>字符串格式化可以用 <code>_</code> 或 <code>_d</code> 来用下划线表示千分位分隔符<ul>
<li><code>f&#39;&#123;100000000:_&#125;&#39;</code> 输出: <code>100_000_000</code></li>
<li><code>f&#39;&#123;100000000:_d&#125;&#39;</code> 输出: <code>100_000_000</code></li>
</ul>
</li>
<li><code>_b</code> 、 <code>_o</code> 、 <code>_x</code> 可以让数字以二进制、八进制、十进制、十六进制每隔4个数码分割<ul>
<li><code>f&#39;&#123;100000000:_x&#125;&#39;</code> 输出: <code>5f5_e100</code></li>
<li><code>f&#39;&#123;128:_b&#125;&#39;</code> 输出: <code>1000_0000</code></li>
</ul>
</li>
</ul>
<h2 id="secrets-生成安全随机数字"><a href="#secrets-生成安全随机数字" class="headerlink" title="secrets 生成安全随机数字"></a>secrets 生成安全随机数字</h2><p>Python3.6 中新增的 <code>secrets</code> 模块的主要目的是提供一种简单的方法来可靠地生成适用于管理秘密的加密强伪随机值，例如帐户身份验证、令牌等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line">secrets.token_bytes(<span class="number">16</span>)</span><br><span class="line"><span class="comment"># b&#x27;\x12Z\xebb\xa0\xab\xca\xc3W\xbe\xfdCFr\x86\xcd&#x27;</span></span><br><span class="line"></span><br><span class="line">secrets.token_hex(<span class="number">16</span>)</span><br><span class="line"><span class="comment"># a890afe1433b3044e1316fd7aa23787f</span></span><br></pre></td></tr></table></figure>

<p>在 Python3.6 以下的版本则推荐使用 <code>os.urandom()</code></p>
<h2 id="异步生成器"><a href="#异步生成器" class="headerlink" title="异步生成器"></a>异步生成器</h2><p>在 Python3.5 中引入了 <code>async</code> 和 <code>await</code> ，但是在 Python3.5 中无法在一个函数中同时使用 <code>await</code> 和 <code>yield</code> ，在 Python3.6 解决了这个问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">ticker</span>(<span class="params">delay, to</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Yield numbers from 0 to *to* every *delay* seconds.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(to):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(delay)</span><br></pre></td></tr></table></figure>

<h2 id="异步推导"><a href="#异步推导" class="headerlink" title="异步推导"></a>异步推导</h2><p>添加了对在列表、集合与字典推导式和生成器表达式中使用 async for 的支持</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = [i <span class="keyword">async</span> <span class="keyword">for</span> i <span class="keyword">in</span> aiter() <span class="keyword">if</span> i % <span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<p><code>await</code> 表达式也在所有种类的推导式中得到支持</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = [<span class="keyword">await</span> fun() <span class="keyword">for</span> fun <span class="keyword">in</span> funcs <span class="keyword">if</span> <span class="keyword">await</span> condition()]</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>将 Windows 文件系统编码和控制台编码都更改为 UTF-8</li>
<li>重新实现了字典 dict，使其内存使用减少了 20%-25%</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>更新日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3.7 新特性</title>
    <url>/2022/python_3_7_feature/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Python3.7 发布于2018年6月27日，这儿总结一下改版本引入的一些新功能</p>
<p>官方新特性链接 <a href="https://docs.python.org/zh-cn/3.7/whatsnew/3.7.html">Python3.7 新特性</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>此处主要介绍在Ubuntu下安装 Python3.7</p>
<ol>
<li>添加deadsnakes源<ul>
<li><code>sudo add-apt-repository ppa:deadsnakes/ppa</code></li>
<li><code>sudo apt-get update</code></li>
</ul>
</li>
<li>安装 Python3.7<ul>
<li><code>sudo apt install python3.7-full</code></li>
</ul>
</li>
<li>安装 Python3.7 的pip<ul>
<li><code>python3.7 -m ensurepip --upgrade</code></li>
</ul>
</li>
</ol>
<h2 id="breakpoint-函数"><a href="#breakpoint-函数" class="headerlink" title="breakpoint 函数"></a>breakpoint 函数</h2><p>内置了新的 <code>breakpoint()</code> 函数，作为简单进入Python调试的方式，使用 <code>breakpoint()</code> 函数，相当于设置了断点，遇到 <code>breakpoint()</code> 会自动进入 pdb 调试模式</p>
<p>内置 breakpoint() 会调用 sys.breakpointhook()。 在默认情况下后者会导入 pdb 然后再调用 pdb.set_trace()，但是通过将 sys.breakpointhook() 绑定到你选定的函数，breakpoint() 可以进入任何调试器。 此外，环境变量 PYTHONBREAKPOINT 可被设置为你选定的调试器的可调用对象。 设置 PYTHONBREAKPOINT&#x3D;0 会完全禁用内置 breakpoint()。</p>
<h2 id="具有纳秒级精度的新时间函数"><a href="#具有纳秒级精度的新时间函数" class="headerlink" title="具有纳秒级精度的新时间函数"></a>具有纳秒级精度的新时间函数</h2><p>现代系统的时钟精度可以超过由 time.time() 函数及其变化形式所返回的浮点数的有限精度。 为了避免精度损失，Python3.7 在 time 模块中增加了原有计时器函数的六个新“纳秒版”变化形式</p>
<ul>
<li>time.clock_gettime_ns()</li>
<li>time.clock_settime_ns()</li>
<li>time.monotonic_ns()</li>
<li>time.perf_counter_ns()</li>
<li>time.process_time_ns()</li>
<li>time.time_ns()</li>
</ul>
<p>这些新函数会以整数值的形式返回纳秒数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"><span class="built_in">print</span>(time.time_ns())</span><br><span class="line"><span class="comment"># 1663496284.7790382</span></span><br><span class="line"><span class="comment"># 1663496284779068663</span></span><br></pre></td></tr></table></figure>

<h2 id="新增-dataclasses"><a href="#新增-dataclasses" class="headerlink" title="新增 dataclasses"></a>新增 dataclasses</h2><p>新的 dataclass() 装饰器提供了一种声明数据类的方式。 数据类使用变量标注来描述其属性。 它的构造器和其他魔术方法例如 <strong>repr</strong>(), <strong>eq</strong>() 以及 <strong>hash</strong>() 会自动地生成。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    x: <span class="built_in">float</span></span><br><span class="line">    y: <span class="built_in">float</span></span><br><span class="line">    z: <span class="built_in">float</span> = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">同一下代码</span></span><br><span class="line"><span class="string">class Point:</span></span><br><span class="line"><span class="string">    def __init__(self, x: float, y: float, z: float=0.0):</span></span><br><span class="line"><span class="string">        self.x = x</span></span><br><span class="line"><span class="string">        self.y = y</span></span><br><span class="line"><span class="string">        self.z = z</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">p = Point(<span class="number">1.5</span>, <span class="number">2.5</span>)</span><br><span class="line"><span class="built_in">print</span>(p)   <span class="comment"># produces &quot;Point(x=1.5, y=2.5, z=0.0)&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="dict-对象正式保持插入时顺序"><a href="#dict-对象正式保持插入时顺序" class="headerlink" title="dict 对象正式保持插入时顺序"></a>dict 对象正式保持插入时顺序</h2><p>dict 对象会保持插入时的顺序这个特性其实在 Python 3.6 中已经非正式的出场了，现在 Python 3.7 中正式宣布成为 Python 语言官方规范的一部分。</p>
<p>dict 对象有了顺序，对于一些方法自然就有了影响，比如 popitem 之前是随机删除，而现在 就是删除最后加入的键值对了，有了确定性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a.popitem())</span><br><span class="line"><span class="comment"># (&#x27;c&#x27;, 3)</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br></pre></td></tr></table></figure>

<p>但是，按照 dict 的特性，我们在写代码的过程中依然不应该依赖 dict 有序，实际开发中还是应该按照无序处理</p>
<h2 id="新增-getattr-定制对模块属性的访问"><a href="#新增-getattr-定制对模块属性的访问" class="headerlink" title="新增 getattr() 定制对模块属性的访问"></a>新增 <strong>getattr</strong>() 定制对模块属性的访问</h2><p>Python 3.7 允许在模块上定义 <code>__getattr__()</code> 并且当以其他方式找不到某个模块属性时将会调用它。 在模块上定义 <code>__dir__()</code> 现在也是允许的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line">    sex: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Can&#x27;t find <span class="subst">&#123;item&#125;</span> attribute&quot;</span></span><br><span class="line"></span><br><span class="line">user = User(<span class="string">&#x27;stolen&#x27;</span>, <span class="number">18</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(user.name)</span><br><span class="line"><span class="built_in">print</span>(user.age)</span><br><span class="line"><span class="built_in">print</span>(user.sex)</span><br><span class="line"><span class="built_in">print</span>(user.info)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">stolen</span></span><br><span class="line"><span class="string">18</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">Can&#x27;t find info attribute</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>async 和 await 变为了保留关键字</li>
<li>typing 不会向核心 CPython 解释器引入的限制取消了</li>
<li>允许将超过 255 个参数传递给一个函数，而现在一个函数也可以拥有超过 255 个形参</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>更新日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3.8 新特性</title>
    <url>/2022/python_3_8_feature/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Python3.8 发布于2019年10月14日，这儿总结一下改版本引入的一些新功能</p>
<p>官方新特性链接 <a href="https://docs.python.org/zh-cn/3.8/whatsnew/3.8.html">Python3.8 新特性</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>此处主要介绍在Ubuntu下安装 Python3.8</p>
<ol>
<li>添加deadsnakes源<ul>
<li><code>sudo add-apt-repository ppa:deadsnakes/ppa</code></li>
<li><code>sudo apt-get update</code></li>
</ul>
</li>
<li>安装 Python3.8<ul>
<li><code>sudo apt install python3.8-full</code></li>
</ul>
</li>
<li>安装 Python3.8 的pip<ul>
<li><code>python3.8 -m ensurepip --upgrade</code></li>
</ul>
</li>
</ol>
<h2 id="海象运算符"><a href="#海象运算符" class="headerlink" title="海象运算符"></a>海象运算符</h2><p>新增的语法 :&#x3D; 可在表达式内部为变量赋值。 它被昵称为“海象运算符”因为它很像是海象的眼睛和长牙。</p>
<p>例如以下代码可以避免 <code>len()</code> 调用两次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line"><span class="keyword">if</span> (n := <span class="built_in">len</span>(a)) &gt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;List is too long (<span class="subst">&#123;n&#125;</span> elements, expected &lt;= 10)&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>利用海象表达式可以在一行内实现斐波那契数列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(f:=(f[<span class="number">1</span>], <span class="built_in">sum</span>(f)) <span class="keyword">if</span> i <span class="keyword">else</span> (<span class="number">0</span>,<span class="number">1</span>))[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure>

<h2 id="仅限位置形参"><a href="#仅限位置形参" class="headerlink" title="仅限位置形参"></a>仅限位置形参</h2><p>新增了一个函数形参语法 <code>/</code> 用来指明某些函数形参必须使用仅限位置而非关键字参数的形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b, /, c, d, *, e, f</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, c, d, e, f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 形参 a 和 b 为仅限位置形参</span></span><br><span class="line"><span class="comment"># c 或 d 可以是位置形参或关键字形参，也就是默认形式</span></span><br><span class="line"><span class="comment"># e 或 f 要求为仅限关键字形参</span></span><br></pre></td></tr></table></figure>

<h2 id="字典可使用-reversed-进行反转"><a href="#字典可使用-reversed-进行反转" class="headerlink" title="字典可使用 reversed 进行反转"></a>字典可使用 reversed 进行反转</h2><p>普通字典自 Python 3.7 起已保证具有确定的元素顺序，在 Python 3.8 中可以利用 reversed 按插入顺序反向迭代。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>(s.items())))</span><br><span class="line"><span class="comment"># [(&#x27;c&#x27;, 3), (&#x27;b&#x27;, 2), (&#x27;a&#x27;, 1)]</span></span><br></pre></td></tr></table></figure>

<h2 id="f-string-增加-说明符"><a href="#f-string-增加-说明符" class="headerlink" title="f-string 增加 &#x3D; 说明符"></a>f-string 增加 &#x3D; 说明符</h2><p>增加 &#x3D; 说明符用于 f-string。 形式为 f’{expr&#x3D;}’ 的 f-字符串将扩展表示为表达式文本，加一个等于号，再加表达式的求值结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user = <span class="string">&#x27;eric_idle&#x27;</span></span><br><span class="line">member_since = date(<span class="number">1975</span>, <span class="number">7</span>, <span class="number">31</span>)</span><br><span class="line"><span class="string">f&#x27;<span class="subst">&#123;user=&#125;</span> <span class="subst">&#123;member_since=&#125;</span>&#x27;</span></span><br><span class="line"><span class="comment"># user=&#x27;eric_idle&#x27; member_since=datetime.date(1975, 7, 31)</span></span><br></pre></td></tr></table></figure>

<p>新版本还给 f-string 增加了转换符 !s 、!a 、!r<br>转换符 <code>!s</code> 是对结果调用 str()，<code>!r</code> 是调用 repr()，而 <code>!a</code> 是调用 ascii()。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">today = datetime.date.today()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;今天是 <span class="subst">&#123;today!s&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;今天是 <span class="subst">&#123;today!r&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;今天是 <span class="subst">&#123;today!a&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="可从进程直接访问的共享内存"><a href="#可从进程直接访问的共享内存" class="headerlink" title="可从进程直接访问的共享内存"></a>可从进程直接访问的共享内存</h2><p>添加了新的 <code>multiprocessing.shared_memory</code> 模块，可以直接共享内存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> shared_memory</span><br><span class="line">a = shared_memory.ShareableList([<span class="number">2021</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="number">2022</span>])</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> shared_memory</span><br><span class="line">b = shared_memory.ShareableList(name=)    <span class="comment">#这里要把获得的name值写入</span></span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<h2 id="typing-特性"><a href="#typing-特性" class="headerlink" title="typing 特性"></a>typing 特性</h2><p>新增 <code>TypeDict</code> ，一个带有键专属类型的字典类型，TypedDict 只使用字符串作为键。 默认情况下每个键都要求提供。 指定 “total&#x3D;False” 以允许键作为可选项</p>
<h2 id="asyncio-run"><a href="#asyncio-run" class="headerlink" title="asyncio.run"></a>asyncio.run</h2><p><code>asyncio.run()</code> 已经从暂定状态晋级为稳定 API。 此函数可被用于执行一个 coroutine 并返回结果，同时自动管理事件循环。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<h2 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h2><ul>
<li>之前版本中 continue 语句不允许在 finally 子句中使用，这是因为具体实现存在一个问题。 在 Python3.8 中此限制已被取消</li>
<li>很多内置方法的性能都提高了 20% - 50%</li>
<li>typing.TypeDict</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>更新日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3.9 新特性</title>
    <url>/2022/python_3_9_feature/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Python3.9 发布于2020年10月5日，这儿总结一下改版本引入的一些新功能</p>
<p>官方新特性链接 <a href="https://docs.python.org/zh-cn/3.9/whatsnew/3.9.html">Python3.9 新特性</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>此处主要介绍在Ubuntu下安装 Python3.9</p>
<ol>
<li>添加deadsnakes源<ul>
<li><code>sudo add-apt-repository ppa:deadsnakes/ppa</code></li>
<li><code>sudo apt-get update</code></li>
</ul>
</li>
<li>安装 Python3.9<ul>
<li><code>sudo apt install python3.9-full</code></li>
</ul>
</li>
<li>安装 Python3.9 的pip<ul>
<li><code>python3.9 -m ensurepip --upgrade</code></li>
</ul>
</li>
</ol>
<h2 id="字典合并与更新运算符"><a href="#字典合并与更新运算符" class="headerlink" title="字典合并与更新运算符"></a>字典合并与更新运算符</h2><p>合并 (<code>|</code>) 与更新 (<code>|=</code>) 运算符已被加入内置的 dict 类。 它们为现有的 <code>dict.update</code> 和 <code>&#123;**d1, **d2&#125;</code> 字典合并方法提供了补充。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = &#123;<span class="string">&quot;key1&quot;</span>: <span class="string">&quot;value1 from x&quot;</span>, <span class="string">&quot;key2&quot;</span>: <span class="string">&quot;value2 from x&quot;</span>&#125;</span><br><span class="line">y = &#123;<span class="string">&quot;key2&quot;</span>: <span class="string">&quot;value2 from y&quot;</span>, <span class="string">&quot;key3&quot;</span>: <span class="string">&quot;value3 from y&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line"><span class="comment"># z = &#123;**x, **y&#125;</span></span><br><span class="line">z = x | y</span><br><span class="line"><span class="comment"># 如果两个字典都存在key，则保留后面的key的值，</span></span><br><span class="line"><span class="comment"># z: &#123;&#x27;key1&#x27;: &#x27;value1 from x&#x27;, &#x27;key2&#x27;: &#x27;value2 from y&#x27;, &#x27;key3&#x27;: &#x27;value3 from y&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line"><span class="comment"># x.update(y)</span></span><br><span class="line">x |= y</span><br><span class="line"><span class="comment"># x: &#123;&#x27;key1&#x27;: &#x27;value1 from x&#x27;, &#x27;key2&#x27;: &#x27;value2 from y&#x27;, &#x27;key3&#x27;: &#x27;value3 from y&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 将y中的值更新到x中</span></span><br></pre></td></tr></table></figure>

<h2 id="放宽对装饰器的语法限制"><a href="#放宽对装饰器的语法限制" class="headerlink" title="放宽对装饰器的语法限制"></a>放宽对装饰器的语法限制</h2><p>在之前版本的 Python 中对于装饰器的语法是有所限制的，Python 3.9 终于将这一限制放宽任意，任何表达式都可以用在装饰器中。</p>
<p>之前的装饰器语法</p>
<p><code>decorator: &#39;@&#39; dotted_name [ &#39;(&#39; [arglist] &#39;)&#39; ] NEWLINE</code></p>
<p>Python3.9 的装饰器语法</p>
<p><code>decorator: &#39;@&#39; namedexpr_test NEWLINE</code></p>
<p>旧版装饰器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">upper</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args</span>):</span><br><span class="line">        <span class="keyword">return</span> func(*args).upper()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@upper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;hello <span class="subst">&#123;name&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">hello(<span class="string">&#x27;johnson&#x27;</span>)</span><br><span class="line"><span class="comment"># HELLO JOHNSON</span></span><br></pre></td></tr></table></figure>

<p>新版装饰器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@lambda func:(<span class="params"><span class="keyword">lambda</span> *args:func(<span class="params">*args</span>).upper(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;hello <span class="subst">&#123;name&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">hello(<span class="string">&#x27;johnson&#x27;</span>)</span><br><span class="line"><span class="comment"># HELLO JOHNSON</span></span><br></pre></td></tr></table></figure>

<h2 id="新增用于移除前缀和后缀的字符串方法"><a href="#新增用于移除前缀和后缀的字符串方法" class="headerlink" title="新增用于移除前缀和后缀的字符串方法"></a>新增用于移除前缀和后缀的字符串方法</h2><p>增加了 <code>str.removeprefix(prefix)</code> 和 <code>str.removesuffix(suffix)</code> 用于方便地从字符串移除不需要的前缀或后缀。另外 <code>bytes</code> 和 <code>bytearray</code> 以及 <code>collections.UserString</code> 也增加了对应的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_hello = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line">no_prefix = str_hello.removeprefix(<span class="string">&#x27;hello,&#x27;</span>)</span><br><span class="line">no_suffix = str_hello.removesuffix(<span class="string">&#x27;world!&#x27;</span>)</span><br><span class="line"><span class="comment"># 该方法不会修改原始字符串，只会返回新的字符串</span></span><br></pre></td></tr></table></figure>

<h2 id="标准多项集中的类型标注泛型"><a href="#标准多项集中的类型标注泛型" class="headerlink" title="标准多项集中的类型标注泛型"></a>标准多项集中的类型标注泛型</h2><p><code>dict</code> 、 <code>list</code>、 <code>set</code>、 <code>tuple</code> 用于取代 typing 中的 <code>Dict</code>、 <code>List</code>、 <code>Set</code>、 <code>Tuple</code></p>
<p>之前的版本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_all</span>(<span class="params">names: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>, name)</span><br></pre></td></tr></table></figure>

<p>Python3.9 版本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet_all</span>(<span class="params">names: <span class="built_in">list</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>, name)</span><br></pre></td></tr></table></figure>

<h2 id="file-属性将是一个绝对路径"><a href="#file-属性将是一个绝对路径" class="headerlink" title="file 属性将是一个绝对路径"></a><strong>file</strong> 属性将是一个绝对路径</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /home/stolen/test.py</span></span><br><span class="line"><span class="built_in">print</span>(__file__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.8 输出</span></span><br><span class="line"><span class="comment"># test.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.9 输出</span></span><br><span class="line"><span class="comment"># /home/stolen/test.py</span></span><br></pre></td></tr></table></figure>

<h2 id="datetime-模块的改进"><a href="#datetime-模块的改进" class="headerlink" title="datetime 模块的改进"></a>datetime 模块的改进</h2><p>isocalendar() 方法现在返回 namedtuple (具名元组) ，这样可以通过属性也能访问到该值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">today = datetime.date.today().isocalendar()</span><br><span class="line"><span class="built_in">print</span>(today)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.8</span></span><br><span class="line"><span class="comment"># (2022, 38, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.9</span></span><br><span class="line"><span class="comment"># datetime.IsoCalendarDate(year=2022, week=38, weekday=1)</span></span><br><span class="line"><span class="comment"># today.week -&gt; 38</span></span><br></pre></td></tr></table></figure>

<h2 id="math-模块的改进"><a href="#math-模块的改进" class="headerlink" title="math 模块的改进"></a>math 模块的改进</h2><p><code>math.gcd(*integers)</code> 求最大公约数的函数允许传入超过2个参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">result = math.gcd(<span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.8</span></span><br><span class="line"><span class="comment"># TypeError: gcd expected 2 arguments, got 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.9</span></span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure>

<p><code>math.lcm(*integer)</code> 新增计算最小公倍数函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">result = math.lcm(<span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.8</span></span><br><span class="line"><span class="comment"># AttributeError: module &#x27;math&#x27; has no attribute &#x27;lcm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.9</span></span><br><span class="line"><span class="comment"># 180</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>更新日志</tag>
      </tags>
  </entry>
  <entry>
    <title>《Python 工匠》读书笔记</title>
    <url>/2023/python_artisan/</url>
    <content><![CDATA[<h2 id="变量与注释"><a href="#变量与注释" class="headerlink" title="变量与注释"></a>变量与注释</h2><p>变量命名原则</p>
<ol>
<li>遵循 PEP8 规范</li>
<li>描述性要强（结合场景尽可能详尽的描述变量）</li>
<li>尽量短（为变量命名要结合情景和上下文）</li>
<li>要匹配类型<ul>
<li>bool (is_, has_, allow_)</li>
<li>int&#x2F;float<ul>
<li>含义为数字的单词：port, age, radius</li>
<li>以 _id 结尾的变量：user_id, product_id</li>
<li>以 length&#x2F;count 开头或结尾的单词，users_count, length_of_name</li>
<li>慎用名词复数表示 int 变量，users 容易误解为 List[User]</li>
</ul>
</li>
<li>其他类型的变量建议使用明确的类型注解来标注类型</li>
</ul>
</li>
<li>超短命名结合场景使用和避免<ul>
<li>数组索引三剑客 i, j, k</li>
<li>某个整数 n</li>
<li>某个字符串 s</li>
<li>某个异常 e</li>
<li>文件对象 fp</li>
</ul>
</li>
</ol>
<p>变量和注释使用原则</p>
<ol>
<li>保持变量的一致性<ul>
<li>名字一致性：在同一个项目、模块中，对一类事物的称呼要保持一致</li>
<li>类型一致性：同一个变量不要重复指向不同的类型</li>
</ul>
</li>
<li>变量类型定义尽量靠近使用：C 语言后遗症；靠近使用能够把一条逻辑完整的串在一起，不必来回翻阅</li>
<li>定义临时变量提升代码可读性：例如过长的 if 条件，会使读者头痛</li>
<li>同一作用域内不要有太多变量：变量太多会导致读者难以理解，建议拆分函数</li>
<li>能不定义变量就别定义：例如将计算结果放入列表，而不是先定义变量，再将变量放入列表</li>
<li>不要使用 locals()：容易暴露没有真正使用的变量</li>
<li>空行也是一种注释：空行可以将代码分组，提升可读性</li>
<li>先写注释后写代码：先写注释可以帮助思考，也可以帮助后续的代码阅读者理解代码</li>
</ol>
<h2 id="数值与字符串"><a href="#数值与字符串" class="headerlink" title="数值与字符串"></a>数值与字符串</h2><p>数值使用</p>
<ul>
<li>Python的浮点数有精度问题，请使用Decimal对象做精确的小数运算</li>
<li>布尔类型是整型的子类型，布尔值可以当作0和1来使用</li>
<li>使用 <code>float(&#39;inf&#39;)</code> 无穷大可以简化边界处理逻辑</li>
</ul>
<p>字符串使用</p>
<ul>
<li>字符串分为两类：str（给人阅读的文本类型）和bytes（给计算机阅读的二进制类型）</li>
<li>通过 <code>str.encode()</code> 与 <code>byte.decode()</code> 可以在两种字符串之间做转换</li>
<li>优先推荐的字符串格式化方式（从前往后）： <code>f-string</code>、<code>str.format()</code>、<code>C语言风格格式化(%)</code></li>
<li>使用以r开头的字符串内置方法可以从右往左处理字符串，特定场景下可以派上用场</li>
</ul>
<p>代码可读性</p>
<ul>
<li>在定义数值字面量时，可以通过插入_字符来提升可读性</li>
<li>不要出现“神奇”的字面量，使用常量或者枚举类型替换它们</li>
<li>保留数学算式表达式不会影响性能，并且可以提升可读性</li>
<li>使用 <code>textwrap.dedent()</code> 可以让多行字符串更好地融入代码</li>
</ul>
<p>代码可维护性</p>
<ul>
<li>当操作SQL语句等结构化字符串时，使用专有模块比裸处理的代码更易于维护</li>
<li>使用 <code>Jinja2</code> 模板来替代字符串拼接操作</li>
</ul>
<p>语言内部</p>
<ul>
<li>对于从 -5 到 256 的这些常用小整数， Python 会将它们缓存在内存里的一个数组中。当你的程序需要用到这些数字时， Python 不会创建任何新的整型对象，而是会返回缓存中的对象。这样能为程序节约可观的内存</li>
<li>使用dis模块可以查看Python字节码，帮助我们理解内部原理</li>
<li>使用 <code>timeit</code> 模块可以对Python代码方便地进行性能测试</li>
<li>Python语言进化得很快，不要轻易被旧版本的“经验”所左右</li>
</ul>
<h2 id="容器类型"><a href="#容器类型" class="headerlink" title="容器类型"></a>容器类型</h2><p>基础知识</p>
<ul>
<li>在进行函数调用时，传递的不是变量的值或者引用，而是变量所指对象的引用</li>
<li>Python 内置类型分为可变与不可变两种，可变性会影响一些操作的行为，比如 <code>+=</code></li>
<li>对于可变类型，必要时对其进行拷贝操作，能避免产生意料之外的影响</li>
<li>常见的浅拷贝方式：<code>copy.copy</code>、推导式、切片操作</li>
<li>使用 <code>copy.deepcopy</code> 可以进行深拷贝操作</li>
</ul>
<p>列表与元组</p>
<ul>
<li>使用 <code>enumerate</code> 可以在遍历列表的同时获取下标</li>
<li>函数的多返回值其实是一个元组</li>
<li>不存在元组推导式，但可以使用tuple来将生成器表达式转换为元组</li>
<li>元组经常用来表示一些结构化的数据</li>
</ul>
<p>字典与集合</p>
<ul>
<li>在Python 3.7版本前，字典类型是无序的，之后变为保留数据的插入顺序</li>
<li>使用 <code>OrderedDict</code> 可以在 Python 3.7 以前的版本里获得有序字典</li>
<li>只有可哈希的对象才能存入集合，或者作为字典的键使用</li>
<li>使用有序字典 <code>OrderedDict</code> 可以快速实现有序去重</li>
<li>使用 <code>fronzenset</code> 可以获得一个不可变的集合对象</li>
<li>集合可以方便地进行集合运算，计算交集、并集</li>
<li>不要通过继承 <code>dict</code> 来创建自定义字典类型</li>
</ul>
<p>代码可读性技巧</p>
<ul>
<li>具名元组比普通元组可读性更强</li>
<li>列表推导式可以更快速地完成遍历、过滤、处理以及构建新列表操作</li>
<li>不要编写过于复杂的推导式，用朴实的代码替代就好</li>
<li>不要把推导式当作代码量更少的循环，写普通循环就好</li>
</ul>
<p>代码可维护性技巧</p>
<ul>
<li>当访问的字典键不存在时，可以选择捕获异常或先做判断，优先推荐捕获异常</li>
<li>使用 <code>get</code> 、 <code>setdefault</code> 、<code>带参数的pop方法</code> 可以简化边界处理逻辑</li>
<li>使用具名元组作为返回值，比普通元组更好扩展</li>
<li>当字典键不存在时，使用 <code>defaultdict</code> 可以简化处理</li>
<li>继承 <code>MutableMapping</code> 可以方便地创建自定义字典类，封装处理逻辑(如果直接继承 <code>dict</code> ，当重写 <code>__setitem__</code> 时，直接赋值可以出发该函数，但 <code>update</code> 无法触发该操作，继承 <code>MutableMapping</code> 可以解决这个问题，自定义其他容器也会存在类似问题)</li>
<li>用生成器按需返回成员，比直接返回一个结果列表更灵活，也更省内存</li>
<li>使用动态解包语法可以方便地合并字典</li>
<li>不要在遍历列表的同时修改，否则会出现不可预期的结果</li>
</ul>
<p>代码性能要点</p>
<ul>
<li>列表的底层实现决定了它的头部操作很慢， <code>deque</code> 类型则没有这个问题</li>
<li>当需要判断某个成员在容器中是否存在时，使用字典&#x2F;集合更快</li>
</ul>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 具名元组</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Rectangle = namedtuple(<span class="string">&#x27;Rectangle&#x27;</span>, <span class="string">&#x27;width,height&#x27;</span>)</span><br><span class="line">rect = Rectangle(width=<span class="number">100</span>, height=<span class="number">200</span>)</span><br><span class="line">rect.width  <span class="comment"># 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.6 语法</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> NamedTuple</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle2</span>(<span class="title class_ inherited__">NamedTuple</span>):</span><br><span class="line">    width: <span class="built_in">int</span></span><br><span class="line">    height: <span class="built_in">int</span></span><br><span class="line">rect = Rectangle2(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">rect.width  <span class="comment"># 100</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典的 setdefault 方法</span></span><br><span class="line">d = &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;foobar&#x27;</span>&#125;</span><br><span class="line">d.setdefault(<span class="string">&#x27;items&#x27;</span>, []).append(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># &#123;&#x27;title&#x27;: &#x27;foobar&#x27;, &#x27;items&#x27;: [&#x27;foo&#x27;]&#125;</span></span><br><span class="line">d.setdefault(<span class="string">&#x27;items&#x27;</span>, []).append(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># &#123;&#x27;title&#x27;: &#x27;foobar&#x27;, &#x27;items&#x27;: [&#x27;foo&#x27;, &#x27;bar&#x27;]&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># OrderedDict</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">d1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;piglei&#x27;</span>, <span class="string">&#x27;fruit&#x27;</span>: <span class="string">&#x27;apple&#x27;</span>&#125;</span><br><span class="line">d2 = &#123;<span class="string">&#x27;fruit&#x27;</span>: <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;piglei&#x27;</span>&#125;</span><br><span class="line">d1 == d2  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">d1 = OrderedDict(name=<span class="string">&#x27;piglei&#x27;</span>, fruit=<span class="string">&#x27;apple&#x27;</span>)</span><br><span class="line">d2 = OrderedDict(fruit=<span class="string">&#x27;apple&#x27;</span>, name=<span class="string">&#x27;piglei&#x27;</span>)</span><br><span class="line">d1 == d2  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 OrderedDict 可以实现有序去重</span></span><br><span class="line">nums = [<span class="number">10</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">2</span>]</span><br><span class="line"><span class="built_in">set</span>(nums)  <span class="comment"># &#123;2, 3, 10, 21&#125;</span></span><br><span class="line"><span class="built_in">list</span>(OrderedDict.fromkeys(nums))  <span class="comment"># [10, 2, 3, 21]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frozenset</span></span><br><span class="line"><span class="comment"># frozenset 是一个内置的类型，不需要导入</span></span><br><span class="line">f_set = <span class="built_in">frozenset</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># deque，当用列表向头插入输入数据时，会存在性能问题，使用 deque 可以解决这个问题</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">　</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deque_append</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;不断往尾部追加&quot;&quot;&quot;</span></span><br><span class="line">    l = deque()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5000</span>):</span><br><span class="line">        l.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deque_appendleft</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;不断往头部插入&quot;&quot;&quot;</span></span><br><span class="line">    l = deque()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5000</span>):</span><br><span class="line">        l.appendleft(i)</span><br></pre></td></tr></table></figure>

<h2 id="分之流程控制"><a href="#分之流程控制" class="headerlink" title="分之流程控制"></a>分之流程控制</h2><p>条件分支语句</p>
<ul>
<li>不要显式地和布尔值做比较</li>
<li>利用类型本身的布尔值规则，省略零值判断</li>
<li>把not代表的否定逻辑移入表达式内部</li>
<li>仅在需要判断某个对象是否是None、True、False时，使用is运算符</li>
</ul>
<p>Python数据模型</p>
<ul>
<li>定义 <code>__len__</code> 和 <code>__bool__</code> 魔法方法，可以自定义对象的布尔值规则</li>
<li>定义 <code>__eq__</code> 方法，可以修改对象在进行 <code>==</code> 运算时的行为</li>
</ul>
<p>代码可读性技巧</p>
<ul>
<li>不同分支内容易出现重复或类似的代码，把它们抽到分支外可提升代码的可读性</li>
<li>使用“德摩根定律”可以让有多重否定的表达式变得更容易理解<ul>
<li>德摩根定律 - <code>not A or not B</code> 等价于 <code>not (A and B)</code></li>
</ul>
</li>
</ul>
<p>代码可维护性技巧</p>
<ul>
<li>尽可能让三元表达式保持简单</li>
<li>扁平优于嵌套：使用“提前返回”优化代码里的多层分支嵌套</li>
<li>当条件表达式变得特别复杂时，可以尝试封装新的函数和方法来简化</li>
<li>and的优先级比or高，不要忘记使用括号来让逻辑更清晰</li>
<li>在使用or运算符替代条件分支时，请注意避开因布尔值运算导致的陷阱</li>
</ul>
<p>代码组织技巧</p>
<ul>
<li><code>bisect</code> 模块可以用来优化范围类分支判断</li>
<li>字典类型可以用来替代简单的条件分支语句</li>
<li>尝试总结条件分支代码里的规律，用更精简、更易扩展的方式改写它们</li>
<li>使用 <code>any()</code> 和 <code>all()</code> 内置函数可以让条件表达式变得更精简</li>
</ul>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"><span class="comment"># 注意：用来做二分查找的容器必须是已经排好序的</span></span><br><span class="line">breakpoints = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="comment"># bisect 函数会返回值在列表中的位置，0 代表相应的值位于第一个元素 10 之前</span></span><br><span class="line">bisect.bisect(breakpoints, <span class="number">1</span>)  <span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 3 代表相应的值位于第三个元素 30 之后</span></span><br><span class="line">bisect.bisect(breakpoints, <span class="number">35</span>)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>

<h2 id="异常与错误处理"><a href="#异常与错误处理" class="headerlink" title="异常与错误处理"></a>异常与错误处理</h2><p>基础知识</p>
<ul>
<li>一个 try 语句支持多个 except 子句，但请记得把更精确的异常类放在前面</li>
<li>try 语句的 else 分支会在没有异常时执行，因此它可用来替代标记变量</li>
<li>不带任何参数的 raise 语句会重复抛出当前异常</li>
<li>上下文管理器经常用来处理异常，它最常见的用途是替代 finally 子句</li>
<li>上下文管理器可以用来忽略某段代码里的异常</li>
<li>使用 <code>@contextmanager</code> 装饰器可以轻松定义上下文管理器</li>
<li>和许多其他编程语言不同，在Python里抛出和捕获异常是很轻量的操作，即使大量抛出、捕获异常，也不会给程序带来过多额外负担。</li>
</ul>
<p>错误处理与参数校验</p>
<ul>
<li>当你可以选择编写条件判断或异常捕获时，优先选异常捕获（EAFP）<ul>
<li>EAFP（easier to ask for forgiveness than permission），可直译为“获取原谅比许可简单”</li>
</ul>
</li>
<li>不要让函数返回错误信息，直接抛出自定义异常吧</li>
<li>手动校验数据合法性非常烦琐，尽量使用专业模块来做这件事</li>
<li>不要使用 assert 来做参数校验，用 raise 替代它<ul>
<li>assert 是一个专供开发者调试程序的关键字。它所提供的断言检查，可以在执行 Python 时使用 -O 选项直接跳过</li>
</ul>
</li>
<li>处理错误需要付出额外成本，假如能通过设计避免它就再好不过了</li>
<li>在设计 API 时，需要慎重考虑是否真的有必要抛出错误</li>
<li>使用“空对象模式”能免去一些针对边界情况的错误处理工作</li>
</ul>
<p>捕获异常时</p>
<ul>
<li>过于模糊和宽泛的异常捕获可能会让程序免于崩溃，但也可能会带来更大的麻烦</li>
<li>异常捕获贵在精确，只捕获可能抛出异常的语句，只捕获可能的异常类型</li>
<li>有时候，让程序提早崩溃未必是什么坏事</li>
<li>完全忽略异常是风险非常高的行为，大多数情况下，至少记录一条错误日志</li>
</ul>
<p>抛出异常时</p>
<ul>
<li>保证模块内抛出的异常与模块自身的抽象级别一致</li>
<li>如果异常的抽象级别过高，把它替换为更低级的新异常</li>
<li>如果异常的抽象级别过低，把它包装成更高级的异常，然后重新抛出</li>
<li>不要让调用方用字符串匹配来判断异常种类，尽量提供可区分的异常</li>
</ul>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_conn_obj</span>(<span class="params">host, port, timeout=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建连接对象，并在退出上下文时自动关闭&quot;&quot;&quot;</span></span><br><span class="line">    conn = create_conn(host, port, timeout=timeout)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> conn</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure>

<h2 id="循环与可迭代对象"><a href="#循环与可迭代对象" class="headerlink" title="循环与可迭代对象"></a>循环与可迭代对象</h2><p>迭代与迭代器原理</p>
<ul>
<li>使用 <code>iter()</code> 函数会尝试获取一个迭代器对象</li>
<li>使用 <code>next()</code> 函数会获取迭代器的下一个内容</li>
<li>可以将for循环简单地理解为 while 循环+不断调用 <code>next()</code></li>
<li>自定义迭代器需要实现 <code>__iter__</code> 和 <code>__next__</code> 两个魔法方法</li>
<li>生成器对象是迭代器的一种</li>
<li><code>iter(callable, sentinel)</code> 可以基于可调用对象构造一个迭代器</li>
</ul>
<p>迭代器与可迭代对象</p>
<ul>
<li>迭代器和可迭代对象是不同的概念</li>
<li>可迭代对象不一定是迭代器，但迭代器一定是可迭代对象</li>
<li>对可迭代对象使用 <code>iter()</code> 会返回迭代器，迭代器则会返回它自身</li>
<li>每个迭代器的被迭代过程是一次性的，可迭代对象则不一定</li>
<li>可迭代对象只需要实现 <code>__iter__</code> 方法，而迭代器要额外实现 <code>__next__</code> 方法</li>
</ul>
<p>代码可维护性技巧</p>
<ul>
<li>通过定义生成器函数来修饰可迭代对象，可以优化循环内部代码</li>
<li><code>itertools</code> 模块里有许多函数可以用来修饰可迭代对象</li>
<li>生成器函数可以用来解耦循环代码，提升可复用性</li>
<li>不要使用多个 <code>break</code> ，拆分为函数然后直接 <code>return</code> 更好</li>
<li>使用 <code>next()</code> 函数有时可以完成一些意想不到的功能</li>
</ul>
<p>文件操作知识</p>
<ul>
<li>使用标准做法读取文件内容，在处理没有换行符的大文件时会很慢</li>
<li>调用 <code>file.read()</code> 方法可以解决读取大文件的性能问题</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数参数与返回相关基础知识</p>
<ul>
<li>不要使用可变类型作为参数默认值，用None来代替</li>
<li>通过 <code>__defaults__</code> 属性可以直接获取函数的参数默认值</li>
<li>用 <code>object()</code> 来做可能传入 <code>None</code> 的函数默认值</li>
<li>使用标记对象，可以严格区分函数调用时是否提供了某个参数</li>
<li>定义仅限关键字参数，可以强制要求调用方提供参数名，提升可读性</li>
<li>函数应该拥有稳定的返回类型，不要返回多种类型</li>
<li>适合返回None的情况——操作类函数、查询类函数表示意料之中的缺失值</li>
<li>在执行失败时，相比返回None，抛出异常更为合适</li>
<li>如果提前返回结果可以提升可读性，就提前返回，不必追求“单一出口”</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">append_value</span>(<span class="params">value, items=[]</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;向 items 列表中追加内容，并返回列表&quot;&quot;&quot;</span></span><br><span class="line">    items.append(value)</span><br><span class="line">    <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: append_value.__defaults__</span><br><span class="line">Out[<span class="number">2</span>]: ([],)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义标记变量</span></span><br><span class="line"><span class="comment"># object 通常不会单独使用，但是拿来做这种标记变量刚刚好</span></span><br><span class="line">_not_set = <span class="built_in">object</span>()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump_value</span>(<span class="params">value, extra=_not_set</span>):</span><br><span class="line">    <span class="keyword">if</span> extra <span class="keyword">is</span> _not_set:</span><br><span class="line">        <span class="comment"># 调用方没有传递 extra 参数</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>代码可维护性技巧</p>
<ul>
<li>不要编写太长的函数，但长度并没有标准，65行算是一个危险信号</li>
<li>圈复杂度是评估函数复杂程度的常用指标，圈复杂度超过10的函数需要重构</li>
<li>抽象与分层思想可以帮我们更好地构建与管理复杂的系统</li>
<li>同一个函数内的代码应该处在同一抽象级别</li>
</ul>
<p>函数与状态</p>
<ul>
<li>没有副作用的无状态纯函数易于理解，容易维护，但大多数时候“状态”不可避免</li>
<li>避免使用全局变量给函数增加状态</li>
<li>当函数状态较简单时，可以使用闭包技巧</li>
<li>当函数需要较为复杂的状态管理时，建议定义类来管理状态</li>
</ul>
<p>语言机制对函数的影响</p>
<ul>
<li><code>functools.partial()</code> 可以用来快速构建偏函数</li>
<li><code>functools.lru_cache()</code> 可以用来给函数添加缓存</li>
<li>比起 <code>map</code> 和 <code>filter</code> ，列表推导式的可读性更强，更应该使用</li>
<li><code>lambda</code> 函数只是一种语法糖，你可以使用 <code>operator</code> 模块等方式来替代它</li>
<li>Python 语言里的递归限制较多，可能的话，请尽量使用循环来替代</li>
</ul>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>基础与技巧</p>
<ul>
<li>装饰器最常见的实现方式，是利用闭包原理通过多层嵌套函数实现</li>
<li>在实现装饰器时，请记得使用 <code>wraps()</code> 更新包装函数的元数据，添加 <code>@wraps(wrapped)</code> 来装饰 decorated 函数后，<code>wraps()</code> 首先会基于原函数 func 来更新包装函数 decorated 的名称、文档等内置属性，之后会将 func 的所有额外属性赋值到 decorated 上</li>
<li><code>wraps()</code> 不光可以保留元数据，还能保留包装函数的额外属性</li>
<li>利用仅限关键字参数，可以很方便地实现可选参数的装饰器</li>
</ul>
<p>使用类来实现装饰器</p>
<ul>
<li>只要是可调用的对象，都可以用作装饰器</li>
<li>实现了__call__方法的类实例可调用</li>
<li>基于类的装饰器分为两种：“函数替换”与“实例替换”</li>
<li>“函数替换”装饰器与普通装饰器没什么区别，只是嵌套层级更少</li>
<li>通过类来实现“实例替换”装饰器，在管理状态和追加行为上有天然的优势</li>
<li>混合使用类和函数来实现装饰器，可以灵活满足各种场景</li>
</ul>
<p>使用wrapt模块</p>
<ul>
<li>使用wrapt模块可以方便地让装饰器同时兼容函数和类方法</li>
<li>使用wrapt模块可以帮你写出结构更扁平的装饰器代码</li>
</ul>
<p>装饰器设计技巧</p>
<ul>
<li>装饰器将包装调用提前到了函数被定义的位置，它的大部分优点也源于此</li>
<li>在编写装饰器时，请考虑你的设计是否能很好发挥装饰器的优势</li>
<li>在某些场景下，类装饰器可以替代元类，并且代码更简单</li>
<li>装饰器和装饰器模式截然不同，不要弄混它们</li>
<li>装饰器里应该只有一层浅浅的包装代码，要把核心逻辑放在其他函数与类中</li>
</ul>
<h2 id="附录1-内置语法特性"><a href="#附录1-内置语法特性" class="headerlink" title="附录1-内置语法特性"></a>附录1-内置语法特性</h2><ul>
<li><p><code>locals()</code> - 返回当前作用域内的所有局部变量</p>
</li>
<li><p>Python 的浮点数是使用符合 IEEE-754 规范的双精度，使用 53 个比特精度来表示十进制浮点数</p>
</li>
<li><p><code>str.partition(sep)</code> - 从左往右查找第一个 sep 出现的位置，返回一个三元组，包含分割前的字符串、sep、分割后的字符串</p>
</li>
<li><p><code>str.translate(table)</code> - 使用 table 中的映射关系来替换字符串中的字符</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;明明是中文,却使用了英文标点.&#x27;</span></span><br><span class="line"><span class="comment"># 创建替换规则表：&#x27;,&#x27; -&gt; &#x27;，&#x27;, &#x27;.&#x27; -&gt; &#x27;。&#x27;</span></span><br><span class="line">table = s.maketrans(<span class="string">&#x27;,.&#x27;</span>, <span class="string">&#x27;，。&#x27;</span>)</span><br><span class="line">s.translate(table)</span><br><span class="line"><span class="comment"># &#x27;明明是中文，却使用了英文标点。&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>enmuerate(iterable, start=0)</code> - 返回一个枚举对象，包含每个元素的索引值与元素值</p>
<ul>
<li><code>start</code> - 索引起始值，默认为0</li>
</ul>
</li>
<li><p><code>frozenset</code> - 不可变集合，不支持添加、删除操作，比起 set 没有以下方法</p>
<ul>
<li><code>add</code></li>
<li><code>clear</code></li>
<li><code>discard</code></li>
<li><code>pop</code></li>
<li><code>remove</code></li>
<li><code>update</code></li>
<li><code>|=</code> &#x2F; <code>&amp;=</code> &#x2F; <code>-=</code> &#x2F; <code>^=</code></li>
</ul>
</li>
<li><p><code>if</code> 语句后直接放自定义类型，会优先查找 <code>__bool__</code> 的定义，如果没有再查找 <code>__len__</code> 的定义，如果都没有，会返回 True</p>
</li>
<li><p>Python 中 <code>True</code> &#x2F; <code>False</code> &#x2F; <code>None</code> 是严格以单例模式实现的，可以使用 <code>is</code> 来判断两个变量是否指向同一个对象</p>
</li>
<li><p><code>all(iterable)</code> - 仅当iterable中所有成员的布尔值都为真时返回True，否则返回False</p>
</li>
<li><p><code>any(iterable)</code> - 只要iterable中任何一个成员的布尔值为真就返回True，否则返回False</p>
</li>
<li><p><code>with</code> 语句会在代码块执行前调用 <code>__enter__</code> 方法，执行后调用 <code>__exit__</code> 方法，使用 with 语句的对象必须实现这两个方法，这两个方法都可以返回一个值，如果 <code>__exit__</code> 返回 True，异常会被忽略，否则异常会被重新抛出</p>
<ul>
<li><code>__exit__</code> 接受三个参数，exc_type &#x2F; exc_val &#x2F; exc_tb，分别表示异常类型、异常对象、异常堆栈信息</li>
<li><code>__exit__</code> 返回 True 时，异常会被忽略，返回 False 时，异常会被重新抛出</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ignore_close</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="keyword">if</span> exc_type == CloseError:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>当你使用 <code>for</code> 循环遍历某个可迭代对象时，其实是先调用了 <code>iter()</code> 拿到它的迭代器，然后不断地用 <code>next()</code> 从迭代器中获取值</p>
</li>
<li><p>如果一个类型没有定义 <code>__iter__</code> ，但是定义了 <code>__getitem__</code> 方法，那么 Python 也会认为它是可迭代的。在遍历它时，解释器会不断使用数字索引值(0, 1, 2, …)来调用 <code>__getitem__</code> 方法获得返回值，直到抛出 <code>IndexError</code> 为止。</p>
</li>
</ul>
<h2 id="附录2-内置库功能"><a href="#附录2-内置库功能" class="headerlink" title="附录2-内置库功能"></a>附录2-内置库功能</h2><ul>
<li><p><code>timeit.timeit(setup, setup, timer, number)</code> - 测试代码执行时间</p>
<ul>
<li><code>stmt</code> - 这将采用您要测量其执行时间的代码。默认值为 <code>pass</code></li>
<li><code>setup</code> - 这将包含需要在stmt之前执行的设置详细信息。默认值为 <code>pass</code></li>
<li><code>timer</code> - 它将具有计时器值，<code>timeit()</code> 已经设置了默认值，我们可以忽略它</li>
<li><code>number</code> - <code>stmt</code> 将按照此处给出的编号执行多少次。默认值为1000000</li>
</ul>
</li>
<li><p><code>textwrap.dedent(text)</code> - dedent方法会删除整段字符串左侧的空白缩进。使整段代码的缩进视觉效果保持正常</p>
</li>
<li><p><code>collections.namedtuple(typename, field_names, *, rename=False, defaults=None, module=None)</code> - 创建一个具名元组子类</p>
<ul>
<li><code>typename</code> - 元组名称</li>
<li><code>field_names</code> - 元组字段名称，可以是字符串列表、空格分隔的字符串、逗号分割的字符串</li>
<li><code>rename</code> - 如果字段名称中有 Python 关键字，需要设置为 <code>True</code>，默认为 <code>False</code></li>
<li><code>defaults</code> - 字段的默认值，可以是一个列表或者是一个字典</li>
<li><code>module</code> - 指定元组所在的模块名称</li>
</ul>
</li>
<li><p><code>bisect.bisect(a, x)</code> - 在有序序列 a 中查找 x 的插入位置，返回插入位置的索引值</p>
</li>
<li><p><code>bisect.insort(a, x)</code> - 在有序序列 a 中插入 x，返回插入位置的索引值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bisect <span class="keyword">import</span> bisect, insort</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">20</span>]</span><br><span class="line">bisect(a, <span class="number">7</span>)  <span class="comment"># 3</span></span><br><span class="line">insort(a, <span class="number">7</span>)  <span class="comment"># [1, 4, 6, 7, 8, 12, 15, 20]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>itertools.product(*iterables, repeat=1)</code> - 接受多个可迭代对象，返回计算笛卡尔积</p>
</li>
<li><p><code>itertools.islice(iterable, start, stop[, step])</code> - 返回一个迭代器，从 <code>start</code> 开始，到 <code>stop</code> 结束，步长为 <code>step</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中时间操作</title>
    <url>/2021/python_datetime/</url>
    <content><![CDATA[<blockquote>
<p>说明：以 classmethod 开头表示类方法，不以 classmethod 开头表示对象方法</p>
</blockquote>
<h2 id="datetime-timezone"><a href="#datetime-timezone" class="headerlink" title="datetime.timezone"></a>datetime.timezone</h2><p>class datetime.timezone(offset, name&#x3D;None)</p>
<ul>
<li>offset需要指定一个timedelta对象，表示与UTC时间的差值，范围在 <code>-timedelta(hours=24)</code> 到 <code>timedelta(hours=24)</code> 之间，注意这两个值不能取</li>
</ul>
<p>timezone.utc</p>
<ul>
<li>返回一个timezone对象，表示获取utc时区，等同于 <code>datetime.timezone(deltatime(0))</code></li>
<li>这是一个类属性（准确说是一个变量），不能在后面加括号调用</li>
</ul>
<h2 id="datetime-datetime"><a href="#datetime-datetime" class="headerlink" title="datetime.datetime"></a>datetime.datetime</h2><p>class datetime.datetime(year, month, day, hour&#x3D;0, minute&#x3D;0, second&#x3D;0, microsecond&#x3D;0, tzinfo&#x3D;None, *, fold&#x3D;0)</p>
<ul>
<li>year、month、day 值是必须的，tzinfo可以为None，也可以为tzinfo的一个实例</li>
</ul>
<p>classmethod datetime.now(tz&#x3D;None)</p>
<ul>
<li>获取当前时间，返回一个datetime对象，默认tzinfo为None，表示本地时区，可以手动指定时区</li>
</ul>
<p>classmethod datetime.today()</p>
<ul>
<li>获取本地当前时间，相当于now(tz&#x3D;None)</li>
</ul>
<p>classmethod datetime.utcnow()</p>
<ul>
<li>获取utc时区的当前时间，tzinfo为None</li>
</ul>
<p>classmethod datetime.strptime(date_string, format)</p>
<ul>
<li>将字符串解析为datetime时间，format表示date_string的格式</li>
</ul>
<p>datetime.strftime(format)</p>
<ul>
<li>返回一个字符串，由format控制格式</li>
</ul>
<p>classmethod datetime.fromtimestamp(timestamp, tz&#x3D;None)</p>
<ul>
<li>将时间戳转换为datetime格式，不指定tz则为本地时区时间。</li>
</ul>
<p>classmethod datetime.utcfromtimestamp(timestamp)</p>
<ul>
<li>将时间戳转换为datetime格式的utc时区时间</li>
</ul>
<p>datetime.timestamp()</p>
<ul>
<li>返回datetime对应的时间戳</li>
</ul>
<p>classmethod datetime.combine(date, time, tzinfo&#x3D;self.tzinfo)</p>
<ul>
<li>将时间、日期组成一个datetime格式的时间</li>
</ul>
<p>datetime.year&#x2F;month&#x2F;day&#x2F;hour&#x2F;minute&#x2F;second&#x2F;microsecond&#x2F;tzinfo</p>
<ul>
<li>获取datetime的部分时间信息</li>
</ul>
<p>datetime.date()&#x2F;time()</p>
<ul>
<li>获取datetime的时间或日期信息</li>
</ul>
<p>datetime.weekday()</p>
<ul>
<li>返回时间对应的星期，星期一为0，星期天为6</li>
</ul>
<p>datetime.isoweekday()</p>
<ul>
<li>以整数形式返回星期，星期一为1，星期天为7</li>
</ul>
<h2 id="django-utils-timezone"><a href="#django-utils-timezone" class="headerlink" title="django.utils.timezone"></a>django.utils.timezone</h2><p>utc</p>
<ul>
<li>获取utc时区的tzinfo实例（可以赋值给tz）</li>
</ul>
<p>now()</p>
<ul>
<li>获取当前时间，使用时区为UTC时区</li>
</ul>
<p>get_current_timezone()</p>
<ul>
<li>获取本地时区的tzinfo实例</li>
</ul>
<p>localtime(value&#x3D;None, timezone&#x3D;None)</p>
<ul>
<li>将带时区的datetime转换为指定时区的datetime</li>
<li>value是带时区的datetime类型，默认为now()</li>
<li>timezone默认为本地时区</li>
</ul>
<p>localdate(value&#x3D;None, timezone&#x3D;None)</p>
<ul>
<li>将带时区的datetime转换为指定时区的date</li>
<li>value是带时区的datetime类型，默认为now()</li>
<li>timezone默认为本地时区</li>
</ul>
<p>is_aware(value)</p>
<ul>
<li>是否有时区，value为datetime类型，tzinfo不为None返回True</li>
</ul>
<p>is_naive(value)</p>
<ul>
<li>是否无时区，和is_aware相反</li>
</ul>
<p>make_aware(value, timezone&#x3D;None, is_dst&#x3D;None)</p>
<ul>
<li>将无时区的datetime转换为有时区的datetime，</li>
<li>value是一个没有时区的datetime类型，timezone为None则默认使用本地时区</li>
</ul>
<p>make_naive(value, timezone&#x3D;None)</p>
<ul>
<li>将有时区的datetime转换为无时区的datetime</li>
<li>value是一个有时区的datetime，会先把时间转换到指定时区的时间，然后去除时区信息</li>
<li>timezone为None默认使用本地时区</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析 Python 字典的键</title>
    <url>/2023/python_dict_key/</url>
    <content><![CDATA[<h2 id="Python-字典的键的定义"><a href="#Python-字典的键的定义" class="headerlink" title="Python 字典的键的定义"></a>Python 字典的键的定义</h2><p>什么类型可以作为字典的键，在 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesmapping">Python 字典介绍</a> 中介绍到 Python 的 Dict 本质是一个 Mapping 对象，它本质是将一个 hashable 值映射到一个任意对象上。这里的 hashable 值就是字典的键，任意对象就是字典的值。</p>
<h2 id="Python-中的-hashable-值"><a href="#Python-中的-hashable-值" class="headerlink" title="Python 中的 hashable 值"></a>Python 中的 hashable 值</h2><p>什么是 hashable 值呢？在 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-hashable">Hashable - 可哈希</a> 中定义了 hashable ，其中主要有以下几个特点：</p>
<ul>
<li>在一个对象的生命周期内，它的 hash 值不变 ( <code>__hash__()</code> 方法的返回值不变)</li>
<li>如果两个对象是相等的，那么它们的 hash 值也必须相等</li>
<li>大多数的内置的不可变类型都是可 hash 的，如，<code>int</code>、<code>float</code>、<code>str</code></li>
<li>可变容器都不可 hash ，如，<code>list</code>、<code>dict</code>、<code>set</code></li>
<li>不可变容器只有当所有的元素都可 hash 时，才可 hash ，如，<code>tuple</code>、<code>frozenset</code></li>
<li>用户自定义的类，默认都是可 hash 的， hash 值的生产基于对象的 <code>id()</code></li>
</ul>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="1-基础不可变类型"><a href="#1-基础不可变类型" class="headerlink" title="1. 基础不可变类型"></a>1. 基础不可变类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_a = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    <span class="number">1.5</span>: <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-可变的容器类型"><a href="#2-可变的容器类型" class="headerlink" title="2. 可变的容器类型"></a>2. 可变的容器类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_a = &#123;</span><br><span class="line">    [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]: <span class="string">&quot;any_type&quot;</span>,  <span class="comment"># TypeError: unhashable type: &#x27;list&#x27;</span></span><br><span class="line">    &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;: <span class="string">&quot;any_type&quot;</span>,  <span class="comment"># TypeError: unhashable type: &#x27;set&#x27;</span></span><br><span class="line">    &#123;<span class="string">&quot;a&quot;</span>: <span class="string">&quot;b&quot;</span>&#125;: <span class="string">&quot;any_type&quot;</span>,  <span class="comment"># TypeError: unhashable type: &#x27;dict&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-不可变的容器类型"><a href="#3-不可变的容器类型" class="headerlink" title="3. 不可变的容器类型"></a>3. 不可变的容器类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_a = &#123;</span><br><span class="line">    (<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>): <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    <span class="built_in">frozenset</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]): <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    <span class="built_in">frozenset</span>(&#123;<span class="string">&quot;a&quot;</span>: <span class="string">&quot;b&quot;</span>&#125;): <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    (<span class="string">&quot;a&quot;</span>, (<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)): <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    (<span class="string">&quot;a&quot;</span>, [<span class="string">&quot;b&quot;</span>]): <span class="string">&quot;any_type&quot;</span>,           <span class="comment"># TypeError: unhashable type: &#x27;list&#x27;</span></span><br><span class="line">    (<span class="string">&quot;a&quot;</span>, &#123;<span class="string">&quot;b&quot;</span>: <span class="string">&quot;c&quot;</span>&#125;): <span class="string">&quot;any_type&quot;</span>,      <span class="comment"># TypeError: unhashable type: &#x27;dict&#x27;</span></span><br><span class="line">    (<span class="string">&quot;a&quot;</span>, (<span class="string">&quot;b&quot;</span>, [<span class="string">&quot;c&quot;</span>])): <span class="string">&quot;any_type&quot;</span>,    <span class="comment"># TypeError: unhashable type: &#x27;list&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-自定义的类"><a href="#4-自定义的类" class="headerlink" title="4. 自定义的类"></a>4. 自定义的类</h3><ul>
<li><p>默认自定义的类都是可 hash 的</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">dict_a = &#123;</span><br><span class="line">    A: <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    A(): <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    A(): <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dict_a))      <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义了 <code>__hash__()</code> 方法的类，其实例也是可 hash 的</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">id</span>(<span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">dict_a = &#123;</span><br><span class="line">    A: <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    A(): <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    A(): <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dict_a))      <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>仅当 <code>__hash__()</code> 相等时，发生 hash 冲突，但不会覆盖值，因为默认对象的实例之间是不相等的，原因参考 <a href="https://docs.python.org/zh-cn/3/reference/expressions.html#value-comparisons">值比较</a></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">dict_a = &#123;</span><br><span class="line">    A: <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    A(): <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    A(): <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dict_a))      <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>当仅定义了 <code>__eq__()</code> 方法时，其实例是不可 hash 的，解释参考 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__hash__"><code>__hash__()</code></a></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">dict_a = &#123;</span><br><span class="line">    A: <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    A(): <span class="string">&quot;any_type&quot;</span>,    <span class="comment"># TypeError: unhashable type: &#x27;A&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当同时定义了 <code>__hash__()</code> 和 <code>__eq__()</code> 方法时，其实例是可 hash 的</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">id</span>(<span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">dict_a = &#123;</span><br><span class="line">    A: <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    A(): <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    A(): <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dict_a))      <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>当两个实例的 <code>__hash__()</code> 的结果与 <code>__eq__()</code> 均相等时，认为两个是同一个对象。会对值进行覆盖</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">dict_a = &#123;</span><br><span class="line">    A: <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    A(): <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">    A(): <span class="string">&quot;any_type&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dict_a))      <span class="comment"># 2</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>技术原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Float 的存储结构</title>
    <url>/2023/python_float/</url>
    <content><![CDATA[<h2 id="问题导入"><a href="#问题导入" class="headerlink" title="问题导入"></a>问题导入</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: 0.1 + 0.2</span><br><span class="line">Out[1]: 0.30000000000000004</span><br><span class="line"></span><br><span class="line">In [2]: 0.3 + 0.2</span><br><span class="line">Out[2]: 0.5</span><br></pre></td></tr></table></figure>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>python 的 float 类型是由 C 语言的 double 类型实现的，double 类型对应 IEEE754 中的双精度实现方法。 double 类型的存储占用的空间大小在 64 位的机器上为 8 个字节，即 64 个比特位，其中 1 位为符号位，11 位为指数位，52 位为尾数位，如下图所示</p>
<p>浮点数的存储分为两种类型，单精度浮点数和双精度浮点数，分别对应 IEEE754 中的 float 和 double 类型。其中 float 类型占用 4 个字节，即 32 个比特位，double 类型占用 8 个字节，即 64 个比特位。</p>
<p>IEEE754 中，关于双精度浮点数存储定义为 1 位符号位，11 位指数位，52 位尾数位，如下图所示</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"> <span class="number">0</span>                   <span class="number">1</span>                   <span class="number">2</span>                   <span class="number">3</span></span><br><span class="line"> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="string">+-+---------------------+---------------------------------------+</span></span><br><span class="line"><span class="string">|S|</span>      <span class="string">Exponent</span>       <span class="string">|</span>           <span class="string">Fraction</span>                    <span class="string">|</span></span><br><span class="line"><span class="string">|I|</span>      <span class="string">(11</span> <span class="string">bits)</span>      <span class="string">|</span>            <span class="string">(52</span> <span class="string">bits)</span>                  <span class="string">|</span></span><br><span class="line"><span class="string">|G|</span>                     <span class="string">|</span>                                       <span class="string">|</span></span><br><span class="line"><span class="string">|N|</span>                     <span class="string">|</span>                                       <span class="string">|</span></span><br><span class="line"><span class="string">+-+---------------------+---------------------------------------|</span></span><br><span class="line"><span class="string">|</span>                        <span class="string">Fraction</span> <span class="string">(52</span> <span class="string">bits)</span>                     <span class="string">|</span></span><br><span class="line"><span class="string">+---------------------------------------------------------------|</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>sign</code>：符号位，0 代表正数，1 代表负数</li>
<li><code>exponent</code>：指数位，用于表示浮点数的指数部分，用移码表示，即真实值加上 1023</li>
<li><code>fraction</code>：尾数位，用于表示浮点数的尾数部分，用二进制表示，最高位默认为 1，即 <code>1.xxxxxx</code>，所以只需要存储小数点后面的 52 位即可</li>
</ul>
<p>IEEE754 中，关于单精度浮点数存储定义为 1 位符号位，8 位指数位，23 位尾数位，如下图所示</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"> <span class="number">0</span>                   <span class="number">1</span>                   <span class="number">2</span>                   <span class="number">3</span></span><br><span class="line"> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="string">+-+---------------+---------------------------------------------+</span></span><br><span class="line"><span class="string">|S|</span>   <span class="string">Exponent</span>    <span class="string">|</span>                 <span class="string">Fraction</span>                    <span class="string">|</span></span><br><span class="line"><span class="string">|I|</span>   <span class="string">(8</span> <span class="string">bits)</span>    <span class="string">|</span>                  <span class="string">(23</span> <span class="string">bits)</span>                  <span class="string">|</span></span><br><span class="line"><span class="string">|G|</span>               <span class="string">|</span>                                             <span class="string">|</span></span><br><span class="line"><span class="string">|N|</span>               <span class="string">|</span>                                             <span class="string">|</span></span><br><span class="line"><span class="string">+-+---------------+---------------------------------------------|</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用 4 个字节，32 位进行存储</li>
<li><code>sign</code> 符号位，占用一个位，0 代表正数，1 代表负数</li>
<li><code>exponent</code> 指数位，表示浮点的指数位，真实值加上 127，占用 8 个位</li>
<li><code>fraction</code> 尾数位，标识浮点的尾数部分，最高位默认为 1，即 <code>1.xxxxxx</code>，所以只需要存储小数点后面的 23 位即可</li>
</ul>
<h2 id="生成方法"><a href="#生成方法" class="headerlink" title="生成方法"></a>生成方法</h2><ol>
<li>判断符号位，如果是负数，将符号位设置为 1，否则设置为 0</li>
<li>将整数部分转换为二进制</li>
<li>将小数部分不断乘以 2，取整数部分，直到小数部分为 0</li>
<li>将整数和小数部分拼接起来，然后进行规格化，即小数点左移或者右移，使得小数点左边只有一个 1</li>
<li>最后将符号位、指数位和尾数位拼接起来，即为最终的二进制表示</li>
</ol>
<h2 id="末尾位舍入模式"><a href="#末尾位舍入模式" class="headerlink" title="末尾位舍入模式"></a>末尾位舍入模式</h2><p>任何有效数上的运算结果，通常都存放在较长的寄存器中，当结果被放回浮点格式时，必须将多出来的比特丢弃。 有多种方法可以用来运行舍入作业，实际上IEEE标准列出4种不同的方法：</p>
<ol>
<li>舍入到最接近：舍入到最接近，在一样接近的情况下偶数优先（Ties To Even，这是默认的舍入方式）：会将结果舍入为最接近且可以表示的值，但是当存在两个数一样接近的时候，则取其中的偶数（在二进制中式以0结尾的）。</li>
<li>朝+∞方向舍入：会将结果朝正无限大的方向舍入。</li>
<li>朝-∞方向舍入：会将结果朝负无限大的方向舍入。</li>
<li>朝0方向舍入：会将结果朝0的方向舍入。</li>
</ol>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>0.1 值双精度类型的存储计算方法</p>
<ol>
<li><p>0.1 是正数，所以符号位为 0</p>
</li>
<li><p>整数部分为 0，所以整数部分的二进制为 0</p>
</li>
<li><p>小数部分为 0.1，不断乘以 2，取整数部分，直到小数部分为 0</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span> <span class="string">*</span> <span class="number">2</span> <span class="string">=</span> <span class="number">0.2</span> <span class="string">-&gt;</span> <span class="number">0</span></span><br><span class="line"><span class="number">0.2</span> <span class="string">*</span> <span class="number">2</span> <span class="string">=</span> <span class="number">0.4</span> <span class="string">-&gt;</span> <span class="number">0</span></span><br><span class="line"><span class="number">0.4</span> <span class="string">*</span> <span class="number">2</span> <span class="string">=</span> <span class="number">0.8</span> <span class="string">-&gt;</span> <span class="number">0</span></span><br><span class="line"><span class="number">0.8</span> <span class="string">*</span> <span class="number">2</span> <span class="string">=</span> <span class="number">1.6</span> <span class="string">-&gt;</span> <span class="number">1</span></span><br><span class="line"><span class="number">0.6</span> <span class="string">*</span> <span class="number">2</span> <span class="string">=</span> <span class="number">1.2</span> <span class="string">-&gt;</span> <span class="number">1</span></span><br><span class="line"><span class="number">0.2</span> <span class="string">*</span> <span class="number">2</span> <span class="string">=</span> <span class="number">0.4</span> <span class="string">-&gt;</span> <span class="number">0</span></span><br><span class="line"><span class="number">0.4</span> <span class="string">*</span> <span class="number">2</span> <span class="string">=</span> <span class="number">0.8</span> <span class="string">-&gt;</span> <span class="number">0</span></span><br><span class="line"><span class="number">0.8</span> <span class="string">*</span> <span class="number">2</span> <span class="string">=</span> <span class="number">1.6</span> <span class="string">-&gt;</span> <span class="number">1</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>

<p> 所以小数部分的二进制为 <code>000 1100 1100 1100 ...</code></p>
</li>
<li><p>将整数和小数部分拼接起来，得到 <code>0.0001100110011001100110011001100110011001100110011001100</code>，然后进行移位，使得小数点左边只有一个 1，即 <code>1.100110011001100110011001100110011001100110011001100</code>，所以指数位为 -4，即 -4 + 1023 &#x3D; 1019，所以指数位为 011 1111 1011</p>
</li>
<li><p>最后得到的二进制表示为 <code>0 011 1111 1011  1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001</code>，后面还存在的数为 <code>1001 1001</code>，故根据舍入规则算最接近的数应该加 1，所以最后四位变为 <code>1001 + 1 = 1010</code></p>
</li>
<li><p>最后得到 16 进制表示为 <code>3fb999999999999a</code></p>
</li>
</ol>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">float_to_hex</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="comment"># 将浮点数转换为字节表示</span></span><br><span class="line">    <span class="comment"># d 代表 double 类型</span></span><br><span class="line">    <span class="comment"># f 代表 float 类型</span></span><br><span class="line">    <span class="comment"># &gt; 表示大端字节序</span></span><br><span class="line">    <span class="comment"># &lt; 表示小端字节序</span></span><br><span class="line">    bytes_representation = struct.pack(<span class="string">&#x27;&gt;d&#x27;</span>, f)</span><br><span class="line">    <span class="comment"># 将字节表示转换为十六进制字符串</span></span><br><span class="line">    hex_representation = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">format</span>(b, <span class="string">&#x27;02x&#x27;</span>) <span class="keyword">for</span> b <span class="keyword">in</span> bytes_representation)</span><br><span class="line">    <span class="keyword">return</span> hex_representation</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [3]: float_to_hex(0.1)</span><br><span class="line">Out[3]: &#x27;3fb999999999999a&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h2><p>按照拼接的方法进行组合将其拆为 <code>0 011 1111 1011  1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1010</code></p>
<p>第一位为 0，表示正数</p>
<p>指数位为 011 1111 1011，即 1019，减去 1023 得到 -4</p>
<p>即尾数位需要向左移动四个位获得</p>
<p><code>0 000 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1101 0</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">0 = 0 * 2^-1 = 0</span><br><span class="line">0 = 0 * 2^-2 = 0</span><br><span class="line">0 = 0 * 2^-3 = 0</span><br><span class="line"></span><br><span class="line">1 = 1 * 2^-4 = 0.0625</span><br><span class="line">1 = 1 * 2^-5 = 0.03125</span><br><span class="line">0 = 0 * 2^-6 = 0</span><br><span class="line">0 = 0 * 2^-7 = 0</span><br><span class="line"></span><br><span class="line">1 = 1 * 2^-8 = 0.00390625</span><br><span class="line">1 = 1 * 2^-9 = 0.001953125</span><br><span class="line">0 = 0 * 2^-10 = 0</span><br><span class="line">0 = 0 * 2^-11 = 0</span><br><span class="line"></span><br><span class="line">1 = 1 * 2^-12 = 0.000244140625</span><br><span class="line">1 = 1 * 2^-13 = 0.0001220703125</span><br><span class="line">0 = 0 * 2^-14 = 0</span><br><span class="line">0 = 0 * 2^-15 = 0</span><br><span class="line"></span><br><span class="line">1 = 1 * 2^-16 = 0.0000152587890625</span><br><span class="line">1 = 1 * 2^-17 = 0.00000762939453125</span><br><span class="line">0 = 0 * 2^-18 = 0</span><br><span class="line">0 = 0 * 2^-19 = 0</span><br><span class="line"></span><br><span class="line">1 = 1 * 2^-20 = 0.00000095367431640625</span><br><span class="line">1 = 1 * 2^-21 = 0.000000476837158203125</span><br><span class="line">0 = 0 * 2^-22 = 0</span><br><span class="line">0 = 0 * 2^-23 = 0</span><br><span class="line"></span><br><span class="line">1 = 1 * 2^-24 = 0.000000059604644775390625</span><br><span class="line">1 = 1 * 2^-25 = 0.0000000298023223876953125</span><br><span class="line">0 = 0 * 2^-26 = 0</span><br><span class="line">0 = 0 * 2^-27 = 0</span><br><span class="line"></span><br><span class="line">1 = 1 * 2^-28 = 0.0000000037252902984619140625</span><br><span class="line">1 = 1 * 2^-29 = 0.00000000186264514923095703125</span><br><span class="line">0 = 0 * 2^-30 = 0</span><br><span class="line">0 = 0 * 2^-31 = 0</span><br><span class="line"></span><br><span class="line">1 = 1 * 2^-32 = 0.00000000023283064365386962890625</span><br><span class="line">1 = 1 * 2^-33 = 0.000000000116415321826934814453125</span><br><span class="line">0 = 0 * 2^-34 = 0</span><br><span class="line">0 = 0 * 2^-35 = 0</span><br><span class="line"></span><br><span class="line">1 = 1 * 2^-36 = 0.000000000014551915228366851806640625</span><br><span class="line">1 = 1 * 2^-37 = 0.0000000000072759576141834259033203125</span><br><span class="line">0 = 0 * 2^-38 = 0</span><br><span class="line">0 = 0 * 2^-39 = 0</span><br><span class="line"></span><br><span class="line">1 = 1 * 2^-40 = 0.0000000000009094947017729282379150390625</span><br><span class="line">1 = 1 * 2^-41 = 0.00000000000045474735088646411895751953125</span><br><span class="line">0 = 0 * 2^-42 = 0</span><br><span class="line">0 = 0 * 2^-43 = 0</span><br><span class="line"></span><br><span class="line">1 = 1 * 2^-44 = 0.00000000000005684341886057758331298828125</span><br><span class="line">1 = 1 * 2^-45 = 0.000000000000028421709430288791656494140625</span><br><span class="line">0 = 0 * 2^-46 = 0</span><br><span class="line">0 = 0 * 2^-47 = 0</span><br><span class="line"></span><br><span class="line">1 = 1 * 2^-48 = 0.0000000000000035527136788005008697509765625</span><br><span class="line">1 = 1 * 2^-49 = 0.00000000000000177635683940025043487548828125</span><br><span class="line">0 = 0 * 2^-50 = 0</span><br><span class="line">1 = 1 * 2^-51 = 0.0000000000000000888178419700125217437744140625</span><br><span class="line"></span><br><span class="line">0 = 0 * 2^-52 = 0</span><br></pre></td></tr></table></figure>

<p>加起来为 0.1000000000000000055511151231257827021181583404541015625</p>
<h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><p><code>0.1 + 0.2 = 0.30000000000000004</code></p>
<ul>
<li>0.1 的二进制表示为 <code>0.0001100110011001100110011001100110011001100110011001100</code></li>
<li>0.2 的二进制表示为 <code>0.0011001100110011001100110011001100110011001100110011010</code></li>
<li>相加后得到值为     <code>0.0100110011001100110011001100110011001100110011001100110</code></li>
<li>即 <code>0.3000000000000000444089209850062616169452667236328125</code></li>
</ul>
<p><code>0.3 + 0.2 = 0.5</code></p>
<ul>
<li>0.3 的二进制表示为 <code>0.0100110011001100110011001100110011001100110011001100110</code></li>
<li>0.2 的二进制表示为 <code>0.0011001100110011001100110011001100110011001100110011010</code></li>
<li>相加后得到值为     <code>0.1000000000000000000000000000000000000000000000000000000</code></li>
<li>即 <code>0.5</code></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>技术原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中浮点数的舍入</title>
    <url>/2023/python_float_round/</url>
    <content><![CDATA[<h2 id="问题导入"><a href="#问题导入" class="headerlink" title="问题导入"></a>问题导入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;round(1.05, 1) = &quot;</span>, <span class="built_in">round</span>(<span class="number">1.05</span>, <span class="number">1</span>))  <span class="comment"># round(1.05, 1) =  1.1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;round(1.15, 1) = &quot;</span>, <span class="built_in">round</span>(<span class="number">1.15</span>, <span class="number">1</span>))  <span class="comment"># round(1.15, 1) =  1.1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;round(1.25, 1) = &quot;</span>, <span class="built_in">round</span>(<span class="number">1.25</span>, <span class="number">1</span>))  <span class="comment"># round(1.25, 1) =  1.2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;round(1.35, 1) = &quot;</span>, <span class="built_in">round</span>(<span class="number">1.35</span>, <span class="number">1</span>))  <span class="comment"># round(1.35, 1) =  1.4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;round(1.45, 1) = &quot;</span>, <span class="built_in">round</span>(<span class="number">1.45</span>, <span class="number">1</span>))  <span class="comment"># round(1.45, 1) =  1.4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;round(1.55, 1) = &quot;</span>, <span class="built_in">round</span>(<span class="number">1.55</span>, <span class="number">1</span>))  <span class="comment"># round(1.55, 1) =  1.6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;round(1.65, 1) = &quot;</span>, <span class="built_in">round</span>(<span class="number">1.65</span>, <span class="number">1</span>))  <span class="comment"># round(1.65, 1) =  1.6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;round(1.75, 1) = &quot;</span>, <span class="built_in">round</span>(<span class="number">1.75</span>, <span class="number">1</span>))  <span class="comment"># round(1.75, 1) =  1.8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;round(1.85, 1) = &quot;</span>, <span class="built_in">round</span>(<span class="number">1.85</span>, <span class="number">1</span>))  <span class="comment"># round(1.85, 1) =  1.9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;round(1.95, 1) = &quot;</span>, <span class="built_in">round</span>(<span class="number">1.95</span>, <span class="number">1</span>))  <span class="comment"># round(1.95, 1) =  1.9</span></span><br></pre></td></tr></table></figure>

<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>对于浮点数的<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%80%BC%E4%BF%AE%E7%BA%A6">舍入规则</a>，通常有以下几种（以下均假设保留小数位数为 0，其他位数可以同理转换）：</p>
<ul>
<li>向下取整，舍去小数部分</li>
<li>向上取整，舍去小数部分，将整数部分加一</li>
<li>截尾取整，选择让结果更接近原点 (0) 的方式取整</li>
<li>进位取整，选择让结果更远离原点 (0) 的方式取整</li>
<li>四舍五入，小数位小于等于4，则舍去；若大于等于5，则进位，负数按照绝对值四舍五入后再加负号</li>
<li>五舍六入，小数位小于等于5，则舍去；若大于等于6，则进位，负数按照绝对值五舍六入后再加负号</li>
<li>四舍六入，小数位小于等于4，则舍去；若大于等于6，则进位，负数按照绝对值四舍六入后再加负号</li>
</ul>
<h2 id="Python-中的-round"><a href="#Python-中的-round" class="headerlink" title="Python 中的 round"></a>Python 中的 round</h2><p>Python 中的 <code>round</code> 函数，其实现方式是<a href="https://docs.python.org/zh-cn/3/library/functions.html#round">四舍六入五成双</a>，即：</p>
<ul>
<li>小数位小于等于4，则舍去</li>
<li>若大于等于6，则进位</li>
<li>若小数位等于5，则判断其前一位是否为奇数，若为奇数，则进位，若为偶数，则舍去</li>
</ul>
<p>例如：</p>
<ul>
<li><code>round(0.5) = 0</code></li>
<li><code>round(-0.5) = 0</code></li>
</ul>
<p>注意：<code>round</code> 的四舍六入需要这个数能精确表示，否则会按照偏移进行舍入。</p>
<h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><p>Python 中的浮点数，并不是准确的浮点数，导致 1.05 并不是真的 1.05，而是一个近似值，所以在进行舍入时，会出现一些问题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="number">1.05</span>:<span class="number">.20</span>f&#125;</span>&quot;</span>)  <span class="comment"># 1.05000000000000004441 -&gt; 1.1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="number">1.15</span>:<span class="number">.20</span>f&#125;</span>&quot;</span>)  <span class="comment"># 1.14999999999999991118 -&gt; 1.1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="number">1.25</span>:<span class="number">.20</span>f&#125;</span>&quot;</span>)  <span class="comment"># 1.25000000000000000000 -&gt; 1.2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="number">1.35</span>:<span class="number">.20</span>f&#125;</span>&quot;</span>)  <span class="comment"># 1.35000000000000008882 -&gt; 1.4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="number">1.45</span>:<span class="number">.20</span>f&#125;</span>&quot;</span>)  <span class="comment"># 1.44999999999999995559 -&gt; 1.4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="number">1.55</span>:<span class="number">.20</span>f&#125;</span>&quot;</span>)  <span class="comment"># 1.55000000000000004441 -&gt; 1.6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="number">1.65</span>:<span class="number">.20</span>f&#125;</span>&quot;</span>)  <span class="comment"># 1.64999999999999991118 -&gt; 1.6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="number">1.75</span>:<span class="number">.20</span>f&#125;</span>&quot;</span>)  <span class="comment"># 1.75000000000000000000 -&gt; 1.8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="number">1.85</span>:<span class="number">.20</span>f&#125;</span>&quot;</span>)  <span class="comment"># 1.85000000000000008882 -&gt; 1.9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="number">1.95</span>:<span class="number">.20</span>f&#125;</span>&quot;</span>)  <span class="comment"># 1.94999999999999995559 -&gt; 1.9</span></span><br></pre></td></tr></table></figure>

<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>如何在 Python 中实现其他的舍入规则</p>
<ul>
<li>向下取整，取小于等于该数的第一个整数 - <code>math.floor</code><ul>
<li><code>math.floor(1.999) = 1</code></li>
<li><code>math.floor(-1.999) = -2</code></li>
</ul>
</li>
<li>向上取整，取大于等于该数的第一个整数 - <code>math.ceil</code><ul>
<li><code>math.ceil(1.001) = 2</code></li>
<li><code>math.ceil(-1.001) = -1</code></li>
</ul>
</li>
<li>截尾取整，选择让结果更接近原点 (0) 的方式取整 - <code>math.trunc</code><ul>
<li><code>math.trunc(1.999) = 1</code></li>
<li><code>math.trunc(-1.999) = -1</code></li>
<li><code>int(1.999) = 1</code></li>
<li><code>int(-1.999) = -1</code></li>
</ul>
</li>
<li>进位取整，选择让结果更远离原点 (0) 的方式取整，Python 没有内置的函数，可以通过 <code>math.ceil</code> 和 <code>math.floor</code> 实现<ul>
<li><code>math.ceil(x) if x &gt; 0 else math.floor(x)</code></li>
</ul>
</li>
<li>四舍五入、五舍六入、四舍六入均未在 Python 中具体实现，仅实现 <code>round</code> 来做数值修约规则</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Python下遇到的一些故障</title>
    <url>/2020/python_issue/</url>
    <content><![CDATA[<h2 id="mysqlclient安装失败"><a href="#mysqlclient安装失败" class="headerlink" title="mysqlclient安装失败"></a>mysqlclient安装失败</h2><p>Ubuntu下安装mysqlclient需要依次安装以下包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install libmysqlclient-dev</span><br><span class="line"><span class="built_in">sudo</span> apt install libssl-dev</span><br><span class="line"><span class="built_in">sudo</span> apt install libcrypto++-dev</span><br><span class="line"><span class="built_in">sudo</span> pip3 install mysqlclient</span><br><span class="line"><span class="comment"># 报错error: invalid command &#x27;bdist_wheel</span></span><br><span class="line">pip3 install wheel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果还报错就执行下面的包安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install python3 python-dev python3-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install build-essential libssl-dev libffi-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libxml2-dev libxslt1-dev zlib1g-dev</span><br></pre></td></tr></table></figure>

<h2 id="安装flask-mongoengine报错"><a href="#安装flask-mongoengine报错" class="headerlink" title="安装flask-mongoengine报错"></a>安装flask-mongoengine报错</h2><p>需要安装一下依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install rednose</span><br><span class="line">pip3 install nose</span><br><span class="line">pip3 install coverage</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Issue</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 三种方式生成列表的内存分析</title>
    <url>/2023/python_list_memory/</url>
    <content><![CDATA[<p>注意：以下内容均在 Python 3.9.13 上进行实验，其他版本可能有所不同。</p>
<p>部分字节码分析参考 <a href="https://docs.python.org/zh-cn/3/library/dis.html#python-bytecode-instructions">Python字节码说明</a></p>
<h2 id="问题导入"><a href="#问题导入" class="headerlink" title="问题导入"></a>问题导入</h2><p>使用不同方法生成相同结果的列表时，内存占用不同。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: import sys, dis</span><br><span class="line"></span><br><span class="line">In [2]: sys.getsizeof([0] * 3)</span><br><span class="line">Out[2]: 80</span><br><span class="line"></span><br><span class="line">In [3]: sys.getsizeof([0 for _ in range(3)])</span><br><span class="line">Out[3]: 88</span><br><span class="line"></span><br><span class="line">In [4]: sys.getsizeof([0, 0, 0])</span><br><span class="line">Out[4]: 120</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>查看三者的字节码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [5]: dis.dis(&quot;[0] * 3&quot;)</span><br><span class="line">  1           0 LOAD_CONST               0 (0)</span><br><span class="line">              2 BUILD_LIST               1</span><br><span class="line">              4 LOAD_CONST               1 (3)</span><br><span class="line">              6 BINARY_MULTIPLY</span><br><span class="line">              8 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">In [6]: dis.dis(&quot;[0, 0, 0]&quot;)</span><br><span class="line">  1           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_CONST               0 ((0, 0, 0))</span><br><span class="line">              4 LIST_EXTEND              1</span><br><span class="line">              6 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">In [7]: dis.dis(&quot;[0 for _ in range(3)]&quot;)</span><br><span class="line">  1           0 LOAD_CONST               0 (&lt;code object &lt;listcomp&gt; at 0x1047e05b0, file &quot;&lt;dis&gt;&quot;, line 1&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 LOAD_NAME                0 (range)</span><br><span class="line">              8 LOAD_CONST               2 (3)</span><br><span class="line">             10 CALL_FUNCTION            1</span><br><span class="line">             12 GET_ITER</span><br><span class="line">             14 CALL_FUNCTION            1</span><br><span class="line">             16 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x1047e05b0, file &quot;&lt;dis&gt;&quot;, line 1&gt;:</span><br><span class="line">  1           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                 8 (to 14)</span><br><span class="line">              6 STORE_FAST               1 (_)</span><br><span class="line">              8 LOAD_CONST               0 (0)</span><br><span class="line">             10 LIST_APPEND              2</span><br><span class="line">             12 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   14 RETURN_VALUE</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>分析可以知道，三者最主要的区别为</p>
<ul>
<li><code>[0] * 3</code> 使用了 <code>BINARY_MULTIPLY</code> 指令</li>
<li><code>[0, 0, 0]</code> 使用了 <code>LIST_EXTEND</code> 指令</li>
<li><code>[0 for _ in range(3)]</code> 使用了 <code>LIST_APPEND</code> 指令</li>
</ul>
<h2 id="列表乘法"><a href="#列表乘法" class="headerlink" title="列表乘法"></a>列表乘法</h2><p><code>BINARY_MULTIPLY</code> 指令主要调用了 <a href="https://github.com/python/cpython/blob/3.9/Objects/listobject.c#L540">list_repeat</a> 函数，该函数传入一个对象，和一个整数，返回一个新的列表，该列表的元素为原列表的元素重复 n 次。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">list_repeat(PyListObject *a, Py_ssize_t n)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    size = Py_SIZE(a) * n;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> PyList_New(<span class="number">0</span>);</span><br><span class="line">    np = (PyListObject *) list_new_prealloc(size);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> (PyObject *) np;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到在 <a href="https://github.com/python/cpython/blob/3.9/Objects/listobject.c#L540">代码第 7 行</a> 调用 <code>list_new_prealloc(size)</code> 进行了内存申请，申请的 size 为传入对象的占用大小乘以 n。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">list_new_prealloc(Py_ssize_t size)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    op-&gt;ob_item = PyMem_New(PyObject *, size);</span><br><span class="line">    ...</span><br><span class="line">    op-&gt;allocated = size;</span><br><span class="line">    <span class="keyword">return</span> (PyObject *) op;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <a href="https://github.com/python/cpython/blob/3.9/Objects/listobject.c#L172">list_new_prealloc</a> 定义中能看到，在 <a href="https://github.com/python/cpython/blob/3.9/Objects/listobject.c#L159">代码第 4 行</a> 申请了 size 的内存</p>
<p>计算可知，Python 3.9 中，列表默认占用 56 个字节，在 64 位系统中，一个指针占用 8 个字节，因此列表占用内存为 56 + 8 * 3 &#x3D; 80 个字节。</p>
<h2 id="直接定义列表分析"><a href="#直接定义列表分析" class="headerlink" title="直接定义列表分析"></a>直接定义列表分析</h2><p><code>LIST_EXTEND</code> 指令主要调用了 <a href="https://github.com/python/cpython/blob/3.9/Objects/listobject.c#L854">list_extend</a> 函数，该函数传入当前对象和一个可迭代对象，将可迭代对象的元素添加到当前对象中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">list_extend(PyListObject *self, PyObject *iterable)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (PyList_CheckExact(iterable) || PyTuple_CheckExact(iterable) ||</span><br><span class="line">                (PyObject *)self == iterable) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (list_resize(self, m + n) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            Py_DECREF(iterable);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到在 <a href="https://github.com/python/cpython/blob/3.9/Objects/listobject.c#L884">代码第 7 行</a> 调用了 <code>list_resize</code> 函数，该函数主要是对列表进行扩容。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">list_resize(PyListObject *self, Py_ssize_t newsize)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (allocated &gt;= newsize &amp;&amp; newsize &gt;= (allocated &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        assert(self-&gt;ob_item != <span class="literal">NULL</span> || newsize == <span class="number">0</span>);</span><br><span class="line">        Py_SET_SIZE(self, newsize);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* This over-allocates proportional to the list size, making room</span></span><br><span class="line"><span class="comment">     * for additional growth.  The over-allocation is mild, but is</span></span><br><span class="line"><span class="comment">     * enough to give linear-time amortized behavior over a long</span></span><br><span class="line"><span class="comment">     * sequence of appends() in the presence of a poorly-performing</span></span><br><span class="line"><span class="comment">     * system realloc().</span></span><br><span class="line"><span class="comment">     * Add padding to make the allocated size multiple of 4.</span></span><br><span class="line"><span class="comment">     * The growth pattern is:  0, 4, 8, 16, 24, 32, 40, 52, 64, 76, ...</span></span><br><span class="line"><span class="comment">     * Note: new_allocated won&#x27;t overflow because the largest possible value</span></span><br><span class="line"><span class="comment">     *       is PY_SSIZE_T_MAX * (9 / 8) + 6 which always fits in a size_t.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    new_allocated = ((<span class="type">size_t</span>)newsize + (newsize &gt;&gt; <span class="number">3</span>) + <span class="number">6</span>) &amp; ~(<span class="type">size_t</span>)<span class="number">3</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到在 <a href="https://github.com/python/cpython/blob/3.9/Objects/listobject.c#L62">代码第 19 行</a> 计算了新内存的大小，计算公式为 <code>(size + size // 4) + 6</code> 后对 4 进行对齐。例如，需要的内存为 5，那么申请的内存大小为 <code>(5 + 5 // 4) + 6 = 12 与 4 对齐 = 12</code> 。在当前的例子中，需要的内存为 3，那么申请内存的大小为 <code>3 + 3 // 4 + 6 = 9 与 4 对齐 = 8</code>。根据上一节可以知道，直接定义列表占用的内存为 <code>56 + 8 * 8 = 120</code></p>
<h2 id="列表生成式分析"><a href="#列表生成式分析" class="headerlink" title="列表生成式分析"></a>列表生成式分析</h2><p><code>LIST_APPEND</code> 指令主要调用了 <a href="https://github.com/python/cpython/blob/3.9/Objects/listobject.c#L836">list_append</a> 函数，该函数传入当前对象和一个对象，将该对象添加到当前对象中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">list_append(PyListObject *self, PyObject *object)</span><br><span class="line"><span class="comment">/*[clinic end generated code: output=7c096003a29c0eae input=43a3fe48a7066e91]*/</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (app1(self, object) == <span class="number">0</span>)</span><br><span class="line">        Py_RETURN_NONE;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app1(PyListObject *self, PyObject *v)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (list_resize(self, n+<span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>list_append</code> 函数调用了 <code>app1</code> 函数，该函数调用了 <code>list_resize</code> 函数，该函数主要是对列表进行扩容。每一次添加数据的时候，都会调用 <code>list_resize</code> 函数，同时，根据 <code>list_resize</code> 的定义，在上文 <a href="https://github.com/python/cpython/blob/3.9/Objects/listobject.c#L46">代码第 4 到第 7 行</a> 中可知，如果内存足够，不需要扩容，那么列表生成式的执行逻辑就会变为：</p>
<ul>
<li><code>list_resize(1)</code> -&gt; 开辟一个 4 个字节的内存</li>
<li><code>list_resize(2)</code> -&gt; 内存足够，不需要扩容</li>
<li><code>list_resize(3)</code> -&gt; 内存足够，不需要扩容</li>
</ul>
<p>故列表生成式占用的内存为 <code>56 + 8 * 4 = 88</code>。</p>
<h2 id="3-10-版本"><a href="#3-10-版本" class="headerlink" title="3.10 版本"></a>3.10 版本</h2><p>有同学提到在 3.10 版本的效果不一样，这里也做一下分析。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [2]: sys.getsizeof([0] * 3)</span><br><span class="line">Out[2]: 80</span><br><span class="line"></span><br><span class="line">In [3]: sys.getsizeof([0 for _ in range(3)])</span><br><span class="line">Out[3]: 88</span><br><span class="line"></span><br><span class="line">In [4]: sys.getsizeof([0, 0, 0])</span><br><span class="line">Out[4]: 88</span><br></pre></td></tr></table></figure>

<p>可以发现主要是 <code>[0, 0, 0]</code> 的内存发生了变化，这里单独分析下 3.10 中直接定义列表的内存占用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [5]: dis.dis(&quot;[0, 0, 0]&quot;)</span><br><span class="line">  1           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_CONST               0 ((0, 0, 0))</span><br><span class="line">              4 LIST_EXTEND              1</span><br><span class="line">              6 RETURN_VALUE</span><br></pre></td></tr></table></figure>

<p>看 Python 字节码依然调用的是 <code>LIST_EXTEND</code> 指令，但是在 3.10 版本中，<code>LIST_EXTEND</code> 指令的实现方法 <code>list_extend</code> 函数定义发生了改动，该函数的实现摘录如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">list_extend(PyListObject *self, PyObject *iterable)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (PyList_CheckExact(iterable) || PyTuple_CheckExact(iterable) ||</span><br><span class="line">                (PyObject *)self == iterable) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (self-&gt;ob_item == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list_preallocate_exact(self, n) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Py_SET_SIZE(self, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (list_resize(self, m + n) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            Py_DECREF(iterable);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可见，当列表对象初始为空的时候，会直接调用 <a href="https://github.com/python/cpython/blob/3.10/Objects/listobject.c#L99">list_preallocate_exact</a> 函数，该函数的实现如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">list_preallocate_exact(PyListObject *self, Py_ssize_t size)</span><br><span class="line">&#123;</span><br><span class="line">    assert(self-&gt;ob_item == <span class="literal">NULL</span>);</span><br><span class="line">    assert(size &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Since the Python memory allocator has granularity of 16 bytes on 64-bit</span></span><br><span class="line"><span class="comment">     * platforms (8 on 32-bit), there is no benefit of allocating space for</span></span><br><span class="line"><span class="comment">     * the odd number of items, and there is no drawback of rounding the</span></span><br><span class="line"><span class="comment">     * allocated size up to the nearest even number.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    size = (size + <span class="number">1</span>) &amp; ~(<span class="type">size_t</span>)<span class="number">1</span>;</span><br><span class="line">    PyObject **items = PyMem_New(PyObject*, size);</span><br><span class="line">    <span class="keyword">if</span> (items == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        PyErr_NoMemory();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    self-&gt;ob_item = items;</span><br><span class="line">    self-&gt;allocated = size;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到该函数中计算需要申请内存大小的方法为 <code>size + 1 后与 2 对齐</code> ，本例子中 size&#x3D;3，<code>3 + 1 后与 2 对齐 = 4</code>。故在 3.10 版本中 <code>[0, 0, 0]</code> 占用的内存为 <code>56 + 8 * 4 = 88</code>。</p>
<blockquote>
<p>分析思路来自 <a href="https://github.com/gaogaotiantian">gaogaotiantian</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>技术原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 列表结构及内存分析</title>
    <url>/2023/python_list_memory2/</url>
    <content><![CDATA[<p>注意：以下内容均在 Python 3.9.13 上进行实验，其他版本可能有所不同。</p>
<h2 id="问题导入"><a href="#问题导入" class="headerlink" title="问题导入"></a>问题导入</h2><p>上篇文章 <a href="https://blog.stolenzc.com/2023/python_list_memory/">Python 三种方式生成列表的内存分析</a> 讲到，python 中 list 初始占用空间为 56 个字节，但是这 56 个字节都是些什么内容呢，本文将进行分析</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: a = []</span><br><span class="line"></span><br><span class="line">In [2]: import sys</span><br><span class="line"></span><br><span class="line">In [3]: sys.getsizeof(a)</span><br><span class="line">Out[3]: 56</span><br></pre></td></tr></table></figure>

<h2 id="PyListObject-源码分析"><a href="#PyListObject-源码分析" class="headerlink" title="PyListObject 源码分析"></a>PyListObject 源码分析</h2><p>cpython 中，列表的定义都是存储在 <a href="https://github.com/python/cpython/blob/3.9/Objects/listobject.c">&#x2F;Objects&#x2F;listobject.c</a> 中的，其中定义了一个 <a href="https://github.com/python/cpython/blob/3.9/Include/cpython/listobject.h#L9">PyListObject</a> 结构体，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyObject_VAR_HEAD</span><br><span class="line">    <span class="comment">/* Vector of pointers to list elements.  list[0] is ob_item[0], etc. */</span></span><br><span class="line">    PyObject **ob_item;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ob_item contains space for &#x27;allocated&#x27; elements.  The number</span></span><br><span class="line"><span class="comment">     * currently in use is ob_size.</span></span><br><span class="line"><span class="comment">     * Invariants:</span></span><br><span class="line"><span class="comment">     *     0 &lt;= ob_size &lt;= allocated</span></span><br><span class="line"><span class="comment">     *     len(list) == ob_size</span></span><br><span class="line"><span class="comment">     *     ob_item == NULL implies ob_size == allocated == 0</span></span><br><span class="line"><span class="comment">     * list.sort() temporarily sets allocated to -1 to detect mutations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Items must normally not be NULL, except during construction when</span></span><br><span class="line"><span class="comment">     * the list is not yet visible outside the function that builds it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Py_ssize_t allocated;</span><br><span class="line">&#125; PyListObject;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>allocated</code> - 当前已为该 list 分配的内存大小，不表示 list 的长度，类型为 <code>Py_ssize_t</code>，即为 c 语言中 <code>long</code> 类型的别名，在 64 位系统上为 8 个字节</li>
<li><code>ob_item</code> - 指向 list 中每个元素的指针向量。<code>list[0]</code> 即为 <code>ob_item[0]</code>，类型为 <code>PyObject **</code>，即为指向 <code>PyObject</code> 指针的指针，每个类型为指针的元素占用 8 个字节，所以 <code>ob_item</code> 占用的内存大小为 <code>8</code> 个字节，所指向对象占用的内存为 <code>allocated * 8</code> 个字节</li>
<li><code>PyObject_VAR_HEAD</code> - 该指令为一个<a href="https://github.com/python/cpython/blob/3.9/Include/object.h#L97">宏定义</a>，实际内容为 <code>PyVarObject ob_base;</code>，<a href="https://github.com/python/cpython/blob/3.9/Include/object.h#L115"><code>PyVarObject</code></a> 为一个结构体，定义如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyObject ob_base;</span><br><span class="line">    Py_ssize_t ob_size; <span class="comment">/* Number of items in variable part */</span></span><br><span class="line">&#125; PyVarObject;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ob_size</code> - 该变量表示 list 的使用长度，类型为 <code>Py_ssize_t</code>，占用 8 个字节</li>
<li><code>PyObject</code> - 该结构体为 python 中所有对象的基类，定义如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">object</span> &#123;</span></span><br><span class="line">    _PyObject_HEAD_EXTRA</span><br><span class="line">    Py_ssize_t ob_refcnt;</span><br><span class="line">    PyTypeObject *ob_type;</span><br><span class="line">&#125; PyObject;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ob_refcnt</code> - 该变量表示对象的引用计数，类型为 <code>Py_ssize_t</code>，占用 8 个字节</li>
<li><code>ob_type</code> - 该变量表示对象的类型，类型为 <code>PyTypeObject *</code>，即为指向 <code>PyTypeObject</code> 的指针，所以 <code>ob_type</code> 占用的内存大小为 8 个字节</li>
<li><code>_PyObject_HEAD_EXTRA</code> - 该指令为一个宏定义，实际内容为空，用于扩展 <code>PyObject</code> 结构体</li>
</ul>
<p>综上，PyListObject 结构体如下所示</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyTypeObject *ob_type;  # <span class="number">8</span></span><br><span class="line">    Py_ssize_t ob_size;     # <span class="number">8</span></span><br><span class="line">    Py_ssize_t ob_refcnt;   # <span class="number">8</span></span><br><span class="line">    PyObject **ob_item;     # <span class="number">8</span></span><br><span class="line">    Py_ssize_t allocated;   # <span class="number">8</span></span><br><span class="line">&#125; PyListObject;</span><br></pre></td></tr></table></figure>

<p>由上可知，<code>PyListObject</code> 结构体默认占用 40 个字节，但为什么是 56 个字节呢？</p>
<h2 id="PyList-New-源码分析"><a href="#PyList-New-源码分析" class="headerlink" title="PyList_New 源码分析"></a>PyList_New 源码分析</h2><p>通过名称可知，该函数用于创建一个新的 list 对象，既然分析定义无法找出为什么，那么就分析创建的过程吧。</p>
<p><a href="https://github.com/python/cpython/blob/3.9/Objects/listobject.c#L139">PyList_New</a> 的定义如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PyObject *</span><br><span class="line"><span class="title function_">PyList_New</span><span class="params">(Py_ssize_t size)</span></span><br><span class="line">&#123;</span><br><span class="line">    PyListObject *op;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// size 为负数时，抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (size &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        PyErr_BadInternalCall();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建 op 对象</span></span><br><span class="line">    <span class="keyword">if</span> (numfree) &#123;</span><br><span class="line">        <span class="comment">// 内存优化，使用已经申请的内存块</span></span><br><span class="line">        numfree--;</span><br><span class="line">        op = free_list[numfree];</span><br><span class="line">        _Py_NewReference((PyObject *)op);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 此处实际创建出了 op 变量，即 PyListObject 结构体</span></span><br><span class="line">        op = PyObject_GC_New(PyListObject, &amp;PyList_Type);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 为 op 分配存储空间内容</span></span><br><span class="line">    <span class="keyword">if</span> (size &lt;= <span class="number">0</span>)</span><br><span class="line">        op-&gt;ob_item = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        op-&gt;ob_item = (PyObject **) PyMem_Calloc(size, <span class="keyword">sizeof</span>(PyObject *));</span><br><span class="line">        <span class="keyword">if</span> (op-&gt;ob_item == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            Py_DECREF(op);</span><br><span class="line">            <span class="keyword">return</span> PyErr_NoMemory();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Py_SET_SIZE(op, size);</span><br><span class="line">    op-&gt;allocated = size;</span><br><span class="line">    _PyObject_GC_TRACK(op);</span><br><span class="line">    <span class="keyword">return</span> (PyObject *) op;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析可知，主要逻辑为使用 <a href="https://github.com/python/cpython/blob/3.9/Include/objimpl.h#L184">PyObject_GC_New</a> 函数创建一个 PyListObject 对象，该函数的实际逻辑最后定位到 <a href="https://github.com/python/cpython/blob/3.9/Modules/gcmodule.c#L2253">_PyObject_GC_Alloc</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> PyObject *</span><br><span class="line">_PyObject_GC_Alloc(<span class="type">int</span> use_calloc, <span class="type">size_t</span> basicsize)</span><br><span class="line">&#123;</span><br><span class="line">    PyThreadState *tstate = _PyThreadState_GET();</span><br><span class="line">    GCState *gcstate = &amp;tstate-&gt;interp-&gt;gc;</span><br><span class="line">    <span class="keyword">if</span> (basicsize &gt; PY_SSIZE_T_MAX - <span class="keyword">sizeof</span>(PyGC_Head)) &#123;</span><br><span class="line">        <span class="keyword">return</span> _PyErr_NoMemory(tstate);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算得到 size 的值</span></span><br><span class="line">    <span class="type">size_t</span> size = <span class="keyword">sizeof</span>(PyGC_Head) + basicsize;</span><br><span class="line"></span><br><span class="line">    PyGC_Head *g;</span><br><span class="line">    <span class="keyword">if</span> (use_calloc) &#123;</span><br><span class="line">        g = (PyGC_Head *)PyObject_Calloc(<span class="number">1</span>, size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        g = (PyGC_Head *)PyObject_Malloc(size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (g == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _PyErr_NoMemory(tstate);</span><br><span class="line">    &#125;</span><br><span class="line">    assert(((<span class="type">uintptr_t</span>)g &amp; <span class="number">3</span>) == <span class="number">0</span>);  <span class="comment">// g must be aligned 4bytes boundary</span></span><br><span class="line"></span><br><span class="line">    g-&gt;_gc_next = <span class="number">0</span>;</span><br><span class="line">    g-&gt;_gc_prev = <span class="number">0</span>;</span><br><span class="line">    gcstate-&gt;generations[<span class="number">0</span>].count++; <span class="comment">/* number of allocated GC objects */</span></span><br><span class="line">    <span class="keyword">if</span> (gcstate-&gt;generations[<span class="number">0</span>].count &gt; gcstate-&gt;generations[<span class="number">0</span>].threshold &amp;&amp;</span><br><span class="line">        gcstate-&gt;enabled &amp;&amp;</span><br><span class="line">        gcstate-&gt;generations[<span class="number">0</span>].threshold &amp;&amp;</span><br><span class="line">        !gcstate-&gt;collecting &amp;&amp;</span><br><span class="line">        !_PyErr_Occurred(tstate))</span><br><span class="line">    &#123;</span><br><span class="line">        gcstate-&gt;collecting = <span class="number">1</span>;</span><br><span class="line">        collect_generations(tstate);</span><br><span class="line">        gcstate-&gt;collecting = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    PyObject *op = FROM_GC(g);</span><br><span class="line">    <span class="keyword">return</span> op;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，最终 size 的计算方法为 <code>size_t size = sizeof(PyGC_Head) + basicsize;</code></p>
<p>其中 basicsize 为 PyListObject 结构体的大小，即 40 个字节，<a href="https://github.com/python/cpython/blob/3.9/Include/internal/pycore_gc.h#L12">PyGC_Head</a> 的定义如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">// Pointer to next object in the list.</span></span><br><span class="line">    <span class="comment">// 0 means the object is not tracked</span></span><br><span class="line">    <span class="type">uintptr_t</span> _gc_next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pointer to previous object in the list.</span></span><br><span class="line">    <span class="comment">// Lowest two bits are used for flags documented later.</span></span><br><span class="line">    <span class="type">uintptr_t</span> _gc_prev;</span><br><span class="line">&#125; PyGC_Head;</span><br></pre></td></tr></table></figure>

<p>PyGC_Head 存储了两个 uintptr_t 的指针变量。即为 16 个字节，故 PyListObject 创建出来后的结构如下所示</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyTypeObject *ob_type;  # <span class="number">8</span></span><br><span class="line">    Py_ssize_t ob_size;     # <span class="number">8</span></span><br><span class="line">    Py_ssize_t ob_refcnt;   # <span class="number">8</span></span><br><span class="line">    PyObject **ob_item;     # <span class="number">8</span></span><br><span class="line">    Py_ssize_t allocated;   # <span class="number">8</span></span><br><span class="line">    <span class="type">uintptr_t</span> _gc_next;     # <span class="number">8</span></span><br><span class="line">    <span class="type">uintptr_t</span> _gc_prev;     # <span class="number">8</span></span><br><span class="line">&#125; PyListObject;</span><br></pre></td></tr></table></figure>

<p>故最终 list 默认占用的空间为 56 个字节；但是，按照上述分析，列表的空间占用应该始终只有 56 个字节。因为 ob_item 为指针的指针，故无论列表中有多少个元素，ob_item 的大小始终为 8 个字节，故列表的大小始终为 56 个字节。但当进行列表扩容的时候。列表的大小会发生变化，这是为什么呢？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: import sys</span><br><span class="line"></span><br><span class="line">In [2]: a = []</span><br><span class="line"></span><br><span class="line">In [3]: sys.getsizeof(a)</span><br><span class="line">Out[3]: 56</span><br><span class="line"></span><br><span class="line">In [4]: a.append(1)</span><br><span class="line"></span><br><span class="line">In [5]: sys.getsizeof(a)</span><br><span class="line">Out[5]: 88</span><br></pre></td></tr></table></figure>

<h2 id="sys-getsizeof-源码分析"><a href="#sys-getsizeof-源码分析" class="headerlink" title="sys.getsizeof 源码分析"></a>sys.getsizeof 源码分析</h2><p>sys.get_sizeof 调用的 c 函数为 <a href="https://github.com/python/cpython/blob/3.9/Python/sysmodule.c#L1727">sys_getsizeof</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> PyObject *</span><br><span class="line"><span class="title function_">sys_getsizeof</span><span class="params">(PyObject *self, PyObject *args, PyObject *kwds)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> *kwlist[] = &#123;<span class="string">&quot;object&quot;</span>, <span class="string">&quot;default&quot;</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">size_t</span> size;</span><br><span class="line">    PyObject *o, *dflt = <span class="literal">NULL</span>;</span><br><span class="line">    PyThreadState *tstate = _PyThreadState_GET();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!PyArg_ParseTupleAndKeywords(args, kwds, <span class="string">&quot;O|O:getsizeof&quot;</span>,</span><br><span class="line">                                     kwlist, &amp;o, &amp;dflt)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    size = _PySys_GetSizeOf(o);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size == (<span class="type">size_t</span>)<span class="number">-1</span> &amp;&amp; _PyErr_Occurred(tstate)) &#123;</span><br><span class="line">        <span class="comment">/* Has a default value been given */</span></span><br><span class="line">        <span class="keyword">if</span> (dflt != <span class="literal">NULL</span> &amp;&amp; _PyErr_ExceptionMatches(tstate, PyExc_TypeError)) &#123;</span><br><span class="line">            _PyErr_Clear(tstate);</span><br><span class="line">            Py_INCREF(dflt);</span><br><span class="line">            <span class="keyword">return</span> dflt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> PyLong_FromSize_t(size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>核心逻辑即为 <code>size = _PySys_GetSizeOf(o);</code>， <a href="https://github.com/python/cpython/blob/3.9/Python/sysmodule.c#L1682">_PySys_GetSizeOf</a> 函数的实现如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span></span><br><span class="line">_PySys_GetSizeOf(PyObject *o)</span><br><span class="line">&#123;</span><br><span class="line">    PyObject *res = <span class="literal">NULL</span>;</span><br><span class="line">    PyObject *method;</span><br><span class="line">    Py_ssize_t size;</span><br><span class="line">    PyThreadState *tstate = _PyThreadState_GET();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Make sure the type is initialized. float gets initialized late */</span></span><br><span class="line">    <span class="keyword">if</span> (PyType_Ready(Py_TYPE(o)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">size_t</span>)<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    method = _PyObject_LookupSpecial(o, &amp;PyId___sizeof__);</span><br><span class="line">    <span class="keyword">if</span> (method == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_PyErr_Occurred(tstate)) &#123;</span><br><span class="line">            _PyErr_Format(tstate, PyExc_TypeError,</span><br><span class="line">                          <span class="string">&quot;Type %.100s doesn&#x27;t define __sizeof__&quot;</span>,</span><br><span class="line">                          Py_TYPE(o)-&gt;tp_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        res = _PyObject_CallNoArg(method);</span><br><span class="line">        Py_DECREF(method);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">size_t</span>)<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    size = PyLong_AsSsize_t(res);</span><br><span class="line">    Py_DECREF(res);</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">-1</span> &amp;&amp; _PyErr_Occurred(tstate))</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">size_t</span>)<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        _PyErr_SetString(tstate, PyExc_ValueError,</span><br><span class="line">                          <span class="string">&quot;__sizeof__() should return &gt;= 0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">size_t</span>)<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* add gc_head size */</span></span><br><span class="line">    <span class="keyword">if</span> (_PyObject_IS_GC(o))</span><br><span class="line">        <span class="keyword">return</span> ((<span class="type">size_t</span>)size) + <span class="keyword">sizeof</span>(PyGC_Head);</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">size_t</span>)size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该函数存在一个逻辑 <code>method = _PyObject_LookupSpecial(o, &amp;PyId___sizeof__);</code> 为寻找对象是否实现了 <code>__sizeof__</code> 这个魔术方法，查看 PyListObject 对 <a href="https://github.com/python/cpython/blob/3.9/Objects/listobject.c#L2767"><code>__sizeof__</code></a> 的实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> PyObject *</span><br><span class="line"><span class="title function_">list___sizeof___impl</span><span class="params">(PyListObject *self)</span></span><br><span class="line"><span class="comment">/*[clinic end generated code: output=3417541f95f9a53e input=b8030a5d5ce8a187]*/</span></span><br><span class="line">&#123;</span><br><span class="line">    Py_ssize_t res;</span><br><span class="line"></span><br><span class="line">    res = _PyObject_SIZE(Py_TYPE(self)) + self-&gt;allocated * <span class="keyword">sizeof</span>(<span class="type">void</span>*);</span><br><span class="line">    <span class="keyword">return</span> PyLong_FromSsize_t(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可见，获取列表的大小，实际上是获取了 <code>PyListObject</code> 结构体的大小，加上 <code>allocated * sizeof(void*)</code>，即为 <code>allocated * 8</code>，故列表的大小为 <code>56 + allocated * 8</code>。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>技术原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 元类</title>
    <url>/2023/python_metaclass/</url>
    <content><![CDATA[<h2 id="元类简介"><a href="#元类简介" class="headerlink" title="元类简介"></a>元类简介</h2><ul>
<li>元类(metaclass)，元类是对类的概念的一种抽象定义，<code>type</code> 是创建类的默认元类</li>
<li>创建类的时候，先调用元类的 <code>__new__</code> 方法，再调用元类的 <code>__init__</code> 方法，如果元类没有相应的方法，调用 type 的同名方法</li>
<li>创建类的实例的时候，先调用类的 <code>__new__</code> 方法，再调用类的 <code>__init__</code> 方法，如果类没有相应的方法，调用 object 的同名方法</li>
<li>当一个类继承自 <code>type</code> 时，这也就是一个元类，创建元类其实就是重写 <code>type</code> 中的各种方法的过程</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="variable language_">self</span>.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">self, name</span>):</span><br><span class="line">    <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态的创建类</span></span><br><span class="line">User = <span class="built_in">type</span>(<span class="string">&#x27;User&#x27;</span>, (<span class="built_in">object</span>, ), &#123;<span class="string">&#x27;__init__&#x27;</span>: init, <span class="string">&#x27;get_name&#x27;</span>: get_name&#125;)</span><br><span class="line"></span><br><span class="line">user = User(<span class="string">&#x27;王大锤&#x27;</span>)</span><br><span class="line">user.get_name()</span><br></pre></td></tr></table></figure>

<h2 id="元类-new"><a href="#元类-new" class="headerlink" title="元类 __new__"></a>元类 <code>__new__</code></h2><p>在定义元类的 <code>__new__</code> 方法时，通常需要传递以下几个参数</p>
<ul>
<li><code>metacls</code> - 同 <code>self</code> ，代表元类自身</li>
<li><code>cls_name</code> - 要创建的类的类名</li>
<li><code>super_cls_tuple</code> - 新建的类需要继承的父类的元祖</li>
<li><code>args_dict</code> - 是一个字典，里面包含了类的方法和类属性，如 <code>__module__</code> \ <code>__doc__</code> 等， 类的属性也会添加进来</li>
</ul>
<p>通过自定义元类的 <code>__new__</code> 方法，可以实现以下特性</p>
<ul>
<li>默认给类添加属性或方法</li>
<li>强制要求子类实现特定的方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 list 的基础上创建一个类来使其支持 add 方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">metacls, cls_name, super_cls_tuple, args_dict</span>):</span><br><span class="line">        args_dict[<span class="string">&#x27;add&#x27;</span>] = <span class="keyword">lambda</span> <span class="variable language_">self</span>, value: <span class="variable language_">self</span>.append(value)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(metacls, cls_name, super_cls_tuple, args_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span>(<span class="built_in">list</span>, metaclass=ListMeta):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    my_list = <span class="type">List</span>()</span><br><span class="line">    my_list.append(<span class="number">1</span>)</span><br><span class="line">    my_list.add(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(my_list)  <span class="comment"># [1, 2]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 强制要求类实现 add 方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls_meta, cls_name, cls_super, args_dict</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;add&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> args_dict:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;Class must have add function&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls_meta, cls_name, cls_super, args_dict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span>(<span class="built_in">list</span>, metaclass=ListMeta):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="variable language_">self</span>.append(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lst = <span class="type">List</span>()</span><br><span class="line">    lst.add(<span class="number">123</span>)</span><br></pre></td></tr></table></figure>

<h2 id="元类-init"><a href="#元类-init" class="headerlink" title="元类 __init__"></a>元类 <code>__init__</code></h2><p>在定义元类的 <code>__init__</code> 方法时，通常需要以下参数</p>
<ul>
<li><code>cls</code> - 进行创建的类本身(不是元类，是新建的类)</li>
<li><code>name</code> - 新建的类的类名</li>
<li><code>bases</code> - 新建的类所继承的类</li>
<li><code>namespace</code> - 新建的类的属性和方法</li>
</ul>
<p>当调用 <code>__init__</code> 函数时，类已经被创建了，所以用该方法通常是进行对类的属性进行增删</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">metacls, cls_name, super_cls_tuple, args_dict</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(metacls, cls_name, super_cls_tuple, args_dict)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">cls, name, bases, namespace</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&quot;length&quot;</span>):</span><br><span class="line">            cls.length = <span class="keyword">lambda</span> cls: <span class="built_in">len</span>(cls)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span>(<span class="built_in">list</span>, metaclass=ListMeta):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="variable language_">self</span>.append(item)</span><br><span class="line"></span><br><span class="line">lst = <span class="type">List</span>([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">lst.add(<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(lst.length()) <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(lst)          <span class="comment"># [1, 2, 123]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="元类-call"><a href="#元类-call" class="headerlink" title="元类 __call__"></a>元类 <code>__call__</code></h2><p>元类中的 <code>__call__</code> 函数是在创建的类在尝试进行实例化的时候被调用的，所以可以通过该函数来对类进行实例化时做限制，例如</p>
<ul>
<li>禁用实例化功能</li>
<li>实现单例模式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 禁用实例化功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoInstanceMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&quot;Faild to Instance&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoInstance</span>(metaclass=NoInstanceMeta):</span><br><span class="line">    name = <span class="string">&#x27;stolen&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Hello, <span class="subst">&#123;cls.name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(NoInstance.name)  <span class="comment"># stolen</span></span><br><span class="line">NoInstance.hello()  <span class="comment"># Hello, stolen</span></span><br><span class="line">no_instance = NoInstance()  <span class="comment"># Raise TypeError</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实现单例模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        cls.__instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__instance = <span class="built_in">super</span>().__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>技术原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Log 的问题排查</title>
    <url>/2024/python_log_issue/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>近期在对其他同事进行维护的一个由 aiohttp 作为 web server 的 web 后端项目做相关优化的时候，发现了一个现象，项目中配置了 log ，但是该项目中除了将 log 输出到日志文件中外，所有的 API 请求都还会在控制台输出一条信息。但几乎进行相同配置的另一个项目则不会出现这个情况。出于技术的好奇决定一探究竟。</p>
<h2 id="复现代码"><a href="#复现代码" class="headerlink" title="复现代码"></a>复现代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> Formatter</span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> web</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_logger</span>():</span><br><span class="line">    <span class="comment"># 配置日志</span></span><br><span class="line">    logger = logging.getLogger(<span class="string">&quot;app_log&quot;</span>)</span><br><span class="line">    logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">    file_handler = RotatingFileHandler(filename=<span class="string">&#x27;app_log.log&#x27;</span>)</span><br><span class="line">    formatter = Formatter(<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">    file_handler.setFormatter(formatter)</span><br><span class="line">    file_handler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">    logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">config_server</span>():</span><br><span class="line">    <span class="comment"># web 服务的其他配置</span></span><br><span class="line">    logging.info(<span class="string">&quot;数据库或其他 web 服务相关的配置&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">request: web.Request</span>) -&gt; web.Response:</span><br><span class="line">    <span class="comment"># 模拟的一个请求处理函数，代码来自 aiohttp 的官方文档</span></span><br><span class="line">    name = request.match_info.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&quot;Anonymous&quot;</span>)</span><br><span class="line">    text = <span class="string">&quot;Hello, &quot;</span> + name</span><br><span class="line">    <span class="keyword">return</span> web.Response(text=text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = web.Application()</span><br><span class="line">app.add_routes([web.get(<span class="string">&#x27;/&#x27;</span>, handle), web.get(<span class="string">&#x27;/&#123;name&#125;&#x27;</span>, handle)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    logger = logging.getLogger(<span class="string">&quot;app_log&quot;</span>)</span><br><span class="line">    setup_logger()</span><br><span class="line">    config_server()</span><br><span class="line">    web.run_app(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8000</span>, access_log=logger)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>运行上述代码，然后再访问 <code>http://localhost:8000</code></p>
<p>控制台会输出类似如下的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; python script.py</span><br><span class="line">======== Running on http://0.0.0.0:8000 ========</span><br><span class="line">(Press CTRL+C to quit)</span><br><span class="line">INFO:app_log:127.0.0.1 [13/Mar/2024:15:40:54 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 167 <span class="string">&quot;-&quot;</span> <span class="string">&quot;PostmanRuntime/7.36.3&quot;</span></span><br></pre></td></tr></table></figure>

<p>同时，项目目录下会生成一个 <code>app_log.log</code> 文件，里面会有类似如下的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-03-13 23:40:54,815 - INFO - 127.0.0.1 [13/Mar/2024:15:40:54 +0000] &quot;GET / HTTP/1.1&quot; 200 167 &quot;-&quot; &quot;PostmanRuntime/7.36.3&quot;</span><br></pre></td></tr></table></figure>

<p>我们所预期的是只有 <code>app_log.log</code> 文件中的信息，但是控制台中也会输出一条信息。</p>
<h2 id="排查踩坑"><a href="#排查踩坑" class="headerlink" title="排查踩坑"></a>排查踩坑</h2><p>首先是对两个表现不同的项目的 setup_logger 代码进行了对比，抛去变量的名称，其余配置都是一模一样。那就排除了配置的差异导致的问题</p>
<p>然后进行了项目依赖的对比，存在一些依赖的差异和版本的区别，但两个项目中都不涉及到 log 相关的依赖，所有的 log 都是使用的 Python 内置的 logging 模块。并且也尝试了交换环境来运行项目。但现象依然是一样的。</p>
<p>这些排查步骤都为能发现原因。没有办法，只能通过对比运行时来了解差别了。</p>
<h2 id="运行时-aiohttp-代码分析"><a href="#运行时-aiohttp-代码分析" class="headerlink" title="运行时 aiohttp 代码分析"></a>运行时 aiohttp 代码分析</h2><p>注意：一下原码分析过程基于 <code>aiohttp==3.6.2</code> 版本的 <a href="https://github.com/aio-libs/aiohttp/tree/v3.6.2">Tag 3.6.2</a> 进行分析的。可能与最新版本的代码有所不同。</p>
<p>接下来就开始对代码启动 web_server 传入的 access_log 参数进行跟踪。在启动 web 服务后，通过</p>
<p><code>run_app</code> -&gt; <code>_run_app</code> -&gt; <code>AppRunner._make_server</code> -&gt; <code>Application.make_handler</code> -&gt; <code>Application._make_handler</code> -&gt; <code>Server.__call__</code> -&gt; <code>RequestHandler</code></p>
<p>会将 access_log 传入到 <a href="https://github.com/aio-libs/aiohttp/blob/6a5ab96bd9cb404b4abfd5160fe8f34a29d941e5/aiohttp/web_protocol.py#L69"><code>RequestHandler</code></a> 类中，每次一个 API 请求会创建一个该类的实例</p>
<p>该类的 <a href="https://github.com/aio-libs/aiohttp/blob/6a5ab96bd9cb404b4abfd5160fe8f34a29d941e5/aiohttp/web_protocol.py#L374"><code>start</code></a> 就是每次请求进入的处理函数</p>
<p>查看 <code>start</code> 函数的逻辑或者搜索传入该类的 <code>access_log</code> 可以知道是由 <a href="https://github.com/aio-libs/aiohttp/blob/6a5ab96bd9cb404b4abfd5160fe8f34a29d941e5/aiohttp/web_protocol.py#L343"><code>log_access</code></a> 函数来对每次请求进行日志处理处理的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意：一下代码非原始代码，为了方便理解，做了一些简化，仅保留关键部分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RequestHandler</span>(<span class="title class_ inherited__">BaseProtocol</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, </span></span><br><span class="line"><span class="params">                 access_log_class: <span class="type">Type</span>[AbstractAccessLogger]=AccessLogger,</span></span><br><span class="line"><span class="params">                 access_log: Logger=access_logger,</span></span><br><span class="line"><span class="params">                 access_log_format: <span class="built_in">str</span>=AccessLogger.LOG_FORMAT,</span>):</span><br><span class="line">        <span class="variable language_">self</span>.access_log = access_log</span><br><span class="line">        <span class="keyword">if</span> access_log:</span><br><span class="line">            <span class="variable language_">self</span>.access_logger = access_log_class(</span><br><span class="line">                access_log, access_log_format)  <span class="comment"># type: <span class="type">Optional</span>[AbstractAccessLogger]  # noqa</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.access_logger = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">log_access</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                   request: BaseRequest,</span></span><br><span class="line"><span class="params">                   response: StreamResponse,</span></span><br><span class="line"><span class="params">                   time: <span class="built_in">float</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.access_logger <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.access_logger.log(request, response, time)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> <span class="variable language_">self</span>._force_close:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># log access</span></span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.access_log:</span><br><span class="line">                    <span class="variable language_">self</span>.log_access(request, resp, loop.time() - now)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                ...</span><br></pre></td></tr></table></figure>

<p>同时，我们又看到 <code>log_access</code> 函数中的 <code>self.access_logger</code> 是在 <code>__init__</code> 函数中使用 <code>access_log_class</code> 创建的，<code>access_log_class</code> 的值可以传入或使用默认值。向前回溯我们并未传入该参数。所以此处是默认值在起作用。再进入 <a href="https://github.com/aio-libs/aiohttp/blob/6a5ab96bd9cb404b4abfd5160fe8f34a29d941e5/aiohttp/web_log.py#L213"><code>AccessLogger.log</code></a> 函数中。可以看到该函数就是在生成日志的地方，默认情况下，会使用下述格式进行日志的生成</p>
<p><code>&lt;remote_address&gt; &lt;request_start_time&gt; &quot;&lt;first_request_line&gt;&quot; &lt;response_status&gt; &lt;response_size&gt; &quot;&lt;request_header:referer&gt;&quot; &quot;&lt;request_header:user_agent&gt;&quot;</code></p>
<p>例如：</p>
<p><code>127.0.0.1 [18/Mar/2024:15:22:08 +0000] &quot;GET / HTTP/1.1&quot; 200 167 &quot;-&quot; &quot;PostmanRuntime/7.37.0&quot;</code></p>
<p>此时也能看到使用了 <code>self.logging.info</code> 来进行日志的输出。 <code>self.logging</code> 就是我们最开始传入的 <code>access_log</code> 。也就是我们自己写的代码中的 <code>logging.getLogger(&quot;app_log&quot;)</code> 返回的对象。</p>
<h2 id="运行时-python-代码分析"><a href="#运行时-python-代码分析" class="headerlink" title="运行时 python 代码分析"></a>运行时 python 代码分析</h2><p>注意：以下代码基于 <a href="https://github.com/python/cpython/tree/3.7"><code>python3.7</code></a> 版本的源码进行分析。其他版本可能会有所不同。</p>
<p>首先，我们可以看到正常使用 <code>logging.info</code> 输出的日志实际上是创建了一个 <a href="https://github.com/python/cpython/blob/0f56adb8d74e703974811620559d96c999334547/Lib/logging/__init__.py#L1822"><code>root</code></a> 的 <a href="https://github.com/python/cpython/blob/0f56adb8d74e703974811620559d96c999334547/Lib/logging/__init__.py#L1321">Logger</a> 对象。该对象的 <code>name</code> 属性值为 <code>root</code> ，默认的 <code>level</code> 为 <code>WARNING</code> ， 默认的 <code>handlers</code> 为空。</p>
<p>然后再关注 <a href="https://github.com/python/cpython/blob/0f56adb8d74e703974811620559d96c999334547/Lib/logging/__init__.py#L1928"><code>logging.getLogger</code></a> 函数，该函数实现如下，可以知道如果没有传入 <code>name</code> 参数，那么就会返回上文中提到的 <code>root</code> 对象。如果传入了 <code>name</code> 参数，那么就会返回 <code>Logger.manager.getLogger(name)</code> 的返回值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getLogger</span>(<span class="params">name=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> name:</span><br><span class="line">        <span class="keyword">return</span> Logger.manager.getLogger(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/python/cpython/blob/0f56adb8d74e703974811620559d96c999334547/Lib/logging/__init__.py#L1824"><code>Logger.manager</code></a> 是一个用 <code>Logger.root</code> 初始化的 <a href="https://github.com/python/cpython/blob/0f56adb8d74e703974811620559d96c999334547/Lib/logging/__init__.py#L1200"><code>Manager</code></a> 的实例对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Logger.manager = Manager(Logger.root)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, rootnode</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = rootnode</span><br><span class="line">        <span class="variable language_">self</span>.loggerDict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getLogger</span>(<span class="params">self, name</span>):</span><br><span class="line">        rv = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(name, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;A logger name must be a string&#x27;</span>)</span><br><span class="line">        _acquireLock()  <span class="comment"># 该函数是一个线程锁</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> <span class="variable language_">self</span>.loggerDict:</span><br><span class="line">                rv = <span class="variable language_">self</span>.loggerDict[name]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(rv, PlaceHolder):</span><br><span class="line">                    ph = rv</span><br><span class="line">                    rv = (<span class="variable language_">self</span>.loggerClass <span class="keyword">or</span> _loggerClass)(name)</span><br><span class="line">                    rv.manager = <span class="variable language_">self</span></span><br><span class="line">                    <span class="variable language_">self</span>.loggerDict[name] = rv</span><br><span class="line">                    <span class="variable language_">self</span>._fixupChildren(ph, rv)</span><br><span class="line">                    <span class="variable language_">self</span>._fixupParents(rv)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 使用 Logger 类创建一个新的 Logger 对象，并将其加入到 loggerDict 中</span></span><br><span class="line">                rv = (<span class="variable language_">self</span>.loggerClass <span class="keyword">or</span> _loggerClass)(name)</span><br><span class="line">                rv.manager = <span class="variable language_">self</span></span><br><span class="line">                <span class="variable language_">self</span>.loggerDict[name] = rv</span><br><span class="line">                <span class="variable language_">self</span>._fixupParents(rv)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            _releaseLock()</span><br><span class="line">        <span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure>

<p>查看上述代码可知， <code>Manager</code> 中存在一个 <code>loggerDict</code> 的字典用来管理所有的 <code>Logger</code> 对象。如果传入的 <code>name</code> 在 <code>loggerDict</code> 中存在，那么就会返回该 <code>Logger</code> 对象。如果不存在，那么就会创建一个新的 <code>Logger</code> 对象，并将其加入到 <code>loggerDict</code> 中。以此实现单例模式。</p>
<p><code>_fixupParents</code> 的主要作用是解析其父节点，如果名称中携带有 <code>.</code> ，那么会创建一个 <code>PlaceHolder</code> 节点，如果前后文有使用该节点，那么会将其替换为真实的 <code>Logger</code> 节点。如果未使用，则该节点的父节点依然是 <code>root</code> 节点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">abcdefgh = logging.getLogger(<span class="string">&quot;abc.def.gh&quot;</span>)</span><br><span class="line"></span><br><span class="line">abcdef = logging.getLogger(<span class="string">&quot;abc.def&quot;</span>)</span><br><span class="line"></span><br><span class="line">abc = logging.getLogger(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line"></span><br><span class="line">abcd = logging.getLogger(<span class="string">&quot;ab.cd&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(abcdefgh, abcdefgh.parent)    <span class="comment"># &lt;Logger abc.def.gh (WARNING)&gt; &lt;Logger abc.def (WARNING)&gt;</span></span><br><span class="line"><span class="built_in">print</span>(abcdef, abcdef.parent)        <span class="comment"># &lt;Logger abc.def (WARNING)&gt; &lt;Logger abc (WARNING)&gt;</span></span><br><span class="line"><span class="built_in">print</span>(abc, abc.parent)              <span class="comment"># &lt;Logger abc (WARNING)&gt; &lt;Logger root (WARNING)&gt;</span></span><br><span class="line"><span class="built_in">print</span>(abcd, abcd.parent, abcd.parent.parent)            <span class="comment"># &lt;Logger ab.cd (WARNING)&gt; &lt;Logger root (WARNING)&gt; None</span></span><br></pre></td></tr></table></figure>

<p>到此，我们就了解了 <code>logging.getLogger</code> 函数的工作原理。接下来我们再看看 <code>logging.info</code> 函数的实现，跟踪定位发现 <code>logging.info</code> 最后的打印操作是在 <code>Logger</code> 对象中的 <a href="https://github.com/python/cpython/blob/0f56adb8d74e703974811620559d96c999334547/Lib/logging/__init__.py#L1570"><code>callHandlers</code></a> 函数中，该函数的实现如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">callHandlers</span>(<span class="params">self, record</span>):</span><br><span class="line">    c = <span class="variable language_">self</span></span><br><span class="line">    found = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> c:</span><br><span class="line">        <span class="keyword">for</span> hdlr <span class="keyword">in</span> c.handlers:</span><br><span class="line">            found = found + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> record.levelno &gt;= hdlr.level:</span><br><span class="line">                hdlr.handle(record)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> c.propagate:</span><br><span class="line">            c = <span class="literal">None</span>    <span class="comment">#break out</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c = c.parent</span><br><span class="line">    <span class="keyword">if</span> (found == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">if</span> lastResort:</span><br><span class="line">            <span class="keyword">if</span> record.levelno &gt;= lastResort.level:</span><br><span class="line">                lastResort.handle(record)</span><br><span class="line">        <span class="keyword">elif</span> raiseExceptions <span class="keyword">and</span> <span class="keyword">not</span> <span class="variable language_">self</span>.manager.emittedNoHandlerWarning:</span><br><span class="line">            sys.stderr.write(<span class="string">&quot;No handlers could be found for logger&quot;</span></span><br><span class="line">                             <span class="string">&quot; \&quot;%s\&quot;\n&quot;</span> % <span class="variable language_">self</span>.name)</span><br><span class="line">            <span class="variable language_">self</span>.manager.emittedNoHandlerWarning = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>此处可以看到， <code>c.handlers</code> 实际上是一个列表，我们在前文使用 <code>logger.addHandler(file_handler)</code> 即是将 <code>file_handler</code> 加入到了 <code>c.handlers</code> 中。然后调用 <code>handlers</code> 中的 <code>handle</code> 函数来处理日志的输出。当处理完 <code>c.handlers</code> 中的所有 <code>handler</code> 后，会将 <code>c</code> 设置为 <code>c.parent</code> ，然后继续处理 <code>c.parent</code> 中的 <code>handlers</code> 。直到 <code>c</code> 为 <code>None</code> 或者 <code>c.propagate</code> 为 <code>False</code> 时，结束循环。 <code>c.handlers</code> 的输出就是正常使用了配置中的文件进行了日志的输出。那么问题就出在了 <code>c.parent</code> 上。</p>
<p>但到此时为止，我们都没有对 <code>root</code> 节点进行任何的操作。按道理来说， <code>root</code> 节点当前的 <code>handlers</code> 应该是空的。但是此时通过调试发现，此时的 <code>root</code> 节点的 <code>handlers</code> 中存在 <code>[&lt;StreamHandler &lt;stderr&gt; (NOTSET)&gt;]</code> 的内容。</p>
<p>问题其实出现在了我们自己写的 <code>config_server</code> 函数中的 <code>logging.info</code> 中。 <a href="https://github.com/python/cpython/blob/0f56adb8d74e703974811620559d96c999334547/Lib/logging/__init__.py#L1984"><code>logging.info</code></a> 的实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">msg, *args, **kwargs</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(root.handlers) == <span class="number">0</span>:</span><br><span class="line">        basicConfig()</span><br><span class="line">    root.info(msg, *args, **kwargs)</span><br></pre></td></tr></table></figure>

<p>可以看到，如果 <code>root.handlers</code> 为空，那么就会调用 <code>basicConfig</code> 函数。 <code>basicConfig</code> 函数的实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">basicConfig</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    _acquireLock()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(root.handlers) == <span class="number">0</span>:</span><br><span class="line">            handlers = kwargs.pop(<span class="string">&quot;handlers&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> handlers <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                filename = kwargs.pop(<span class="string">&quot;filename&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">                mode = kwargs.pop(<span class="string">&quot;filemode&quot;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> filename:</span><br><span class="line">                    h = FileHandler(filename, mode)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    stream = kwargs.pop(<span class="string">&quot;stream&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">                    h = StreamHandler(stream)</span><br><span class="line">                handlers = [h]</span><br><span class="line">            dfs = kwargs.pop(<span class="string">&quot;datefmt&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">            style = kwargs.pop(<span class="string">&quot;style&quot;</span>, <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">            fs = kwargs.pop(<span class="string">&quot;format&quot;</span>, _STYLES[style][<span class="number">1</span>])</span><br><span class="line">            fmt = Formatter(fs, dfs, style)</span><br><span class="line">            <span class="keyword">for</span> h <span class="keyword">in</span> handlers:</span><br><span class="line">                <span class="keyword">if</span> h.formatter <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    h.setFormatter(fmt)</span><br><span class="line">                root.addHandler(h)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        _releaseLock()</span><br></pre></td></tr></table></figure>

<p>由于调用该函数时，未传递任何参数，故删除掉参数的处理逻辑，可以看到 <code>handlers</code> 初始化为了一个具有一个 <code>StreamHandler</code> 实例化对象元素的列表。 <a href="https://github.com/python/cpython/blob/0f56adb8d74e703974811620559d96c999334547/Lib/logging/__init__.py#L982"><code>StreamHandler</code></a> 初始化函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StreamHandler</span>(<span class="title class_ inherited__">Handler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, stream=<span class="literal">None</span></span>):</span><br><span class="line">        Handler.__init__(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="keyword">if</span> stream <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            stream = sys.stderr</span><br><span class="line">        <span class="variable language_">self</span>.stream = stream</span><br></pre></td></tr></table></figure>

<p>可以看到，如果未传入 <code>stream</code> 参数，那么就会使用 <code>sys.stderr</code> 作为默认的输出流。同时， <code>StreamHandler</code> 继承自 <code>Handler</code> 。在未传入 <code>level</code> 的时候，默认值为 <code>NOTSET</code> ，并且 <code>fs = kwargs.pop(&quot;format&quot;, _STYLES[style][1])</code> 使用了 <a href="https://github.com/python/cpython/blob/0f56adb8d74e703974811620559d96c999334547/Lib/logging/__init__.py#L449"><code>BASIC_FORMAT</code></a> 的格式进行格式化日志。所以控制台输出的日志前缀会是 <code>levelname:app_name:message</code> 的格式。</p>
<p>所以此时的 <code>root</code> 节点的 <code>handlers</code> 中存在 <code>[&lt;StreamHandler &lt;stderr&gt; (NOTSET)&gt;]</code> 的内容。故此时 <code>root</code> 的 <code>handlers</code> 存在一个输到控制台的 <code>handler</code> 。所以每次调用 <code>app_log</code> 的 <code>info</code> 的时候。都会由 <code>&lt;StreamHandler &lt;stderr&gt; (NOTSET)&gt;</code> 输出一条日志到控制台。</p>
<p>至此，问题分析完毕</p>
<h2 id="最后的尝试"><a href="#最后的尝试" class="headerlink" title="最后的尝试"></a>最后的尝试</h2><p>将前面的测试代码稍作改动，将 <code>config_server</code> 函数中的 <code>logging.info</code> 注释掉。再次运行代码，然后在接口的 handler 中添加一个 if 语句后。按照如下顺序调用接口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8000/stolen</span><br><span class="line">curl http://localhost:8000</span><br><span class="line">curl http://localhost:8000/stolen</span><br></pre></td></tr></table></figure>

<p>控制台出现了入下的输出，会发现第一次请求没有输出，第二次和第三次请求出现了输出。结合上述原理。应该很容易理解了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO:app_log:127.0.0.1 [19/Mar/2024:05:33:00 +0000] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 167 <span class="string">&quot;-&quot;</span> <span class="string">&quot;PostmanRuntime/7.37.0&quot;</span></span><br><span class="line">INFO:app_log:127.0.0.1 [19/Mar/2024:05:33:02 +0000] <span class="string">&quot;GET /stolen HTTP/1.1&quot;</span> 200 164 <span class="string">&quot;-&quot;</span> <span class="string">&quot;PostmanRuntime/7.37.0&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> Formatter</span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> web</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_logger</span>():</span><br><span class="line">    <span class="comment"># 配置日志</span></span><br><span class="line">    logger = logging.getLogger(<span class="string">&quot;app_log&quot;</span>)</span><br><span class="line">    logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">    file_handler = RotatingFileHandler(filename=<span class="string">&#x27;app_log.log&#x27;</span>)</span><br><span class="line">    formatter = Formatter(<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">    file_handler.setFormatter(formatter)</span><br><span class="line">    file_handler.setLevel(logging.ERROR)</span><br><span class="line"></span><br><span class="line">    logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">config_server</span>():</span><br><span class="line">    <span class="comment"># web 服务的其他配置</span></span><br><span class="line">    <span class="comment"># logging.info(&quot;数据库或其他 web 服务相关的配置&quot;)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">request: web.Request</span>) -&gt; web.Response:</span><br><span class="line">    <span class="comment"># 模拟的一个请求处理函数，代码来自 aiohttp 的官方文档</span></span><br><span class="line">    name = request.match_info.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&quot;Anonymous&quot;</span>)</span><br><span class="line">    text = <span class="string">&quot;Hello, &quot;</span> + name</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&quot;Anonymous&quot;</span>:</span><br><span class="line">        logging.info(<span class="string">&quot;Console log: Hello, Anonymous&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> web.Response(text=text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = web.Application()</span><br><span class="line">app.add_routes([web.get(<span class="string">&#x27;/&#x27;</span>, handle), web.get(<span class="string">&#x27;/&#123;name&#125;&#x27;</span>, handle)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    logger = logging.getLogger(<span class="string">&quot;app_log&quot;</span>)</span><br><span class="line">    setup_logger()</span><br><span class="line">    config_server()</span><br><span class="line">    web.run_app(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8000</span>, access_log=logger)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>技术原理</tag>
        <tag>Issue</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中的 MRO</title>
    <url>/2023/python_mro/</url>
    <content><![CDATA[<h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># B 直接继承 object</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(C, B):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">D.show() <span class="comment"># A</span></span><br></pre></td></tr></table></figure>

<p>继承图</p>
<pre><code class="highlight mermaid">graph TD;
    A--&gt;C;
    C--&gt;D;
    B--&gt;D;
</code></pre>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 B 的定义继承自 A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(C, B):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">D.show() <span class="comment"># B</span></span><br></pre></td></tr></table></figure>

<p>继承图</p>
<pre><code class="highlight mermaid">graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;</code></pre>

<h2 id="Python-MRO-简介"><a href="#Python-MRO-简介" class="headerlink" title="Python MRO 简介"></a>Python MRO 简介</h2><p>Python 中的 MRO (Method Resolution Order 方法解析顺序)是指在多重继承的情况下，确定调用方法的顺序。</p>
<p>Python 历史中主要存在过三种 MRO 算法，分别是 DFS 算法、改进的 DFS 算法、C3算法。</p>
<p>Python 有两种类：经典类（classic class）和新式类（new-style class）。</p>
<ul>
<li>Python 所有的经典类都是使用的 DFS 算法</li>
<li>Python2.2 中引入了新式类，使用的是改进的 DFS 算法</li>
<li>Python2.3 中将新式类的 MRO 算法改为 C3 算法，由于 Python3 中只有新式类，所以 Python3 中的 MRO 算法就是 C3 算法</li>
</ul>
<p>查看 Python 的 MRO 顺序方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 经典类的查看方法</span></span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line">inspect.getmro(D)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新式类的查看方法</span></span><br><span class="line">D.__mro__</span><br><span class="line">D.mro()</span><br><span class="line">inspect.getmro(D)</span><br></pre></td></tr></table></figure>

<p>算法分析的关系代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(B, C):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>以上的类继承关系可以用下面的图表示：</p>
<pre><code class="highlight mermaid">graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;</code></pre>

<h2 id="DFS-算法"><a href="#DFS-算法" class="headerlink" title="DFS 算法"></a>DFS 算法</h2><p>DFS 算法是 Python 2 中经典类的 MRO 算法，其基本思想是从左到右，深度优先遍历所有的父类，将遍历到的父类放入一个列表中，如果遍历到的父类已经在列表中，则跳过。</p>
<p>将上面的类继承按照深度优先算法获取继承顺序为 <code>D, B, A, C, A</code>，重复类只保留第一个，所以得到的 MRO 为 <code>[D, B, A, C]</code></p>
<h2 id="改进的-DFS-算法"><a href="#改进的-DFS-算法" class="headerlink" title="改进的 DFS 算法"></a>改进的 DFS 算法</h2><p>在 Python2.2 中，新式类的 MRO 算法改为了改进的 DFS 算法，其基本思想是从左到右，深度优先遍历所有的父类，将遍历到的父类放入一个列表中，如果遍历到的父类已经在列表中，将其移动到列表的最后。</p>
<p>将上面的类继承按照深度优先算法获取继承顺序为 <code>D, B, A, C, A</code>，重复类只保留最后一个，所以得到的 MRO 为 <code>D, B, C, A</code></p>
<h2 id="C3-算法"><a href="#C3-算法" class="headerlink" title="C3 算法"></a>C3 算法</h2><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><p><a href="https://zh.wikipedia.org/wiki/C3%E7%BA%BF%E6%80%A7%E5%8C%96">C3 算法</a>才是本文的重点，C3 的名称是因为该算法实现了三个重要的一致性(consistent)属性</p>
<ul>
<li><p>基于一致性扩展的优先图(extended precedence graph)</p>
<ul>
<li><p>找到两个类的最小公共子类，然后寻找着这两个类到最小公共子类之间，两个类或者两个类的任意子类谁在最前面，谁就是应该被优先使用的类</p>
</li>
<li><p>如果B和C都是A的基类，B继承了D，C继承了E，那D和E的顺序是不受局部优先规则的制约的，需要使用一致性扩展的优先图来确定D和E的顺序</p>
<pre><code class="highlight mermaid">graph TD;
  D--&gt;B;
  E--&gt;B;
  D--&gt;C;
  F--&gt;C;
  B--&gt;A;
  C--&gt;A;</code></pre>

<p>如果只有在 E 和 F 中实现了该方法，那边 A 应该使用 E 还是 F 就需要使用一致性扩展的优先图来确定</p>
</li>
</ul>
</li>
<li><p>局部优先原则(local precedence order)</p>
<ul>
<li>当一个类同时继承了多个类的时候，优先使用前面这个类里面的方法</li>
<li>比如A继承B和C，那么A读取父类方法，应该优先使用B的方法而不是C的方法</li>
</ul>
</li>
<li><p>单调性原则(monotonicity)</p>
<ul>
<li>子类和父类的搜索顺序一致，类所使用的方法必须是它的直接父类中某一个类使用的方法，如果直接父类没有调用过这个方法，子类是不允许调用这个方法的</li>
<li>子类不能改变父类的方法搜索顺序</li>
</ul>
</li>
</ul>
<p>C3 的合并方法是选择这些列表的头部中第一个符合条件者，它不出现在任何这些列表的尾部（一个列表的除了第一个元素的所有元素）之中。注意一个良好头部，可以同时出现为多个列表的第一个元素，但是禁止它出现在任何其他地方。将选择的元素从以它作为头部的所有列表中移除，并将它填加到输出列表。重复选择并移除良好头部并扩展输出列表的过程，直到所有余下的列表被竭尽。如果在某一点上，因为所有余下列表的头部都出现在某个列表的尾部中，而没有良好头部可选，那么由于在继承层级中依赖的不一致次序，归并过程不能计算下去，故而最初类的线性化不存在。</p>
<p>总结下来合并步骤</p>
<ol>
<li>获取直接继承类的 MRO 顺序</li>
<li>从前向后找每个列表中的第一个元素<ul>
<li>如果该元素没有出现在其他列表中，则将该元素添加到结果列表中</li>
<li>如果该元素仅出现在其他列表的开头，则将该元素添加到结果列表中，并且在每个列表中删除该元素</li>
<li>如果该元素出现在其他列表的开头以外的位置，则跳过该列表，继续下个列表进行检测</li>
<li>如果所有列表都没有找到符合条件的元素，则抛出异常(TypeError)</li>
</ul>
</li>
</ol>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre><code class="highlight mermaid">graph TD;
    object--&gt;X;
    object--&gt;Y;
    X--&gt;A;
    Y--&gt;A;
    Y--&gt;B;
    A--&gt;C;
    B--&gt;C;</code></pre>

<figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="code"><pre><span class="line">X = [X, object]</span><br><span class="line">Y = [Y, object]</span><br><span class="line">A = [A, X(), Y()]</span><br><span class="line">  = [A, [X, object], [Y, object]]</span><br><span class="line">  = [A, X, [object], [Y, object]]</span><br><span class="line">  = [A, X, Y, [object], [object]]</span><br><span class="line">  = [A, X, Y, object]</span><br><span class="line"></span><br><span class="line">B = [B, Y()]</span><br><span class="line">  = [B, [Y, object]]</span><br><span class="line">  = [B, Y, [object]]</span><br><span class="line">  = [B, Y, object]</span><br><span class="line"></span><br><span class="line">C = [C, A(), B()]</span><br><span class="line">  = [C, [A, X, Y, object], [B, Y, object]]</span><br><span class="line">  = [C, A, [X, Y, object], [B, Y, object]]</span><br><span class="line">  = [C, A, X, [Y, object], [B, Y, object]]</span><br><span class="line">  = [C, A, X, B, [Y, object], [Y, object]]</span><br><span class="line">  = [C, A, X, B, Y, [object], [object]]</span><br><span class="line">  = [C, A, X, B, Y, object]</span><br></pre></td></tr></table></figure>

<p>代码验证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Y</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(X, Y):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">Y</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(A, B):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">C.mro()</span><br><span class="line"><span class="comment"># [__main__.C, __main__.A, __main__.X, __main__.B, __main__.Y, object]</span></span><br></pre></td></tr></table></figure>

<h3 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h3><pre><code class="highlight mermaid">graph TD;
    object--&gt;X;
    object--&gt;Y;
    X--&gt;A;
    Y--&gt;A;
    Y--&gt;B;
    X--&gt;B;
    A--&gt;C;
    B--&gt;C;</code></pre>

<figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="code"><pre><span class="line">X = [X, object]</span><br><span class="line">Y = [Y, object]</span><br><span class="line">A = [A, X(), Y()] = [A, [X, object], [Y, object]] = [A, X, [object], [Y, object]] = [A, X, Y, [object], [object]] = [A, X, Y, object]</span><br><span class="line">B = [B, Y(), X()] = [B, [Y, object], [X, object]] = [B, Y, [object], [X, object]] = [B, Y, X, [object], [object]] = [B, Y, X, object]</span><br><span class="line">C = [C, A(), B()] = [C, [A, X, Y, object], [B, Y, X, object]] = [C, A, [X, Y, object], [B, Y, X, object]] = [C, A, B, [X, Y, object], [Y, X, object]]</span><br><span class="line">此时，无法找到符合条件的元素，所以抛出异常</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Y</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(X, Y):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(Y, X):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(A, B):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># TypeError: Cannot create a consistent method resolution</span></span><br><span class="line"><span class="comment"># order (MRO) for bases X, Y</span></span><br></pre></td></tr></table></figure>

<h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><p>现在解答最开始的问题</p>
<p>第一个代码块中输出 <code>A</code> 的原因</p>
<pre><code class="highlight mermaid">graph TD;
    A--&gt;C;
    C--&gt;D;
    B--&gt;D;</code></pre>

<figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="code"><pre><span class="line">A = [A, object]</span><br><span class="line">C = [C, A()] = [C, [A, object]] = [C, A, object]</span><br><span class="line">B = [B, object]</span><br><span class="line">D = [D, C(), B()]</span><br><span class="line">  = [D, [C, A, object], [B, object]]</span><br><span class="line">  = [D, C, [A, object], [B, object]]</span><br><span class="line">  = [D, C, A, [object], [B, object]]</span><br><span class="line">  = [D, C, A, B, [object], [object]]</span><br><span class="line">  = [D, C, A, B, object]</span><br><span class="line"></span><br><span class="line">D -&gt; C -&gt; A -&gt; B -&gt; object</span><br></pre></td></tr></table></figure>

<p>第二个代码块中输出 <code>B</code> 的原因</p>
<pre><code class="highlight mermaid">graph TD;
    A--&gt;C;
    A--&gt;B;
    C--&gt;D;
    B--&gt;D;</code></pre>

<figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="code"><pre><span class="line">A = [A, object]</span><br><span class="line">C = [C, A()] = [C, [A, object]] = [C, A, object]</span><br><span class="line">B = [B, A()] = [B, [A, object]] = [B, A, object]</span><br><span class="line">D = [D, C(), B()]</span><br><span class="line">  = [D, [C, A, object], [B, A, object]]</span><br><span class="line">  = [D, C, [A, object], [B, A, object]]</span><br><span class="line">  = [D, C, B, [A, object], [A, object]]</span><br><span class="line">  = [D, C, B, A, [object], [object]]</span><br><span class="line">  = [D, C, B, A, object]</span><br><span class="line"></span><br><span class="line">D -&gt; C -&gt; B -&gt; A -&gt; object</span><br></pre></td></tr></table></figure>

<h2 id="super-的使用"><a href="#super-的使用" class="headerlink" title="super 的使用"></a>super 的使用</h2><p><code>super([type, [type_or_object]])</code></p>
<ul>
<li>第一个参数决定了在 mro 链上从哪个 class 开始向后找</li>
<li>第二个参数决定了这个函数 bind 到那个 object 上，同时决定使用哪个类的 mro</li>
</ul>
<p>如果两个参数都不传，只能在 class 中使用，会隐式的做两件事</p>
<ul>
<li>寻找这个 super 是在哪个类里面定义的，将这个类当做第一个参数传入 super</li>
<li>寻找这个 super 是在哪个函数中定义的，将函数的第一个参数作为 super 的第二个参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Admin</span>(<span class="title class_ inherited__">User</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, group</span>):</span><br><span class="line">        <span class="comment">#--------------------------</span></span><br><span class="line">        <span class="comment"># 第一种写法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line">        <span class="comment"># 第二种写法</span></span><br><span class="line">        <span class="built_in">super</span>(Admin, <span class="variable language_">self</span>).__init__(name)</span><br><span class="line">        <span class="comment">#--------------------------</span></span><br><span class="line">        <span class="variable language_">self</span>.group = group</span><br><span class="line"></span><br><span class="line">admin = Admin(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;finance&quot;</span>)</span><br><span class="line"><span class="comment"># 第三种写法，类外使用</span></span><br><span class="line"><span class="built_in">super</span>(Admin, admin).__init__(<span class="string">&quot;stolen&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>证明两个参数含义的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;C&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(B, C):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        B.show(<span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">d.show() <span class="comment"># C</span></span><br></pre></td></tr></table></figure>

<pre><code class="highlight mermaid">graph TD;
    A-show--&gt;B;
    A-show--&gt;C-show;
    B--&gt;D;
    C-show--&gt;D;</code></pre>

<p>说明：</p>
<ul>
<li>D 的 mro 为 <code>[D, B, C, A, object]</code></li>
<li>D 中 <code>show</code> 方法调用了 B 中的 <code>show</code> 方法，B 中的 <code>show</code> 方法使用了 <code>super</code></li>
<li>根据前面的知识，可以知道 B 中的 <code>super</code> 的两个参数分别是 <code>B</code> 和 <code>self</code>，但是 <code>self</code> 又是来自于 <code>D</code></li>
<li>最后的调用含义为用 D 的 mro 链中从 B 开始向后找，找到第一个是 C，所以最后的输出为 <code>C</code></li>
</ul>
<h2 id="最后提醒"><a href="#最后提醒" class="headerlink" title="最后提醒"></a>最后提醒</h2><p>Python 的 MRO 从来没有使用过广度优先算法，只是很多情况下 C3 线性化的结果和广度优先算法的结果一致。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.python.org/download/releases/2.3/mro/">Python MRO</a></li>
<li><a href="https://zh.wikipedia.org/wiki/C3%E7%BA%BF%E6%80%A7%E5%8C%96">C3 线性化</a></li>
<li><a href="https://www.cnblogs.com/qunxiadexiaoxiangjiao/p/8311429.html">Python的方法解析顺序(MRO)</a></li>
<li><a href="https://github.com/gaogaotiantian">gaogaotiantian</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>技术原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Software Manual</title>
    <url>/2020/software_manual/</url>
    <content><![CDATA[<h2 id="Hyper"><a href="#Hyper" class="headerlink" title="Hyper"></a>Hyper</h2><p>简介：一款界面美观的terminal命令行工具，基于Electorn开发，三大桌面平台均支持，而且支持插件安装，方便扩展功能。</p>
<p>下载地址：<a href="https://hyper.is/">官网</a>，<a href="https://github.com/vercel/hyper">github</a></p>
<p>常用命令：</p>
<ul>
<li><code>hyper i 插件名称</code> - 安装插件</li>
<li><code>hyper u 插件名称</code> - 卸载插件</li>
<li><code>hyper --help</code> - 查看更多命令</li>
</ul>
<p>常用插件：</p>
<ul>
<li><code>hypercwd</code> - 让你打开新的Tab页时自动保持上一个Tab页的路径。</li>
<li><code>hyper-search</code> - 使用<code>command + f</code>对命令行窗口里的内容全文检索。</li>
<li><code>hype-pane</code> - 同时显示多个命令行面板</li>
</ul>
<p><a href="https://github.com/bnb/awesome-hyper">更多插件和主题</a></p>
<p>配置文件地址：</p>
<ul>
<li>Mac: <code>~/Library/Application Support/Hyper/.hyper.js</code></li>
<li>Windows: <code>$Env:AppData/Hyper/.hyper.js</code></li>
<li>Linux: <code>~/.config/Hyper/.hyper.js</code></li>
</ul>
<p>快捷使用：</p>
<ul>
<li><code>command + ⬅️\➡️</code> - 快速到行首\尾</li>
</ul>
]]></content>
      <categories>
        <category>日常软件</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
        <tag>MacOS</tag>
        <tag>Windows</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger编写API文档的YMAL文件语法</title>
    <url>/2020/swagger/</url>
    <content><![CDATA[<p>使用Swagger编写接口文档语法示例<span id="more"></span></p>
<p>官方openapi3.0规范访问：<a href="https://swagger.io/docs/specification/about/">About Swagger Specification</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">swagger:</span> <span class="string">&quot;2.0&quot;</span>  </span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">&quot;this is a api for authenticating users and binding cloud accounts.&quot;</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">&quot;Auth api&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>swagger: “2.0” 指定swagger的版本号，此处必须为2.0</p>
<p>info: 描述api文档的元数据</p>
<p>title：接口标题</p>
<p>description：接口文档描述</p>
<p>version：接口版本号</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">host:</span> <span class="string">&quot;52.82.26.240:5000&quot;</span></span><br><span class="line"><span class="attr">basePaths:</span> <span class="string">/api</span></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">http</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https</span></span><br><span class="line"><span class="attr">produces:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">application/json</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>host： swagger提供测试用例的主机名，如果未设定就为当前主机，可以设置端口</p>
<p>basePath：定义的api的前缀，必须已&#x2F;开头,测试用例的主机则为:host＋bashPath</p>
<p>schemes：指定调用接口的协议，必须是:”http”, “https”, “ws”, “wss”．默认是http.-表示是个数组元素，即schemes接受一个数组参数</p>
<p>produces：声明全局后端响应返回xml数据格式，通常使用”application&#x2F;json”或者”application&#x2F;xml”，可以在局部中定义覆盖全局</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/authenticate:</span></span><br><span class="line">    <span class="attr">post:</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;auth&quot;</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">&quot;Get a accessToken&quot;</span></span><br><span class="line">      <span class="attr">consumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      <span class="attr">produces:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;body&quot;</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&quot;account of fastone&quot;</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">in:</span> <span class="string">&quot;body&quot;</span></span><br><span class="line">        <span class="attr">schema:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">&quot;#/definitions/Auth&quot;</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">400:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;Invalid input&quot;</span></span><br><span class="line">        <span class="attr">403:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;Invalid credential&quot;</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;Get a accessToken&quot;</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          </span><br></pre></td></tr></table></figure>

<blockquote>
<p>paths: 路由地址</p>
<p>post: 请求方法，需要是http定义的请求方法（get、post、put、patch、delete、head、option）</p>
<p>tags: 命名空间，也可以称为标签，方便对接口进行归类，快速过滤出相关接口</p>
<p>summary: 接口概要</p>
<p>description：接口描述</p>
<p>consumes：前端请求格式，即body的参数格式，通常为”application&#x2F;json”、”application&#x2F;xml”、”application&#x2F;text”</p>
<p>produces：后端响应格式，通常为”application&#x2F;json”、”application&#x2F;xml”、”application&#x2F;text”</p>
<p>parameters：参数</p>
<p>name： 参数名字</p>
<p>description：描述</p>
<p>required：是否是必填参数</p>
<p>in：属于哪种参数 body, header, formData, query, path，cookie</p>
<p>body只能有一个，body里的参数需要以model的形式通过schema放在里面</p>
<p>enum：枚举参数值，表示可能出现的参数</p>
<p>schema：描述传递值</p>
<p>$ref: “#&#x2F;definitions&#x2F;Auth”</p>
<p>$ref: 把model 在definitions里的Auth当作参数放入body中。</p>
<p>responses： 状态码</p>
</blockquote>
<p>model Auth的写法，会放到yaml的最后，内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">definitions:</span></span><br><span class="line">  <span class="attr">Auth:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">usernameOrEmail:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">      <span class="attr">password:</span> </span><br><span class="line">        <span class="attr">type:</span> <span class="string">&quot;string&quot;</span></span><br></pre></td></tr></table></figure>

<p>示例代码，转载于<a href="https://blog.csdn.net/u010466329/article/details/78522992">Swagger编写API文档的YAML中文示例</a>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#必要字段！Swagger规范版本，必须填2.0，否则该YAML将不能用于Swagger其他组件</span></span><br><span class="line"><span class="attr">swagger:</span> <span class="string">&#x27;2.0&#x27;</span></span><br><span class="line"><span class="comment">#必要字段！描述API接口信息的元数据</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="comment">#接口标题</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">swagger说明文档</span>　</span><br><span class="line">  <span class="comment">#接口文档的描述</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">学习Swagger</span></span><br><span class="line">  <span class="comment">#版本号</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment">#Swagger会提供测试用例，host指定测试时的主机名，如果没有指定就是当前主机,可以指定端口．</span></span><br><span class="line"><span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment">#定义的api的前缀，必须已/开头,测试用例的主机则为:host＋bashPath</span></span><br><span class="line"><span class="attr">basePath:</span> <span class="string">/api</span></span><br><span class="line"><span class="comment">#指定调用接口的协议，必须是:&quot;http&quot;, &quot;https&quot;, &quot;ws&quot;, &quot;wss&quot;．默认是http.-表示是个数组元素，即schemes接受一个数组参数</span></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">http</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https</span></span><br><span class="line"><span class="comment">#对应与http协议头request的Accept，调用者可接受类型,默认是*/*,定义的类型必须是http协议定义的 Mime Types,RestfulAPI一般定义成application/json</span></span><br><span class="line"><span class="comment">#这两个是对所有接口的全局设置，在细化的接口中是还可以对应这两个属性来覆盖全局属性</span></span><br><span class="line"><span class="attr">produces:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">application/json</span></span><br><span class="line"><span class="comment">#必要字段!定义可有可操作的API</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/users:</span></span><br><span class="line">   <span class="comment">#必要字段!定义HTTP操作方法，必须是http协议定义的方法</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="comment">#接口概要</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">查询所有用户信息</span></span><br><span class="line">      <span class="comment">#接口描述</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">查询出所有用户的所有信息，用户名，别名</span></span><br><span class="line">      <span class="comment">#标签，方便快速过滤出User相关的接口</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">User</span></span><br><span class="line">      <span class="comment">#返回值描述，必要自动</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="comment">#返回的http状态码</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">所有用户信息或者用户的集合信息</span></span><br><span class="line">          <span class="comment">#描述返回值</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="comment">#返回值格式，可选的有array,integer,string,boolean</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">            <span class="comment">#针对array,每个条目的格式,type定义为array．必要填写items</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">              <span class="comment">#引用在definitions下定义的Users</span></span><br><span class="line">              <span class="string">$ref:</span> <span class="string">&#x27;#/definitions/User&#x27;</span></span><br><span class="line">        <span class="comment">#执行出错的处理</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">操作异常,执行失败.返回信息描述错误详情</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="comment">#值类型</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">            <span class="comment">#定义属性</span></span><br><span class="line">            <span class="attr">properties:</span></span><br><span class="line">            <span class="comment">#属性名</span></span><br><span class="line">              <span class="attr">message:</span></span><br><span class="line">                <span class="comment">#类型</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="comment">#即对于同一个url定义两个不同的方法，表示两个接口</span></span><br><span class="line">    <span class="attr">post:</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">注册一个用户</span></span><br><span class="line">      <span class="comment">#请求参数</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">          <span class="comment">#参数key</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">username</span></span><br><span class="line">          <span class="comment">#传递方法，formData表示表单传输，还有query表示url拼接传输，path表示作为url的一部分</span></span><br><span class="line">          <span class="comment">#body表示http头承载参数(body只能有一个,有body不能在有其他的)</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">formData</span></span><br><span class="line">          <span class="comment">#参数描述</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">用户名，不能使用已经被注册过的</span></span><br><span class="line">          <span class="comment">#参数是否必要，默认false</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment">#参数类型，可选的包括array,integer,boolean,string.使用array必须使用items</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">password</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">formData</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">用户登陆密码，加密传输，加密存储</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">alias</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">formData</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">用户别名</span></span><br><span class="line">          <span class="comment">#非必要字段</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="comment">#返回的http状态码</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">通过返回值来标示执行结果</span>　<span class="string">返回true表示执行成功</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">             <span class="comment">#值类型</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">              <span class="comment">#定义属性</span></span><br><span class="line">              <span class="attr">properties:</span></span><br><span class="line">              <span class="comment">#属性名</span></span><br><span class="line">                <span class="attr">status:</span></span><br><span class="line">                  <span class="comment">#类型</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">                  <span class="comment">#描述</span></span><br><span class="line">                  <span class="attr">description:</span> <span class="string">是否成功</span></span><br><span class="line">        <span class="comment">#执行出错的处理</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">操作异常,执行失败.返回信息描述错误详情</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="comment">#值类型</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">            <span class="comment">#定义属性</span></span><br><span class="line">            <span class="attr">properties:</span></span><br><span class="line">            <span class="comment">#属性名</span></span><br><span class="line">              <span class="attr">message:</span></span><br><span class="line">                <span class="comment">#类型</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">  <span class="string">/users/&#123;id&#125;:</span></span><br><span class="line">    <span class="comment">#&#123;id&#125;表示id为请求参数，例如/users/1,/users/2都是对该API的请求，此时id即为１和2</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">根据用户名id查询该用户的所有信息</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">查询出某个用户的所有信息，用户名，别名等</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">User</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="comment">#上面接口中定义了&#123;id&#125;，则参数列表中必须包含参数id,并且请求类型为path</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">id</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">path</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">要查询的用户的用户名,它是唯一标识</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">所有用户信息或者用户的集合信息</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">              <span class="string">$ref:</span> <span class="string">&#x27;#/definitions/User&#x27;</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">操作异常,执行失败.返回信息描述错误详情</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">              <span class="comment">#值类型</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">              <span class="comment">#定义属性</span></span><br><span class="line">              <span class="attr">properties:</span></span><br><span class="line">              <span class="comment">#属性名</span></span><br><span class="line">                <span class="attr">message:</span></span><br><span class="line">                  <span class="comment">#类型</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="comment">#http定义的delete方法,删除一个资源</span></span><br><span class="line">    <span class="attr">delete:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">删除用户</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">删除某个用户的信息，被删除的用户将无法登陆</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">id</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">path</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">用户的唯一标示符</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">User</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">通过返回值来标示执行结果</span>　<span class="string">返回true表示执行成功</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">             <span class="comment">#值类型</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">              <span class="comment">#定义属性</span></span><br><span class="line">              <span class="attr">properties:</span></span><br><span class="line">              <span class="comment">#属性名</span></span><br><span class="line">                <span class="attr">status:</span></span><br><span class="line">                  <span class="comment">#类型</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">                  <span class="comment">#描述</span></span><br><span class="line">                  <span class="attr">description:</span> <span class="string">是否成功</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">操作异常,执行失败.返回信息描述错误详情</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">              <span class="comment">#值类型</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">              <span class="comment">#定义属性</span></span><br><span class="line">              <span class="attr">properties:</span></span><br><span class="line">              <span class="comment">#属性名</span></span><br><span class="line">                <span class="attr">message:</span></span><br><span class="line">                  <span class="comment">#类型</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">                  <span class="comment">#描述错误信息</span></span><br><span class="line">    <span class="comment">#http定义的patch方法，表示修改一个资源</span></span><br><span class="line">    <span class="attr">patch:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">用户信息修改</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">修改用户信息(用户名别名)</span></span><br><span class="line">      <span class="attr">parameters:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">id</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">path</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">用户名,要修改的数据的唯一标识符</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">alias</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">formData</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">新的用户别名</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">User</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">通过返回值来标示执行结果</span>　<span class="string">返回true表示执行成功</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="comment">#值类型</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">              <span class="comment">#定义属性</span></span><br><span class="line">              <span class="attr">properties:</span></span><br><span class="line">              <span class="comment">#属性名</span></span><br><span class="line">                <span class="attr">status:</span></span><br><span class="line">                  <span class="comment">#类型</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">                  <span class="comment">#描述</span></span><br><span class="line">                  <span class="attr">description:</span> <span class="string">是否成功</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">操作异常,执行失败.返回信息描述错误详情</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">              <span class="comment">#值类型</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">              <span class="comment">#定义属性</span></span><br><span class="line">              <span class="attr">properties:</span></span><br><span class="line">              <span class="comment">#属性名</span></span><br><span class="line">                <span class="attr">message:</span></span><br><span class="line">                  <span class="comment">#类型</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">                  <span class="comment">#描述错误信息</span></span><br><span class="line"><span class="attr">definitions:</span></span><br><span class="line">  <span class="attr">User:</span></span><br><span class="line">    <span class="comment">#值类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="comment">#定义属性</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">    <span class="comment">#属性名</span></span><br><span class="line">      <span class="attr">id:</span></span><br><span class="line">        <span class="comment">#类型</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="comment">#描述</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">用户的唯一id</span></span><br><span class="line">      <span class="attr">username:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">用户名</span></span><br><span class="line">      <span class="attr">alias:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">别名</span></span><br></pre></td></tr></table></figure>

<p>参考文档：<a href="https://blog.csdn.net/qq_43178297/article/details/88848654">用swagger生成api的接口文档（yaml版）</a></p>
<p>查看效果：<a href="http://editor.swagger.io/">swagger.io</a></p>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
      </tags>
  </entry>
  <entry>
    <title>TOML 介绍</title>
    <url>/2024/toml/</url>
    <content><![CDATA[<h2 id="TOML-的简介"><a href="#TOML-的简介" class="headerlink" title="TOML 的简介"></a>TOML 的简介</h2><p><a href="http://toml.io/">TOML</a> (Tom’s Obvious Minimal Language) Tom 的（语义）明显、（配置）最小化的语言。</p>
<p>TOML 旨在成为一个语义明显且易于阅读的最小化配置文件格式。TOML 被设计成可以无歧义地映射为哈希表。TOML 应该能很容易地被解析成各种语言中的数据结构。</p>
<p>备注：Tom 代表 <a href="https://tom.preston-werner.com/">Tom Preston-Werner</a> ，GitHub 的联合创始人之一。</p>
<h2 id="TOML-的特性"><a href="#TOML-的特性" class="headerlink" title="TOML 的特性"></a>TOML 的特性</h2><ul>
<li>TOML 是大小写敏感的</li>
<li>TOML 文件的编码格式是 UTF-8</li>
<li>TOML 文件的扩展名是 <code>.toml</code></li>
<li>TOML 文件的 MIME 类型是 <code>application/toml</code></li>
</ul>
<h2 id="TOML-的例子"><a href="#TOML-的例子" class="headerlink" title="TOML 的例子"></a>TOML 的例子</h2><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is a TOML document</span></span><br><span class="line"></span><br><span class="line"><span class="attr">title</span> = <span class="string">&quot;TOML Example&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[owner]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;Tom Preston-Werner&quot;</span></span><br><span class="line"><span class="attr">dob</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span>T07:<span class="number">32</span>:<span class="number">00</span>-<span class="number">08</span>:<span class="number">00</span></span><br><span class="line"></span><br><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">ports</span> = [ <span class="number">8000</span>, <span class="number">8001</span>, <span class="number">8002</span> ]</span><br><span class="line"><span class="attr">data</span> = [ [<span class="string">&quot;delta&quot;</span>, <span class="string">&quot;phi&quot;</span>], [<span class="number">3.14</span>] ]</span><br><span class="line"><span class="attr">temp_targets</span> = &#123; cpu = <span class="number">79.5</span>, case = <span class="number">72.0</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="section">[servers]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[servers.alpha]</span></span><br><span class="line"><span class="attr">ip</span> = <span class="string">&quot;10.0.0.1&quot;</span></span><br><span class="line"><span class="attr">role</span> = <span class="string">&quot;frontend&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[servers.beta]</span></span><br><span class="line"><span class="attr">ip</span> = <span class="string">&quot;10.0.0.2&quot;</span></span><br><span class="line"><span class="attr">role</span> = <span class="string">&quot;backend&quot;</span></span><br></pre></td></tr></table></figure>

<p>以上 TOML 转换为 JSON 数据结构如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TOML Example&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tom Preston-Werner&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dob&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1979-05-27T07:32:00-08:00&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ports&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="number">8000</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">8001</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">8002</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;delta&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;phi&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">[</span></span><br><span class="line">                <span class="number">3.14</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;temp_targets&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;cpu&quot;</span><span class="punctuation">:</span> <span class="number">79.5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;case&quot;</span><span class="punctuation">:</span> <span class="number">72.0</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;servers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;alpha&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;frontend&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;beta&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;backend&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="TOML-的基本语法"><a href="#TOML-的基本语法" class="headerlink" title="TOML 的基本语法"></a>TOML 的基本语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>TOML 使用 <code>#</code> 符号作为注释的开始，直到行尾的内容都是注释。</p>
<p>除制表符以外的控制字符（U+0000 至 U+0008，U+000A 至 U+001F，U+007F）不允许出现在注释中。</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一个全行注释</span></span><br><span class="line"><span class="attr">key</span> = <span class="string">&quot;value&quot;</span>  <span class="comment"># 这是一个行末注释</span></span><br><span class="line"><span class="attr">another</span> = <span class="string">&quot;# 这不是一个注释&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h3><ul>
<li>TOML 文档最基本的构成区块是键值对。键值对由键名、等号、值组成</li>
<li>键名在等号的左边而值在右边</li>
<li>键名和键值周围的空白会被忽略 (意味着可以进行任意缩进而不影响解析)</li>
<li>键、等号和值必须在同一行（不过有些值可以跨多行）</li>
</ul>
<h2 id="TOML-中的键"><a href="#TOML-中的键" class="headerlink" title="TOML 中的键"></a>TOML 中的键</h2><p>键名可以是裸露的，引号引起来的，或点分隔的。</p>
<ul>
<li>裸露的键名是由 ASCII 字母、数字、下划线和连字符 (<code>a-z</code>&#x2F;<code>A-Z</code>&#x2F;<code>0-9</code>&#x2F;<code>_</code>&#x2F;<code>-</code>) 组成的字符串</li>
<li>注意裸键允许仅由纯 ASCII 数字构成，例如 1234，但总是被解释为字符串。</li>
</ul>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">abc123</span> = <span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="attr">ab_c</span> = <span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="attr">ab-c</span> = <span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="attr">1234</span> = <span class="string">&quot;value&quot;</span></span><br></pre></td></tr></table></figure>

<p>以上 toml 等价于如下 json：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;abc123&quot;</span><span class="punctuation">:</span> <span class="string">&quot;value&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ab_c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;value&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ab-c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;value&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;1234&quot;</span><span class="punctuation">:</span> <span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>引号键遵循与基本字符串或字面量字符串相同的规则并允许你使用更为广泛的键名</li>
<li>除非明显必要，使用裸键方为最佳实践</li>
<li>裸键不能为空，但空引号键是允许的（虽然不建议如此）</li>
</ul>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;abc&quot;</span> = <span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="attr">&quot;王大锤&quot;</span> = <span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="attr">&quot;&quot;</span> = <span class="string">&quot;value&quot;</span> <span class="comment"># 合法但不推荐</span></span><br></pre></td></tr></table></figure>

<ul>
<li>点分隔键是一系列通过点相连的裸键或引号键</li>
<li>这允许了你将相近属性放在一起</li>
</ul>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span> = <span class="string">&quot;Orange&quot;</span></span><br><span class="line"><span class="attr">physical.color</span> = <span class="string">&quot;orange&quot;</span></span><br><span class="line"><span class="attr">physical.shape</span> = <span class="string">&quot;round&quot;</span></span><br><span class="line"><span class="attr">site.&quot;google.com&quot;</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>以上 toml 等价于如下 json：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Orange&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;physical&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;orange&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;shape&quot;</span><span class="punctuation">:</span> <span class="string">&quot;round&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;google.com&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="TOML-中的值"><a href="#TOML-中的值" class="headerlink" title="TOML 中的值"></a>TOML 中的值</h2><p>关于 TOML 中的值的详细介绍请参考 <a href="https://toml.io/cn/v1.0.0">TOML 中文文档</a></p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">str</span> = <span class="string">&quot;I&#x27;m a string. \&quot;You can quote me\&quot;. Name\tJos\u00E9\nLocation\tSF.&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">int1</span> = +<span class="number">99</span></span><br><span class="line"><span class="attr">int2</span> = <span class="number">42</span></span><br><span class="line"><span class="attr">int3</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">int4</span> = -<span class="number">17</span></span><br><span class="line"><span class="attr">int5</span> = <span class="number">1_000</span></span><br></pre></td></tr></table></figure>

<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 小数</span></span><br><span class="line"><span class="attr">flt1</span> = +<span class="number">1.0</span></span><br><span class="line"><span class="attr">flt2</span> = <span class="number">3.1415</span></span><br><span class="line"><span class="attr">flt3</span> = -<span class="number">0.01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指数</span></span><br><span class="line"><span class="attr">flt4</span> = <span class="number">5</span>e+<span class="number">22</span></span><br><span class="line"><span class="attr">flt5</span> = <span class="number">1</span>e06</span><br><span class="line"><span class="attr">flt6</span> = -<span class="number">2</span>E-<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 都有</span></span><br><span class="line"><span class="attr">flt7</span> = <span class="number">6.626</span>e-<span class="number">34</span></span><br></pre></td></tr></table></figure>

<h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bool1</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">bool2</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h3><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 带有时区</span></span><br><span class="line"><span class="attr">odt1</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span>T07:<span class="number">32</span>:<span class="number">00</span>Z</span><br><span class="line"><span class="attr">odt2</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span>T00:<span class="number">32</span>:<span class="number">00</span>-<span class="number">07</span>:<span class="number">00</span></span><br><span class="line"><span class="attr">odt3</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span>T00:<span class="number">32</span>:<span class="number">00.999999</span>-<span class="number">07</span>:<span class="number">00</span></span><br><span class="line"><span class="attr">odt4</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span> <span class="number">07</span>:<span class="number">32</span>:<span class="number">00</span>Z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不带时区</span></span><br><span class="line"><span class="attr">ldt1</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span>T07:<span class="number">32</span>:<span class="number">00</span></span><br><span class="line"><span class="attr">ldt2</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span>T00:<span class="number">32</span>:<span class="number">00.999999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期</span></span><br><span class="line"><span class="attr">ld1</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间</span></span><br><span class="line"><span class="attr">lt1</span> = <span class="number">07</span>:<span class="number">32</span>:<span class="number">00</span></span><br><span class="line"><span class="attr">lt2</span> = <span class="number">00</span>:<span class="number">32</span>:<span class="number">00.999999</span></span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">integers</span> = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line"><span class="attr">colors</span> = [ <span class="string">&quot;红&quot;</span>, <span class="string">&quot;黄&quot;</span>, <span class="string">&quot;绿&quot;</span> ]</span><br><span class="line"><span class="attr">nested_array_of_ints</span> = [ [ <span class="number">1</span>, <span class="number">2</span> ], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] ]</span><br><span class="line"><span class="attr">nested_mixed_array</span> = [ [ <span class="number">1</span>, <span class="number">2</span> ], [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>] ]</span><br><span class="line"><span class="attr">string_array</span> = [ <span class="string">&quot;所有的&quot;</span>, <span class="string">&#x27;字符串&#x27;</span>, <span class="string">&quot;&quot;&quot;是相同的&quot;&quot;&quot;</span>, <span class="string">&#x27;&#x27;&#x27;类型&#x27;&#x27;&#x27;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许混合类型的数组</span></span><br><span class="line"><span class="attr">numbers</span> = [ <span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span> ]</span><br><span class="line"><span class="attr">contributors</span> = [</span><br><span class="line">  <span class="string">&quot;Foo Bar &lt;foo@example.com&gt;&quot;</span>,</span><br><span class="line">  &#123; name = <span class="string">&quot;Baz Qux&quot;</span>, email = <span class="string">&quot;bazqux@example.com&quot;</span>, url = <span class="string">&quot;https://example.com/bazqux&quot;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[fruit]</span></span><br><span class="line"><span class="attr">apple.color</span> = <span class="string">&quot;红&quot;</span></span><br><span class="line"><span class="attr">apple.taste.sweet</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [fruit.apple]  # 非法</span></span><br><span class="line"><span class="comment"># [fruit.apple.taste]  # 非法</span></span><br><span class="line"></span><br><span class="line"><span class="section">[fruit.apple.texture]</span>  <span class="comment"># 你可以添加子表</span></span><br><span class="line"><span class="attr">smooth</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>等价于如下 json：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fruit&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;apple&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;红&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;taste&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;sweet&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;texture&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;smooth&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="内联表"><a href="#内联表" class="headerlink" title="内联表"></a>内联表</h3><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span> = &#123; first = <span class="string">&quot;Tom&quot;</span>, last = <span class="string">&quot;Preston-Werner&quot;</span> &#125;</span><br><span class="line"><span class="attr">point</span> = &#123; x = <span class="number">1</span>, y = <span class="number">2</span> &#125;</span><br><span class="line"><span class="attr">animal</span> = &#123; type.name = <span class="string">&quot;pug&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<p>等价于如下表：</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[name]</span></span><br><span class="line"><span class="attr">first</span> = <span class="string">&quot;Tom&quot;</span></span><br><span class="line"><span class="attr">last</span> = <span class="string">&quot;Preston-Werner&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[point]</span></span><br><span class="line"><span class="attr">x</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">y</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="section">[animal]</span></span><br><span class="line"><span class="attr">type.name</span> = <span class="string">&quot;pug&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="表数组"><a href="#表数组" class="headerlink" title="表数组"></a>表数组</h3><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[[products]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;Hammer&quot;</span></span><br><span class="line"><span class="attr">sku</span> = <span class="number">738594937</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[products]]</span>  <span class="comment"># 数组里的空表</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[products]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;Nail&quot;</span></span><br><span class="line"><span class="attr">sku</span> = <span class="number">284758393</span></span><br><span class="line"></span><br><span class="line"><span class="attr">color</span> = <span class="string">&quot;gray&quot;</span></span><br></pre></td></tr></table></figure>

<p>等价于如下 json：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hammer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sku&quot;</span><span class="punctuation">:</span> <span class="number">738594937</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Nail&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sku&quot;</span><span class="punctuation">:</span> <span class="number">284758393</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gray&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Script</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
        <tag>技术原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu使用手册</title>
    <url>/2020/ubuntu/</url>
    <content><![CDATA[<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="更新软件源"><a href="#更新软件源" class="headerlink" title="更新软件源"></a>更新软件源</h3><p>管理员权限编辑<code>/etc/apt/sources.list</code></p>
<p><a href="https://developer.aliyun.com/mirror/">阿里云的源</a>、<a href="https://mirrors.tuna.tsinghua.edu.cn/help/">清华大学的源</a></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="查看系统版本和内核版本"><a href="#查看系统版本和内核版本" class="headerlink" title="查看系统版本和内核版本"></a>查看系统版本和内核版本</h3><p><code>cat /proc/version</code> - 查看内核版本，gcc版本，发布时间</p>
<p><code>uname -a</code> - 查看内核版本，系统是多少位的，x86_64为64位</p>
<p><code>lsb_release -a</code> - 查看系统的发行版本号和代号</p>
<h3 id="查看CPU、内存和磁盘"><a href="#查看CPU、内存和磁盘" class="headerlink" title="查看CPU、内存和磁盘"></a>查看CPU、内存和磁盘</h3><p><code>cat /proc/cpuinfo</code> - 查看CPU详细信息</p>
<p><code>cat /proc/meminfo</code> - 查看内存信息</p>
<p><code>df</code> - 查看磁盘使用信息</p>
<h3 id="包管理命令"><a href="#包管理命令" class="headerlink" title="包管理命令"></a>包管理命令</h3><p><code>sudo passwd root</code> - 设置root用户密码</p>
<p><code>dpkg --list</code> - 显示所有软件</p>
<p><code>dpkg -i package.deb</code> - 安装deb包命令</p>
<ul>
<li><code>-i</code> - 安装deb包</li>
<li><code>-c</code> - 查看deb包</li>
<li><code>-r</code> - 卸载deb包</li>
<li><code>-P</code> - 彻底删除deb软件</li>
</ul>
<p><code>apt/apt-get install</code> - 安装软件包</p>
<ul>
<li><code>install</code> - 安装软件包</li>
<li><code>remove</code> - 移除软件包</li>
<li><code>purge</code> - 移除软件包及配置文件</li>
<li><code>update</code> - 刷新存储库索引</li>
<li><code>upgrade</code> - 升级所有可升级的软件包</li>
<li><code>autoremove</code> - 自动删除不需要的包</li>
</ul>
<p><code>apt full-upgrade</code>&#x2F;<code>apt-get dist-upgrade</code> - 在升级软件包时自动处理依赖关系</p>
<p><code>apt search</code>&#x2F;<code>apt-cache search</code> - 搜索应用程序</p>
<p><code>apt show</code>&#x2F;<code>apt-cache show</code> - 显示安装细节</p>
<p><code>do-release-upgrade -d</code> - 升级系统到开发版</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="update失败"><a href="#update失败" class="headerlink" title="update失败"></a>update失败</h3><p>此故障常见于WSL2上的Ubuntu，解决办法通常是编辑<code>/etc/resolv.conf</code>文件中将原来的<code>nameserver</code>修改为如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure>

<h3 id="ssh连接无法使用root"><a href="#ssh连接无法使用root" class="headerlink" title="ssh连接无法使用root"></a>ssh连接无法使用root</h3><ol>
<li>修改<code>/etc/ssh/sshd_config</code>文件把<code>PermitRootLogin Prohibit-password</code>添加<code>#</code>注释掉</li>
<li>在该文件中新添加<code>PermitRootLogin yes</code></li>
<li>重启ssh服务<code>/etc/init.d/ssh restart</code></li>
<li>重新使用root连接即可</li>
</ol>
<h3 id="新系统无法搜索到Wi-Fi"><a href="#新系统无法搜索到Wi-Fi" class="headerlink" title="新系统无法搜索到Wi-Fi"></a>新系统无法搜索到Wi-Fi</h3><p>用超级管理员权限编辑文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /etc/NetworkManager/NetworkManager.conf</span><br><span class="line">managed=true</span><br></pre></td></tr></table></figure>

<p>参考文档：<a href="https://www.cnblogs.com/wynter/p/6306774.html">Ubuntu系统搜索不到WiFi，如何解决</a></p>
<h3 id="设置笔记本关闭盖子不做任何操作"><a href="#设置笔记本关闭盖子不做任何操作" class="headerlink" title="设置笔记本关闭盖子不做任何操作"></a>设置笔记本关闭盖子不做任何操作</h3><p>用超级管理员权限编辑文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /etc/systemd/logind.conf</span><br><span class="line">#HandleLidSwitch=suspend</span><br><span class="line"># 改为</span><br><span class="line">HandleLidSwitch=ignore</span><br></pre></td></tr></table></figure>

<p>参考文档：<a href="https://www.cnblogs.com/yunfeiqi/p/6594156.html">Ubuntu 禁用关闭笔记本盖子自动待机</a></p>
<h3 id="安装完Ubuntu后内置软件名称"><a href="#安装完Ubuntu后内置软件名称" class="headerlink" title="安装完Ubuntu后内置软件名称"></a>安装完Ubuntu后内置软件名称</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan libreoffice-common</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日常软件</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA小计</title>
    <url>/2020/vba/</url>
    <content><![CDATA[<h2 id="教程使用环境"><a href="#教程使用环境" class="headerlink" title="教程使用环境"></a>教程使用环境</h2><ul>
<li>Windows10 insider 2004 19041.208</li>
<li>Microsoft office 专业增强版 2019</li>
</ul>
<h2 id="录制宏方法"><a href="#录制宏方法" class="headerlink" title="录制宏方法"></a>录制宏方法</h2><p>在Excel中依次选择<code>视图&gt;宏&gt;录制宏</code>，填入名称和快捷键即可开始录制，会记录下接下来对excel表格的所有操作，对菜单操作不会记录；操作完后，点击<code>视图&gt;宏&gt;结束录制</code>，即可完成录制；可以通过查看录制进入Visual Basic for Application编辑界面</p>
<h2 id="语法解释"><a href="#语法解释" class="headerlink" title="语法解释"></a>语法解释</h2><ul>
<li><code>Dim a as Integer</code> - 定义变量</li>
<li><code>a = 5</code> - 给变量赋值</li>
<li><code>For i=5 to 30...Next</code> - for循环语句</li>
<li><code>If 条件 then ... end if</code> - 条件判断语句</li>
<li><code>selection.offset(x, y)</code> - 在当前选中的单元格基础上横跨y列，纵跨x行选中单元格。直接操作是操作其值。</li>
<li><code>Selection.Row</code> - 获取当前行的行号</li>
<li><code>Selection.Column</code> - 获取当前列的列号</li>
<li><code>sheet1.cells(x, y)</code> - 通过行号和列号直接定位单元格，直接操作是对值进行操作。</li>
</ul>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>以下代码实现了一个从第四行到第十一行对角线循环填充的功能</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> 宏<span class="number">1</span>()</span><br><span class="line"><span class="comment">&#x27;</span></span><br><span class="line"><span class="comment">&#x27; 宏1 宏</span></span><br><span class="line"><span class="comment">&#x27;</span></span><br><span class="line"><span class="comment">&#x27; 快捷键: Ctrl+k</span></span><br><span class="line"><span class="comment">&#x27;</span></span><br><span class="line">    <span class="keyword">Dim</span> r As Integer</span><br><span class="line">    <span class="keyword">Dim</span> c As Integer</span><br><span class="line">    <span class="keyword">Dim</span> value As String</span><br><span class="line">    r = Selection.Row</span><br><span class="line">    c = Selection.Column</span><br><span class="line">    value = Selection.Offset(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">For</span> j = <span class="number">1</span> <span class="keyword">To</span> <span class="number">30</span>    </span><br><span class="line">        r = r + <span class="number">1</span></span><br><span class="line">        <span class="keyword">If</span> r &gt; <span class="number">11</span> <span class="keyword">Then</span></span><br><span class="line">        r = <span class="number">4</span></span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">If</span>    </span><br><span class="line">        Sheet1.Cells(r, j + c) = value</span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<h2 id="全局使用"><a href="#全局使用" class="headerlink" title="全局使用"></a>全局使用</h2><p>创建宏的时候，如果需要全局使用该宏，需要用一下方法操作：</p>
<ol>
<li>创建时选择保存在<code>个人宏工作簿</code></li>
<li>录制下宏操作，选择停止录制。</li>
<li>如果需要编辑VBS代码，需要先选择<code>视图&gt;窗口&gt;取消隐藏</code>，会自动打开一个PERSONAL.XLSB的文件，在该文件中点击<code>查看宏&gt;编辑</code>即可进入VBS编辑界面。</li>
<li>编辑完成后，保存退出宏界面，然后在PERSONAL.XLSB文件中选择<code>视图&gt;窗口&gt;隐藏</code>，该文件就会隐藏。</li>
<li>在初始文件中就可以使用该宏，退出的时候，会弹窗是否保存PERSONAL.XLSB文件，选择保存即可。</li>
</ol>
]]></content>
      <categories>
        <category>Script</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM</title>
    <url>/2020/vim/</url>
    <content><![CDATA[<h2 id="1-汇总操作"><a href="#1-汇总操作" class="headerlink" title="1. 汇总操作"></a>1. 汇总操作</h2><h3 id="退出VIM"><a href="#退出VIM" class="headerlink" title="退出VIM"></a>退出VIM</h3><p>通过命令行模式退出</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>:q</code></td>
<td>退出</td>
<td><code>:q!</code></td>
<td>强制退出，不保存</td>
</tr>
<tr>
<td><code>:wq</code></td>
<td>保存并退出</td>
<td><code>:wq!</code></td>
<td>强制保存并退出</td>
</tr>
<tr>
<td><code>:w &lt;文件路径&gt;</code></td>
<td>另存为</td>
<td><code>:saveas 文件路径</code></td>
<td>另存为</td>
</tr>
<tr>
<td><code>:x</code></td>
<td>保存并退出</td>
<td><code>shift + zz</code></td>
<td>保存并退出</td>
</tr>
</tbody></table>
<h3 id="普通模式进入命令行模式"><a href="#普通模式进入命令行模式" class="headerlink" title="普通模式进入命令行模式"></a>普通模式进入命令行模式</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>i</code></td>
<td>在当前光标处进行编辑</td>
<td><code>I</code></td>
<td>在行首插入</td>
</tr>
<tr>
<td><code>a</code></td>
<td>在光标后插入编辑</td>
<td><code>A</code></td>
<td>在行末插入</td>
</tr>
<tr>
<td><code>o</code></td>
<td>在当前行后插入一个新行</td>
<td><code>O</code></td>
<td>在当前行前插入一个新行</td>
</tr>
</tbody></table>
<h2 id="2-普通模式"><a href="#2-普通模式" class="headerlink" title="2. 普通模式"></a>2. 普通模式</h2><h3 id="移动游标"><a href="#移动游标" class="headerlink" title="移动游标"></a>移动游标</h3><table>
<thead>
<tr>
<th>按键</th>
<th>说明</th>
<th>按键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>h</code></td>
<td>左</td>
<td><code>l</code></td>
<td>右（小写 L）</td>
</tr>
<tr>
<td><code>j</code></td>
<td>下</td>
<td><code>k</code></td>
<td>上</td>
</tr>
<tr>
<td><code>b</code></td>
<td>移动到上一个单词</td>
<td><code>w</code></td>
<td>移动到下一个单词</td>
</tr>
<tr>
<td><code>C-d</code></td>
<td>向下移动半屏(down)</td>
<td><code>C-u</code></td>
<td>向上移动半屏(up)</td>
</tr>
<tr>
<td><code>C-f</code></td>
<td>向下翻页(forward)</td>
<td><code>C-b</code></td>
<td>向上翻页(back)</td>
</tr>
</tbody></table>
<h3 id="删除内容"><a href="#删除内容" class="headerlink" title="删除内容"></a>删除内容</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>x</code></td>
<td>删除游标所在的字符</td>
<td><code>X</code></td>
<td>删除游标所在前一个字符</td>
</tr>
<tr>
<td><code>Delete</code></td>
<td>同<code>x</code></td>
<td><code>dd</code></td>
<td>删除整行</td>
</tr>
<tr>
<td><code>d$</code>或<code>D</code></td>
<td>删除至行尾</td>
<td><code>d^</code></td>
<td>删除至行首</td>
</tr>
<tr>
<td><code>dG</code></td>
<td>删除到文档结尾处</td>
<td><code>d1G</code></td>
<td>删至文档首部</td>
</tr>
<tr>
<td><code>dw</code>或<code>daw</code></td>
<td>删除一个单词（不适用中文）(delete a word)</td>
<td><code>:%d</code></td>
<td>删除所有</td>
</tr>
</tbody></table>
<h3 id="重复命令"><a href="#重复命令" class="headerlink" title="重复命令"></a>重复命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>.</code></td>
<td>重复上一次操作</td>
<td><code>10x</code></td>
<td>删除10个连续字符</td>
</tr>
<tr>
<td><code>3dd</code></td>
<td>删除3行文本</td>
<td><code>dnw</code></td>
<td>删除n个单词</td>
</tr>
</tbody></table>
<h3 id="快速跳转"><a href="#快速跳转" class="headerlink" title="快速跳转"></a>快速跳转</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>gg</code></td>
<td>游标移动到到第一行</td>
<td><code>G</code>(Shift+g)</td>
<td>到最后一行</td>
</tr>
<tr>
<td><code>Ctrl + o</code></td>
<td>回到上次光标所在位置</td>
<td><code>nG</code>(n Shift+g)</td>
<td>游标移动到第 n 行</td>
</tr>
</tbody></table>
<h3 id="行内跳转"><a href="#行内跳转" class="headerlink" title="行内跳转"></a>行内跳转</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>e</code></td>
<td>到当前单词的结尾</td>
<td><code>w</code></td>
<td>到下一个单词的开头</td>
</tr>
<tr>
<td><code>b</code></td>
<td>到前一个单词的开头</td>
<td><code>ge</code></td>
<td>到前一个单词的结尾</td>
</tr>
<tr>
<td><code>0</code>或<code>^</code></td>
<td>到行头</td>
<td><code>$</code></td>
<td>到行尾</td>
</tr>
<tr>
<td><code>f&lt;字母&gt;</code></td>
<td>向后搜索&lt;字母&gt;并跳转到第一个匹配的位置(非常实用)</td>
<td><code>F&lt;字母&gt;</code></td>
<td>向前搜索&lt;字母&gt;并跳转到第一个匹配的位置</td>
</tr>
<tr>
<td><code>t&lt;字母&gt;</code></td>
<td>向后搜索&lt;字母&gt;并跳转到第一个匹配位置之前的一个字母(不常用)</td>
<td><code>T&lt;字母&gt;</code></td>
<td>向前搜索&lt;字母&gt;并跳转到第一个匹配位置之后的一个字母(不常用)</td>
</tr>
</tbody></table>
<h3 id="复制和粘贴"><a href="#复制和粘贴" class="headerlink" title="复制和粘贴"></a>复制和粘贴</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>y</code></td>
<td>复制</td>
<td><code>dd</code></td>
<td>剪切</td>
</tr>
<tr>
<td><code>yy</code></td>
<td>复制整行</td>
<td><code>3yy</code></td>
<td>复制三行</td>
</tr>
<tr>
<td><code>y^</code>或<code>y0</code></td>
<td>复制至行首，不含光标字符</td>
<td><code>y$</code></td>
<td>复制至行未，含光标所在</td>
</tr>
<tr>
<td><code>yw</code></td>
<td>复制一个单词</td>
<td><code>y2w</code></td>
<td>复制两个单词</td>
</tr>
<tr>
<td><code>yG</code></td>
<td>复制至文本末</td>
<td><code>y1G</code></td>
<td>复制至文本开头</td>
</tr>
<tr>
<td><code>p</code>（小写）</td>
<td>粘贴至光标后</td>
<td><code>P</code>（大写）</td>
<td>粘贴至光标前</td>
</tr>
</tbody></table>
<h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>r</code>+&lt;待替换字母&gt;</td>
<td>将游标所在字母替换为指定字母</td>
<td><code>R</code></td>
<td>连续替换，直到按下<code>Esc</code></td>
</tr>
<tr>
<td><code>cc</code></td>
<td>替换整行，即删除游标所在行，并进入插入模式</td>
<td><code>cw</code></td>
<td>替换一个单词，即删除一个单词，并进入插入模式</td>
</tr>
<tr>
<td><code>C</code>(大写)</td>
<td>替换游标以后至行末</td>
<td><code>~</code></td>
<td>反转游标所在字母大小写</td>
</tr>
<tr>
<td><code>u</code>{n}</td>
<td>撤销一次或 n 次操作（undo）</td>
<td><code>U</code>(大写)</td>
<td>撤销当前行的所有修改</td>
</tr>
<tr>
<td><code>Ctrl+r</code></td>
<td>redo，即撤销 undo 的操作</td>
<td><code>:%!sort</code></td>
<td>对内容排序(将一行内容看成一个字符串，然后按字符串大小进行排序)</td>
</tr>
</tbody></table>
<p>命令底行模式替换公式：</p>
<p><code>:起始位置,终止位置s/被替换对象/替换内容/参数</code></p>
<blockquote>
<p>起始位置：默认为1，<code>.</code>代表当前位置</p>
<p>终止位置：默认为<code>$</code>，可以使用具体的行号，<code>+2</code>表示向后两行</p>
<p>参数：<code>g</code> 全局匹配，<code>i</code> 忽略大小写，<code>c</code> 替换时提示，<code>e</code> 忽略错误</p>
<p>示例：<code>:s/foo/bar/g</code> 全局将foo替换为bar，<code>:5,12s/foo/bar/g</code> 替换5到12行，<code>:.,+2s/foo/bar/g</code> 替换当前位置到后两行，<code>:&#39;&lt;,&#39;&gt;s/foo/bar/g</code> 可视模式下替换选中区域</p>
</blockquote>
<h3 id="快速缩进"><a href="#快速缩进" class="headerlink" title="快速缩进"></a>快速缩进</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>&gt;&gt;</code></td>
<td>向右缩进</td>
<td><code>&lt;&lt;</code></td>
<td>向左回退</td>
</tr>
</tbody></table>
<h3 id="快速查找"><a href="#快速查找" class="headerlink" title="快速查找"></a>快速查找</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>/</code></td>
<td>向下查找</td>
<td><code>?</code></td>
<td>向上查找</td>
</tr>
<tr>
<td><code>\*</code></td>
<td>查找游标所在处的单词，向下查找</td>
<td><code>\#</code></td>
<td>查找游标所在处的单词，向上查找</td>
</tr>
<tr>
<td><code>g\*</code></td>
<td>查找游标所在处的单词，向下查找，部分符合即可</td>
<td><code>g\#</code></td>
<td>查找游标所在处的单词，向上查找，部分符合即可</td>
</tr>
</tbody></table>
<p>备注：n为向下找，N为向上找，查找内容支持正则表达式，但是表示次数的符号前需要使用<code>\</code>，如<code>:/\d\&#123;2,3&#125;</code>，<code>:/a\+</code></p>
<h2 id="3-命令行模式"><a href="#3-命令行模式" class="headerlink" title="3. 命令行模式"></a>3. 命令行模式</h2><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>:ce</code></td>
<td>（center）文本居中</td>
</tr>
<tr>
<td><code>:ri</code></td>
<td>（right）文本有对齐</td>
</tr>
<tr>
<td><code>:le</code></td>
<td>（left）文本左对齐</td>
</tr>
<tr>
<td><code>:noh</code></td>
<td>退出搜索</td>
</tr>
<tr>
<td><code>:set hls</code></td>
<td>设置搜索高亮</td>
</tr>
<tr>
<td><code>:set shiftwidth=n</code></td>
<td>设置缩进和回退字符数</td>
</tr>
<tr>
<td><code>:set nu</code></td>
<td>显示行号</td>
</tr>
<tr>
<td><code>:set autoindent(ai)</code></td>
<td>设置自动缩进</td>
</tr>
<tr>
<td><code>:set autowrite(aw)</code></td>
<td>设置自动存档</td>
</tr>
<tr>
<td><code>:set background=dark/light</code></td>
<td>设置背景风格</td>
</tr>
<tr>
<td><code>:set backup(bk)</code></td>
<td>设置自动备份</td>
</tr>
<tr>
<td><code>:set cindent(cin)</code></td>
<td>设置C语言风格缩进</td>
</tr>
<tr>
<td><code>:set</code>或<code>:se</code></td>
<td>显示所有修改过的配置</td>
</tr>
<tr>
<td><code>:set all</code></td>
<td>显示所有设定值</td>
</tr>
<tr>
<td><code>:set &lt;option&gt;?</code></td>
<td>显示option的设定值</td>
</tr>
<tr>
<td><code>:set nooption</code></td>
<td>取消当前设定值</td>
</tr>
<tr>
<td><code>:syntax on</code></td>
<td>设置语法高亮</td>
</tr>
<tr>
<td><code>:set tabstop=4</code>或<code>:set ts=4</code></td>
<td>设置tab键对应的空格数</td>
</tr>
<tr>
<td><code>:set expandtab</code></td>
<td>设置tab自动替换为空格</td>
</tr>
<tr>
<td><code>:set nohls</code>或<code>:nohlsearch</code></td>
<td>设置不高亮选中单词</td>
</tr>
<tr>
<td><code>:set clipboard+=unnamed</code></td>
<td>设置与当前设备共享剪贴板</td>
</tr>
<tr>
<td><code>:set cul</code>&#x2F;<code>:set cuc</code></td>
<td>设置高亮行&#x2F;列</td>
</tr>
<tr>
<td><code>imap &lt;F4&gt; if __name__ == &#39;__main__&#39;:</code></td>
<td>设置快捷键映射</td>
</tr>
<tr>
<td><code>inoremap _main if __name__ == &#39;__main__&#39;:</code></td>
<td>设置不递归调用映射</td>
</tr>
<tr>
<td><code>:set pastetoggle</code></td>
<td>粘贴切换（粘贴中自动缩进的问题）</td>
</tr>
<tr>
<td><code>:set ruler</code></td>
<td>设置显示光标位置</td>
</tr>
</tbody></table>
<h2 id="4-高级功能"><a href="#4-高级功能" class="headerlink" title="4. 高级功能"></a>4. 高级功能</h2><h3 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>vim 1.txt 2.txt</code></td>
<td>同时打开多个文件</td>
</tr>
<tr>
<td><code>vim -d 1.txt 2.txt</code></td>
<td>比较多个文件</td>
</tr>
<tr>
<td><code>:n</code>&#x2F;<code>:N</code></td>
<td>切换到下&#x2F;上一个文件</td>
</tr>
<tr>
<td><code>:n!</code>&#x2F;<code>:N!</code></td>
<td>强制切换到下&#x2F;上一个文件，之前的文件输入不保存</td>
</tr>
<tr>
<td><code>:e 3.txt</code></td>
<td>再打开一个文件</td>
</tr>
<tr>
<td><code>:e#</code></td>
<td>回到前一个文件</td>
</tr>
<tr>
<td><code>:ls</code></td>
<td>列出以前编辑过的文档</td>
</tr>
<tr>
<td><code>:b 2.txt</code>或编号</td>
<td>直接跳转到该文件进行编辑</td>
</tr>
<tr>
<td><code>:bd 2.txt</code>或编号</td>
<td>删除以前编辑过的列表中的文件项目</td>
</tr>
<tr>
<td><code>e! 4.txt</code></td>
<td>新打开文件，并放弃正在编辑的内容</td>
</tr>
<tr>
<td><code>:f</code></td>
<td>显示正在编辑的文件名</td>
</tr>
<tr>
<td><code>f new.txt</code></td>
<td>给正在编辑的文件重命名</td>
</tr>
<tr>
<td><code>vim -r</code> <code>:ewcover 1.txt</code></td>
<td>因断电等原因没有保存的文件恢复方式</td>
</tr>
</tbody></table>
<h3 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>v</code></td>
<td>进入可视模式，光标走过位置被选中，再次按<code>v</code>取消</td>
</tr>
<tr>
<td><code>Shift+v</code></td>
<td>进入可视模式，按行进行选中，再次按<code>Shift+v</code>取消</td>
</tr>
<tr>
<td><code>Ctrl+v</code></td>
<td>进入可视模式，按矩形区域进行选中，再次按<code>Ctrl+v</code>取消</td>
</tr>
<tr>
<td><code>d</code></td>
<td>可视模式下删除选区内容</td>
</tr>
<tr>
<td><code>y</code></td>
<td>可视模式下复制选取内容</td>
</tr>
</tbody></table>
<h3 id="视窗操作"><a href="#视窗操作" class="headerlink" title="视窗操作"></a>视窗操作</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>:new</code></td>
<td>打开一个新的水平视窗</td>
</tr>
<tr>
<td><code>vsp 2.txt</code></td>
<td>打开新的垂直分屏视窗来编辑 1.txt</td>
</tr>
<tr>
<td><code>:sp 1.txt</code></td>
<td>打开新的水平分屏视窗来编辑 1.txt</td>
</tr>
<tr>
<td><code>Ctrl+w s</code></td>
<td>将当前窗口分割成两个水平的窗口</td>
</tr>
<tr>
<td><code>Ctrl+w v</code></td>
<td>将当前窗口分割成两个垂直的窗口</td>
</tr>
<tr>
<td><code>Ctrl+w q</code></td>
<td>即 :q 结束分割出来的视窗。如果在新视窗中有输入需要使用强制符！即:q!</td>
</tr>
<tr>
<td><code>Ctrl+w o</code></td>
<td>打开一个视窗并隐藏之前的所有视窗</td>
</tr>
<tr>
<td><code>Ctrl+w j</code></td>
<td>移至下面视窗</td>
</tr>
<tr>
<td><code>Ctrl+w k</code></td>
<td>移至上面视窗</td>
</tr>
<tr>
<td><code>Ctrl+w h</code></td>
<td>移至左边视窗</td>
</tr>
<tr>
<td><code>Ctrl+w l</code></td>
<td>移至右边视窗</td>
</tr>
<tr>
<td><code>Ctrl+w J</code></td>
<td>将当前视窗移至下面</td>
</tr>
<tr>
<td><code>Ctrl+w K</code></td>
<td>将当前视窗移至上面</td>
</tr>
<tr>
<td><code>Ctrl+w H</code></td>
<td>将当前视窗移至左边</td>
</tr>
<tr>
<td><code>Ctrl+w L</code></td>
<td>将当前视窗移至右边</td>
</tr>
<tr>
<td><code>Ctrl+w -</code></td>
<td>减小视窗的高度</td>
</tr>
<tr>
<td><code>Ctrl+w +</code></td>
<td>增加视窗的高度</td>
</tr>
</tbody></table>
<h3 id="给文件加密"><a href="#给文件加密" class="headerlink" title="给文件加密"></a>给文件加密</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>vim -x 文件名</code></td>
<td>输入您的密码，确认密码。下次打开就会要求输入密码</td>
</tr>
</tbody></table>
<h3 id="执行外部命令"><a href="#执行外部命令" class="headerlink" title="执行外部命令"></a>执行外部命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>:!ls</code></td>
<td>显示当前目录的内容</td>
</tr>
<tr>
<td><code>:!rm FILENSME</code></td>
<td>删除名为FILENAME的文件</td>
</tr>
<tr>
<td><code>w FILENAME</code></td>
<td>将当前正在编辑的文件另存为FILENAME的文件</td>
</tr>
</tbody></table>
<h3 id="帮助系统"><a href="#帮助系统" class="headerlink" title="帮助系统"></a>帮助系统</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>F1</code></td>
<td>普通模式打开vim预设的帮助文档</td>
</tr>
<tr>
<td><code>:h shiftwidth</code></td>
<td>打开名为shiftwidth的帮助文件</td>
</tr>
<tr>
<td><code>:ver</code>或<code>:version</code></td>
<td>显示版本号及参数</td>
</tr>
</tbody></table>
<h3 id="录制宏"><a href="#录制宏" class="headerlink" title="录制宏"></a>录制宏</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>q+任意字母</code></td>
<td>开始录制宏，再次按q取消录制</td>
</tr>
<tr>
<td><code>@+录制前输入的字母</code></td>
<td>播放宏</td>
</tr>
</tbody></table>
<h2 id="5-操作实例"><a href="#5-操作实例" class="headerlink" title="5. 操作实例"></a>5. 操作实例</h2><h3 id="录制宏步骤"><a href="#录制宏步骤" class="headerlink" title="录制宏步骤"></a>录制宏步骤</h3><p>步骤：</p>
<ol>
<li>在底行模式下输入<code>qa</code>后敲回车。其中a表示该宏的名称，可以自定义其他名称</li>
<li>接下来进行vim的操作，该操作会被完整的录制下来。</li>
<li>做完操作后回到底行模式按<code>q</code>结束录制。</li>
<li>如果需要播放就使用<code>@a</code>，a表示录制之前给宏取的名字。</li>
</ol>
<p>实际使用示例：</p>
<p>在安装ArchLinux的时候，有一步需要将所有中国的镜像源提取到最前面去，但是所有中国的镜像源又分布在文件不同的位置，此时就可以使用VIM的宏来进行操作</p>
<ol>
<li>在normal模式下按<code>qa</code>，然后敲回车</li>
<li>然后输入<code>/China</code>从当前行向下查找China字符</li>
<li>在找到的地方使用<code>2dd</code>剪切两行，<code>4gg</code>跳到第四行，<code>p</code>进行粘贴</li>
<li>按<code>q</code>结束录制</li>
<li>再输入<code>@a</code>就会重复2、3步骤</li>
</ol>
<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>注释：</p>
<ol>
<li><code>ctrl+v</code> - 进入可视化块模式</li>
<li>上下移动光标选中需要注释的代码</li>
<li><code>I</code>(大i) - 进入插入模式</li>
<li>输入注释符号</li>
<li>按<code>ese</code>键完成</li>
</ol>
<p>取消注释：</p>
<ol>
<li><code>ctrl+v</code> - 进入可视化块模式</li>
<li>上下移动光标选中需要注释的代码</li>
<li>按小<code>d</code>即可取消注释</li>
</ol>
]]></content>
      <categories>
        <category>技术工具</category>
      </categories>
      <tags>
        <tag>操作使用</tag>
        <tag>MacOS</tag>
        <tag>Windows</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Viper</title>
    <url>/2023/viper/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://github.com/spf13/viper"><code>Viper</code></a> 是一个 Go 应用的完整配置解决方案，包括<a href="https://12factor.net/#the_twelve_factors">微服务的12要素</a>，主要支持一下特性</p>
<ul>
<li>默认值设置</li>
<li>Golang的配置管理库</li>
<li>支持从JSON, TOML, YAML, HCL, envfile , Java 配置文件读取</li>
<li>实时监视和重新读取配置文件</li>
<li>读取环境变量配置</li>
<li>从远处配置系统(etcd or Consul)中读取</li>
<li>从命令行标志读取</li>
<li>从缓冲区读取</li>
<li>显示设置配置</li>
</ul>
<p><code>viper</code>读取配置文件的优先级顺序：</p>
<ul>
<li><code>viper.Set()</code> 所设置的值</li>
<li>命令行 <code>flag</code></li>
<li>环境变量</li>
<li>配置文件</li>
<li>配置中心<code>etcd/consul</code></li>
<li>默认值</li>
</ul>
<blockquote>
<p>注意：<code>viper</code>的配置键是不区分大小写的。</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>go get -u https://github.com/spf13/viper</code></p>
<h2 id="从配置文件读取值"><a href="#从配置文件读取值" class="headerlink" title="从配置文件读取值"></a><strong><strong>从配置文件读取值</strong></strong></h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.SetConfigName(<span class="string">&quot;production&quot;</span>) <span class="comment">// 设置配置文件名</span></span><br><span class="line">viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)       <span class="comment">// 设置配置文件类型</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;./config&quot;</span>)   <span class="comment">// 设置配置文件路径，可以重复该语法设置多个路径</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;.&quot;</span>)          <span class="comment">// 在当前工作目录寻找配置文件</span></span><br><span class="line">err := viper.ReadInConfig()       <span class="comment">// 查找并读取配置文件</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; </span><br><span class="line">	<span class="built_in">panic</span>(fmt.Errorf(<span class="string">&quot;Fatal error config file: %w \n&quot;</span>, err))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;datastore.metric.host&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;host&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        <span class="string">&quot;port&quot;</span>: [</span><br><span class="line">				    <span class="number">5799</span>,</span><br><span class="line">				    <span class="number">6029</span></span><br><span class="line">				]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;datastore&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;metric&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;host&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;port&quot;</span>: <span class="number">3099</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;warehouse&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;host&quot;</span>: <span class="string">&quot;198.0.0.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;port&quot;</span>: <span class="number">2112</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">viper.GetString(<span class="string">&quot;datastore.warehouse.host&quot;</span>) <span class="comment">// (returns &quot;198.0.0.1&quot;)</span></span><br><span class="line">viper.GetInt(<span class="string">&quot;host.ports.1&quot;</span>) <span class="comment">// returns 6029</span></span><br><span class="line">viper.GetString(<span class="string">&quot;datastore.metric.host&quot;</span>) <span class="comment">// 存在值为路径的键将被优先返回returns &quot;0.0.0.0&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="设置默认值"><a href="#设置默认值" class="headerlink" title="设置默认值"></a>设置默认值</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.SetDefault(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;stolen&quot;</span>)</span><br><span class="line">viper.SetDefault(<span class="string">&quot;city&quot;</span>, <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;country&quot;</span>: <span class="string">&quot;China&quot;</span>, <span class="string">&quot;Province&quot;</span>: <span class="string">&quot;Chengdu&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="写到配置文件"><a href="#写到配置文件" class="headerlink" title="写到配置文件"></a>写到配置文件</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.WriteConfig()     <span class="comment">// 将配置写入到 AddConfigPath 和 SetConfigName 配置的文件中，会覆盖已存在的文件</span></span><br><span class="line">viper.SafeWriteConfig() <span class="comment">// 与 WriteConfig 区别是不会覆盖当前已经存在的文件</span></span><br><span class="line">viper.WriteConfigAs(<span class="string">&quot;/path/to/my/.config&quot;</span>)      <span class="comment">// 覆盖写入制定的文件</span></span><br><span class="line">viper.SafeWriteConfigAs(<span class="string">&quot;/path/to/my/.config&quot;</span>)  <span class="comment">// 不会覆盖的写入制定的文件</span></span><br></pre></td></tr></table></figure>

<h2 id="监测并热加载配置文件"><a href="#监测并热加载配置文件" class="headerlink" title="监测并热加载配置文件"></a>监测并热加载配置文件</h2><p><code>viper</code> 支持应用程序在运行中实时读取配置文件的能力。确保在调用 <code>WatchConfig()</code> 之前添加所有的<code>configPaths</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(e fsnotify.Event)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Config file changed:&quot;</span>, e.Name)</span><br><span class="line">&#125;)</span><br><span class="line">viper.WatchConfig()</span><br></pre></td></tr></table></figure>

<h2 id="从-io-Reader-读取配置"><a href="#从-io-Reader-读取配置" class="headerlink" title="从 io.Reader 读取配置"></a>从 io.Reader 读取配置</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>) <span class="comment">// or viper.SetConfigType(&quot;YAML&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// any approach to require this configuration into your program.</span></span><br><span class="line"><span class="keyword">var</span> yamlExample = []<span class="type">byte</span>(<span class="string">`</span></span><br><span class="line"><span class="string">Hacker: true</span></span><br><span class="line"><span class="string">name: steve</span></span><br><span class="line"><span class="string">hobbies:</span></span><br><span class="line"><span class="string">- skateboarding</span></span><br><span class="line"><span class="string">- snowboarding</span></span><br><span class="line"><span class="string">- go</span></span><br><span class="line"><span class="string">clothing:</span></span><br><span class="line"><span class="string">  jacket: leather</span></span><br><span class="line"><span class="string">  trousers: denim</span></span><br><span class="line"><span class="string">age: 35</span></span><br><span class="line"><span class="string">eyes : brown</span></span><br><span class="line"><span class="string">beard: true</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line"></span><br><span class="line">viper.ReadConfig(bytes.NewBuffer(yamlExample))</span><br><span class="line"></span><br><span class="line">viper.Get(<span class="string">&quot;name&quot;</span>) <span class="comment">// this would be &quot;steve&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="设置字段值"><a href="#设置字段值" class="headerlink" title="设置字段值"></a>设置字段值</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.Set(<span class="string">&quot;Verbose&quot;</span>, <span class="literal">true</span>) <span class="comment">// 如果配置中已经存在该键，将会覆盖以存在键的值</span></span><br><span class="line">viper.Set(<span class="string">&quot;LogFile&quot;</span>, LogFile)</span><br><span class="line"></span><br><span class="line">viper.RegisterAlias(<span class="string">&quot;aliasString&quot;</span>, <span class="string">&quot;keyString&quot;</span>) <span class="comment">// 给键设置一个别名</span></span><br><span class="line"></span><br><span class="line">viper.Set(<span class="string">&quot;aliasString&quot;</span>, <span class="literal">true</span>) <span class="comment">// 实际操作的是 keyString 这个键</span></span><br><span class="line">viper.Set(<span class="string">&quot;keyString&quot;</span>, <span class="literal">true</span>)   <span class="comment">// 实际操作的是 keyString 这个键</span></span><br><span class="line"></span><br><span class="line">viper.GetBool(<span class="string">&quot;aliasString&quot;</span>) <span class="comment">// true</span></span><br><span class="line">viper.GetBool(<span class="string">&quot;aliasString&quot;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="读配置字段"><a href="#读配置字段" class="headerlink" title="读配置字段"></a>读配置字段</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Get(key <span class="type">string</span>) <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">GetBool(key <span class="type">string</span>) <span class="type">bool</span></span><br><span class="line">GetFloat64(key <span class="type">string</span>) <span class="type">float64</span></span><br><span class="line">GetInt(key <span class="type">string</span>) <span class="type">int</span></span><br><span class="line">GetIntSlice(key <span class="type">string</span>) []<span class="type">int</span></span><br><span class="line">GetString(key <span class="type">string</span>) <span class="type">string</span></span><br><span class="line">GetStringMap(key <span class="type">string</span>) <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">GetStringMapString(key <span class="type">string</span>) <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line">GetStringSlice(key <span class="type">string</span>) []<span class="type">string</span></span><br><span class="line">GetTime(key <span class="type">string</span>) time.Time</span><br><span class="line">GetDuration(key <span class="type">string</span>) time.Duration</span><br><span class="line">IsSet(key <span class="type">string</span>) <span class="type">bool</span></span><br><span class="line">AllSettings() <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有找到，每个 <code>Get</code>函数将返回一个 <code>0</code> 值。为了检查一个给定的键是否存在，已经提供了 <code>IsSet()</code> 方法来检查键是否被设置了。</p>
<h2 id="vipers"><a href="#vipers" class="headerlink" title="vipers"></a>vipers</h2><p>viper 是一个不需要配置或初始化就可以开箱即用的工具，因为大部分应用都使用单一的配置中心来管理配置，类似单例。</p>
<p>但如果用户需要使用多个配置中心，可以进行实例化创建不同的 viper，每个 viper 可以读取不同的配置文件，设置不同的参数，像下面代码这样</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x := viper.New()</span><br><span class="line">y := viper.New()</span><br><span class="line"></span><br><span class="line">x.SetDefault(<span class="string">&quot;ContentDir&quot;</span>, <span class="string">&quot;content&quot;</span>)</span><br><span class="line">y.SetDefault(<span class="string">&quot;ContentDir&quot;</span>, <span class="string">&quot;foobar&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>三方库</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualBox Headless后台运行Linux</title>
    <url>/2020/virtualbox_headless/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如何在Windows上优雅的使用Linux，一直是一个困惑我的问题。WSL虽好，但是没法在Linux上安装docker；WSL2虽然可以安装docker了，但是这个系统和主机通信又是一个大麻烦，就连最基本的安装软件都要每次开机修改hostname（虽然有能修改后不复原的办法，但我没实验成功）；使用虚拟机软件，又会占用太多的硬件资源，影响主机性能。前段时间偶然看到B站一个Up主提到使用virtualbox的headless无界面启动。遂研究了一下，但是网络上的资料大都太散太少，没有完整的介绍该方法。本文详细介绍在Windows上安装使用一个最优雅的Linux系统。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>虚拟机软件：<a href="https://www.virtualbox.org/">Oracle VM VirtualBox</a></p>
<p>Linux镜像：本文使用 <a href="https://ubuntu.com/">Ubuntu20.04</a></p>
<p>一个远程连接软件：可以使用Windows自带的powershell或者其他软件，本文使用<a href="/2020/04/21/Windows%E8%BD%AF%E4%BB%B6%E6%89%8B%E5%86%8C/#Termius">Termius</a></p>
<h2 id="前提步骤"><a href="#前提步骤" class="headerlink" title="前提步骤"></a>前提步骤</h2><p>首先需要使用VirtualBox安装好虚拟机；创建虚拟机的时候，推荐使用一个较为简单的名字作为虚拟机的名字，后面命令要使用；安装前的设置注意一点，设置密码的时候需要选择不使用密码登陆。如果该处没设置，安装好后进入设置用户中关闭该项，原因是如果打开该项，后台无法完全启动系统，最终系统会停留在用户登陆界面。</p>
<h2 id="后台启动方法"><a href="#后台启动方法" class="headerlink" title="后台启动方法"></a>后台启动方法</h2><ol>
<li>首先进入图形化的Linux虚拟机中，更新源，使用<code>sudo apt install openssh-server</code>安装ssh的服务端。</li>
<li>检查开机是否需要密码。需要取消掉开机的密码。</li>
<li>关闭虚拟机，主机使用命令行进入VirutalBox的安装位置，默认情况在<code>C:\Program Files\Oracle\VirtualBox\</code>下，此处推荐使用cmd进入该位置，cmd可以直接调用文件名字作为命令，Powershell需要使用路径加文件名才能执行命令</li>
<li>执行<code>vboxheadless --startvm|-s 虚拟机名称|uuid vrde=off</code>即可以桥接网络的模式无界面打开</li>
<li>执行<code>vboxmanage controlvm 虚拟机名称 acpipowerbutton</code>即可关闭虚拟机</li>
</ol>
<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><p><code>VBoxManage list vms</code> - 查看有哪些虚拟机</p>
<p><code>VBoxManage list vms --long</code> - 查看虚拟机的详细内容</p>
<p><code>VBoxManage list runningvms</code> - 查看运行中的虚拟机</p>
<p><code>VBoxManage startvm &lt;vm_name&gt; -type headless</code> - 无界面运行虚拟机，与vboxheadless的区别就是这个命令是完全后台运行。<strong>注意</strong>：使用该命令需要将虚拟机手动设置为桥接网络。</p>
<p><code>vboxheadless --startvm|-s 虚拟机名称|uuid vrde=off</code> - 无界面运行虚拟机，在命令行卡住，停止命令行就停止了虚拟机</p>
<p><code>VBoxManage controlvm &lt;vm_name&gt; acpipowerbutton</code> - 正常关闭虚拟机</p>
<p><code>VBoxManage controlvm &lt;vm_name&gt; poweroff</code> - 强制关闭虚拟机</p>
<p><code>VBoxManage guestproperty enumerate &lt;vm_name&gt;</code> - 查看虚拟机配置信息，可以通过<code>| findstr IP</code> 查询到虚拟机的ip</p>
<h2 id="参考批处理脚本"><a href="#参考批处理脚本" class="headerlink" title="参考批处理脚本"></a>参考批处理脚本</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cd</span> /d C:\Program Files\Oracle\VirtualBox\</span><br><span class="line">@<span class="built_in">chcp</span> <span class="number">65001</span></span><br><span class="line">:<span class="number">1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="number">1</span>：开机</span><br><span class="line"><span class="built_in">echo</span> <span class="number">2</span>：关机</span><br><span class="line"><span class="built_in">echo</span> <span class="number">3</span>：查看ip</span><br><span class="line"><span class="built_in">echo</span> <span class="number">4</span>：查看状态</span><br><span class="line"><span class="built_in">echo</span> <span class="number">5</span>: 退出</span><br><span class="line"><span class="built_in">set</span> /P a=输入：</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%a%</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%a%</span> == <span class="number">1</span> (</span><br><span class="line">    vboxmanage startvm Ubuntu -<span class="built_in">type</span> headless</span><br><span class="line">) <span class="keyword">else</span> <span class="keyword">if</span> <span class="variable">%a%</span> == <span class="number">2</span> (</span><br><span class="line">    vboxmanage controlvm Ubuntu acpipowerbutton</span><br><span class="line">) <span class="keyword">else</span> <span class="keyword">if</span> <span class="variable">%a%</span> == <span class="number">3</span> (</span><br><span class="line">    vboxmanage guestproperty enumerate Ubuntu | <span class="built_in">findstr</span> IP</span><br><span class="line">) <span class="keyword">else</span> <span class="keyword">if</span> <span class="variable">%a%</span> == <span class="number">4</span> (</span><br><span class="line">    vboxmanage list runningvms</span><br><span class="line">) <span class="keyword">else</span> <span class="keyword">if</span> <span class="variable">%a%</span> == <span class="number">5</span> (</span><br><span class="line">    <span class="keyword">exit</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">goto</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/ACBC12345/article/details/103115433">Virtualbox后台启动及获取虚拟机ip方法及windows远程登录方法</a></p>
]]></content>
      <categories>
        <category>日常软件</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
        <tag>Windows</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode的使用</title>
    <url>/2020/vscode/</url>
    <content><![CDATA[<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>settings.json（首选项，打开设置）的配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.rulers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="number">100</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.renderControlCharacters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.renderWhitespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.cursorBlinking&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.cursorStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;line&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workbench.tree.indent&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;emmet.extensionsPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.linting.flake8Enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.formatting.provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yapf&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.linting.flake8Args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;--max-line-length=256&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;--extend-ignore=F821&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.linting.pylintEnabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.minimap.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>editor.wordWrpa</code> - 代码自动换行</li>
<li><code>editor.rulers</code> - 设置一个代码单行最长提示线</li>
<li><code>editor.renderControlCharacters</code> - 是否显示控制字符(如tab)</li>
<li><code>editor.renderWhitespace</code> - 什么情况下显示空格(可设置为all)</li>
<li><code>terminal.integrated.cursorBlinking</code> - 集成终端光标是否闪烁</li>
<li><code>terminal.integrated.cursorStyle</code> - 集成终端光标样式</li>
<li><code>terminal.integrated.fontSize</code> - 集成终端字体大小</li>
<li><code>python.linting.flake8Enabled</code> - 设置flake8工具是否开启</li>
<li><code>python.formatting.provider</code> - 设置python的格式化工具</li>
<li><code>python.linting.flake8Args</code> - 设置flake8的检查规则<ul>
<li><code>--max-line-length</code> - 设置单行的最长长度</li>
<li><code>--extend-ignore</code> - 设置排除的检查</li>
</ul>
</li>
<li><code>python.linting.pylintEnable</code> - 设置pylint是否开启</li>
<li><code>editor.occurrencesHighlight</code> - 设置光标所在单词是否高亮</li>
<li><code>workbench.editor.enablePreview</code> - 是否允许查找文件后保持预览</li>
<li><code>Editor.Links</code> - 控制编辑器中是否检测链接并使其可被点击</li>
</ul>
<p>~&#x2F;.ssh&#x2F;config的配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host 192.168.0.153</span><br><span class="line">  HostName 192.168.0.153</span><br><span class="line">  User root</span><br><span class="line">  ForwardAgent yes</span><br></pre></td></tr></table></figure>

<blockquote>
<p>分别指定远程连接的地址和用户名</p>
</blockquote>
<h2 id="快捷键使用"><a href="#快捷键使用" class="headerlink" title="快捷键使用"></a>快捷键使用</h2><blockquote>
<p>在Mac下ctrl均使用command替代</p>
</blockquote>
<h3 id="软件操作"><a href="#软件操作" class="headerlink" title="软件操作"></a>软件操作</h3><ul>
<li><code>ctrl + shift + p</code> &#x2F;<code>f1</code> - 打开命令面板</li>
<li><code>ctrl + p</code> - 文件搜索框<ul>
<li><code>?</code> - 列出当前可执行的动作</li>
<li><code>!</code>&#x2F;<code>Ctrl+Shift+M</code> - 显示Errors或Warnings</li>
<li><code>:</code>&#x2F;<code>Ctrl+G</code> - 跳转到行数</li>
<li><code>@</code>&#x2F;<code>Ctrl+Shift+O</code> - 跳转到symbol，查找属性或函数</li>
<li><code>#</code>&#x2F;<code>Ctrl+T</code> - 根据名字查找symbol</li>
</ul>
</li>
</ul>
<h3 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h3><ul>
<li><code>Ctrl+N/W</code> - 新建&#x2F;关闭tab页</li>
<li><code>Ctrl+Shift+N/W</code> - 打开&#x2F;关闭一个新的VSCode编辑器</li>
<li><code>Ctrl+Tab</code> - 切换窗口</li>
<li><code>Ctrl+\</code> - 向右拆分屏幕，最多三个</li>
<li><code>Ctrl+1/2/3</code> - 切换拆分后的编辑器窗口</li>
<li><code>Ctrl + O</code> - 打开文件</li>
</ul>
<h3 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h3><ul>
<li><code>Ctrl+[/]</code> - 代码行向左或者向右缩进</li>
<li><code>Ctrl+C/X</code> - 复制&#x2F;剪切当前行&#x2F;选中内容</li>
<li><code>Shift+Alt+F</code> - 代码格式化</li>
<li><code>Alt+Up/Down</code> - 将当前代码向上或向下移动一行</li>
<li><code>Shift+Alt+Up/Down</code> - 将代码向上&#x2F;向下复制一行</li>
<li><code>Ctrl+Enter</code> - 在当前行下方插入一行</li>
<li><code>Ctrl+Shift+Enter</code> - 在当前行上方插入一行</li>
<li><code>Ctrl + D</code> - 选中光标所在词组</li>
</ul>
<h3 id="左侧工具栏"><a href="#左侧工具栏" class="headerlink" title="左侧工具栏"></a>左侧工具栏</h3><ul>
<li><code>ctrl + b</code> - 展开&#x2F;收起侧边栏</li>
<li><code>ctrl + shift + f</code> - 搜索</li>
<li><code>ctrl + shift + e</code> - 资源管理器<ul>
<li><code>⬆️</code>&#x2F; <code>⬇️</code> - 移动光标</li>
<li><code>⬅️</code> - 收起文件夹</li>
<li><code>➡️</code> - 展开文件夹</li>
<li><code>空格</code> - 打开文件</li>
</ul>
</li>
<li><code>ctrl + shift + g</code> - 源代码管理</li>
<li><code>ctrl + shift + x</code> - 插件管理</li>
</ul>
<h2 id="插件及功能"><a href="#插件及功能" class="headerlink" title="插件及功能"></a>插件及功能</h2><ul>
<li><strong>Chinese Language</strong>: VSCode中文插件，国产程序员开发必备插件</li>
<li><strong>TabNine</strong>: 智能输入插件，根据输入历史和场景，自动预测输入内容</li>
<li><strong>Git History</strong>: 查看git历史记录的插件，安装后打开文件在标签页右键，会看到最下面多了一个<code>Git: View File History</code>；提供了查看提交记录，文件历史，比较分支和不同提交之间的区别</li>
<li><strong>GitLens-Git supercharged</strong>: 该插件增强了VSCode自带的git功能，可以方便在每一行最后看到该行最近的改动记录。</li>
<li><strong>Markdown All in One</strong>: VSCode下编辑Markdown较为全能的插件，提供了键盘快捷方式、TOC目录、自动预览等功能</li>
<li><strong>Markdown Preview</strong>: 该插件是一个提供Github风格的Markdown预览插件</li>
<li><strong>open in browser</strong>: 该插件是一个允许用户用浏览器或应用程序打开当前的文件，方便HTML开发预览</li>
<li><strong>OpenAPI (Swagger) Editor</strong>: 该插件在VSCode中提供了对JSON或YAML格式的OpenAPI规范（OAS）（以前称为Swagger规范）的支持。 、包括，例如文档lint，代码导航，定义链接，静态安全分析等！</li>
<li><strong>openapi-lint</strong>: 该插件为OpenAPI文件提供了更为强大的lint功能，包括对$ref引用的lint</li>
<li><strong>Pylance</strong>: 该插件提供了VSCode上开发Python文件的服务支持，前身为Pyright，提供了包括python代码lint，自动跳转，自动导入等Pycharm才拥有的功能。该插件通常每周四更新</li>
<li><strong>Python</strong>: Python开发的基础插件，提供运行、调试、检测代码等功能</li>
<li><strong>Remote - SSH</strong>: VSCode上远程开发的必备插件，使您可以将带有SSH服务器的任何远程计算机用作开发环境。</li>
<li><strong>Remote - SSH: Editing Configuration Files</strong>: 编辑SSH配置文件时，此扩展补充了Remote-SSH扩展的语法颜色，关键字intellisense和简单摘要。</li>
<li><strong>YAML</strong>: 该插件提供对YAML语法支持以及内置的Kubernetes语法支持</li>
<li><strong>Comment Translate</strong>: vscode中的翻译插件，可以翻译注释，驼峰变量等单词，英语不好的开发者必备插件</li>
</ul>
<h2 id="常见的问题"><a href="#常见的问题" class="headerlink" title="常见的问题"></a>常见的问题</h2><h3 id="关闭预览功能"><a href="#关闭预览功能" class="headerlink" title="关闭预览功能"></a>关闭预览功能</h3><p>setting中搜索<code>workbench.editor.enablePreview</code>，将前面的勾去掉即可</p>
<h3 id="go包跳转到外部网站"><a href="#go包跳转到外部网站" class="headerlink" title="go包跳转到外部网站"></a>go包跳转到外部网站</h3><p>settings中搜索<code>Editor.Links</code>，将前面的勾去掉即可</p>
<h3 id="光标所在词组高亮"><a href="#光标所在词组高亮" class="headerlink" title="光标所在词组高亮"></a>光标所在词组高亮</h3><p>settings中搜索<code>editor.occurrencesHighlight</code>，去掉勾即可</p>
]]></content>
      <categories>
        <category>日常软件</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
        <tag>Windows</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket 工作原理</title>
    <url>/2023/websocket/</url>
    <content><![CDATA[<h2 id="握手过程"><a href="#握手过程" class="headerlink" title="握手过程"></a>握手过程</h2><p>WebSocket 握手过程是一个将 HTTP 升级为 WebSocket 的过程</p>
<ol>
<li><p>首先由客户端发送一个 GET 请求</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">/chat</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Host:</span> <span class="string">server.example.com</span></span><br><span class="line"><span class="attr">Upgrade:</span> <span class="string">websocket</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">Upgrade</span></span><br><span class="line"><span class="attr">Sec-WebSocket-Key:</span> <span class="string">dGhlIHNhbXBsZSBub25jZQ==</span></span><br><span class="line"><span class="attr">Origin:</span> <span class="string">http://example.com</span></span><br><span class="line"><span class="attr">Sec-WebSocket-Protocol:</span> <span class="string">chat,</span> <span class="string">superchat</span></span><br><span class="line"><span class="attr">Sec-WebSocket-Version:</span> <span class="number">13</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Upgrade</code>: 规定必需字段，值必需为 websocket，如果不是，则握手会失败</li>
<li><code>Connection</code>: 规定必需字段，值必需为 Upgrade，如果不是，则握手会失败</li>
<li><code>Sec-WebSocket-Key</code>: 必需字段，随机字符串</li>
<li><code>Sec-WebSocket-Protocol</code>: 可选字段，表示应用层的协议</li>
<li><code>Sec-WebSocket-Version</code>: 必需字段，代表 WebSocket 协议的版本，值必需为13，否则握手失败</li>
</ul>
</li>
<li><p>服务端会返回一个状态码为101的响应</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">HTTP/1.1</span> <span class="number">101</span> <span class="string">Switching</span> <span class="string">Protocols</span></span><br><span class="line"><span class="attr">Upgrade:</span> <span class="string">websocket</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">Upgrade</span></span><br><span class="line"><span class="attr">Sec-WebSocket-Accept:</span> <span class="string">s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span></span><br><span class="line"><span class="attr">Sec-WebSocket-Protocol:</span> <span class="string">chat</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Upgrade</code>: 规定必需字段，值必需为 websocket，如果不是，则握手会失败</li>
<li><code>Connection</code>: 规定必需字段，值必需为 Upgrade，如果不是，则握手会失败</li>
<li><code>Sec-WebSocket-Accept</code>: 规定必需字段，该字段是通过固定字符串 <code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code> 加上请求中的 <code>Sec-WebSocket-Key</code> 值，计算 SHA1 哈希摘要的结果</li>
<li><code>Sec-WebSocket-Protocol</code>: 对应请求中的 <code>Sec-WebSocket-Protocol</code></li>
</ul>
</li>
</ol>
<h2 id="WebSocket-协议数据帧"><a href="#WebSocket-协议数据帧" class="headerlink" title="WebSocket 协议数据帧"></a>WebSocket 协议数据帧</h2><p>数据帧的定义如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"> <span class="number">0</span>                   <span class="number">1</span>                   <span class="number">2</span>                   <span class="number">3</span></span><br><span class="line"> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="string">+-+-+-+-+-------+-+-------------+-------------------------------+</span></span><br><span class="line"><span class="string">|F|R|R|R|</span> <span class="string">opcode|M|</span> <span class="string">Payload</span> <span class="string">len</span> <span class="string">|</span>    <span class="string">Extended</span> <span class="string">payload</span> <span class="string">length</span>    <span class="string">|</span></span><br><span class="line"><span class="string">|I|S|S|S|</span>  <span class="string">(4)</span>  <span class="string">|A|</span>     <span class="string">(7)</span>     <span class="string">|</span>             <span class="string">(16/64)</span>           <span class="string">|</span></span><br><span class="line"><span class="string">|N|V|V|V|</span>       <span class="string">|S|</span>             <span class="string">|</span>   <span class="string">(if</span> <span class="string">payload</span> <span class="string">len==126/127)</span>   <span class="string">|</span></span><br><span class="line"><span class="string">|</span> <span class="string">|1|2|3|</span>       <span class="string">|K|</span>             <span class="string">|</span>                               <span class="string">|</span></span><br><span class="line"><span class="string">+-+-+-+-+-------+-+-------------+</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="string">+</span></span><br><span class="line"><span class="string">|</span>     <span class="string">Extended</span> <span class="string">payload</span> <span class="string">length</span> <span class="string">continued,</span> <span class="string">if</span> <span class="string">payload</span> <span class="string">len</span> <span class="string">==</span> <span class="number">127</span>  <span class="string">|</span></span><br><span class="line"><span class="string">+</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="string">+-------------------------------+</span></span><br><span class="line"><span class="string">|</span>                               <span class="string">|Masking-key,</span> <span class="string">if</span> <span class="string">MASK</span> <span class="string">set</span> <span class="string">to</span> <span class="number">1</span>  <span class="string">|</span></span><br><span class="line"><span class="string">+-------------------------------+-------------------------------+</span></span><br><span class="line"><span class="string">|</span> <span class="string">Masking-key</span> <span class="string">(continued)</span>       <span class="string">|</span>          <span class="string">Payload</span> <span class="string">Data</span>         <span class="string">|</span></span><br><span class="line"><span class="string">+--------------------------------</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="string">+</span></span><br><span class="line"><span class="string">:</span>                     <span class="attr">Payload Data continued ...                :</span></span><br><span class="line"><span class="string">+</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="string">+</span></span><br><span class="line"><span class="string">|</span>                     <span class="string">Payload</span> <span class="string">Data</span> <span class="string">continued</span> <span class="string">...</span>                <span class="string">|</span></span><br><span class="line"><span class="string">+---------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure>

<p>以上数据，一行代表 32 bit(位)，也就是 4 bytes，总体包含以上两部分，帧头部和数据内容。每个从 WebSocket 链接中接受到的数据帧，都要按照以上格式进行解析，这样才能知道该数据帧是用于控制的还是用于传送数据的。部分字段解释：</p>
<ul>
<li><code>FIN</code>: 1 bit，当该比特位值为 <code>%x0</code> 时，表示后面还有更多的数据帧，<code>%x1</code> 表示为最后一个数据帧</li>
<li><code>RSV1</code>, <code>RSV2</code>, <code>RSV3</code>: 各占 1 bit，一般全为 0，当客户端和服务端协商采用 WebSocket 扩展时，三个标志位为非 0，且该值由扩展进行定义。如果没有采用 WebSocket 扩展，且为非零时，连接出错</li>
<li><code>opcode</code> - 4 bit，用于表明数据帧的类型，一共可以表示 16 种帧类型<ul>
<li><code>%x0</code> - 表示这是一个分片的帧，属于前面帧的后续帧</li>
<li><code>%x1</code> - 表示数据帧携带的数据类型是文本类型，且编码为 UTF-8</li>
<li><code>%x2</code> - 表示携带的是二进制数据</li>
<li><code>%x3-7</code> - 保留未使用</li>
<li><code>%x8</code> - 表示该帧用于关闭 WebSocket 链接</li>
<li><code>%x9</code> - 表示该帧代表了 Ping 操作</li>
<li><code>%xA</code> - 表示该帧代表了 Pong 回应</li>
<li><code>%xB-F</code> - 保留未使用</li>
</ul>
</li>
<li><code>MASK</code> - 1 bit，<code>%x0</code> 表示数据帧没有经过掩码计算，<code>%x1</code> 表示数据帧经过了掩码计算，需要解码才能得到真正的数据，通常浏览器发送给服务器才会进行掩码计算</li>
<li><code>Payload len</code> - 7 bit，表示数据帧携带的数据长度，7 bit 代表的最大值为 127，会存在三种情况<ul>
<li><code>%x0-7D</code> - 0-125，表示数据长度，数据总长度的就是 7 bit 表示的长度</li>
<li><code>%x7E</code> - 126，则后续的 2 个字节（16 bit）表示一个16位的无符号数，这个数用来表示数据长度</li>
<li><code>%x7F</code> - 127，则后续的 8 个字节（64 bit）表示一个64位的无符号数，这个数用来表示数据长度</li>
</ul>
</li>
<li><code>Masking-key</code> - 32 bit，表示用于解码的 key，当只有 MASK 比特位的值为 %x1 时使用</li>
<li><code>Payload Data</code> - 余下的比特位用于存储具体的数据</li>
</ul>
<p>通过分析可知，WebSocket 的最大头部为 14 bytes，要实现 WebSocket，最主要的工作就是实现对数据帧的解析</p>
<h2 id="WebSocket-协议中的一些算法"><a href="#WebSocket-协议中的一些算法" class="headerlink" title="WebSocket 协议中的一些算法"></a>WebSocket 协议中的一些算法</h2><h3 id="Sec-WebSocket-Accept-的计算"><a href="#Sec-WebSocket-Accept-的计算" class="headerlink" title="Sec-WebSocket-Accept 的计算"></a><code>Sec-WebSocket-Accept</code> 的计算</h3><p><code>Sec-WebSocket-Accept</code> 值的计算方法是通过 <code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code> 加上请求中的 <code>Sec-WebSocket-Accept</code> 的值，然后对结果求 SHA1 哈希摘要，最后再转为base64。代码如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> keyGUID = []<span class="type">byte</span>(<span class="string">&quot;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">computeAcceptKey</span><span class="params">(challengeKey <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    h := sha1.New()</span><br><span class="line">    h.Write([]<span class="type">byte</span>(challengeKey))</span><br><span class="line">    h.Write(keyGUID)</span><br><span class="line">    <span class="keyword">return</span> base64.StdEncoding.EncodeToString(h.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">KEY_GUID = <span class="string">&#x27;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_accept_key</span>(<span class="params">challenge_key: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    m = hashlib.sha1()</span><br><span class="line">    m.update(challenge_key.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    m.update(KEY_GUID.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(m.digest()).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="掩码处理"><a href="#掩码处理" class="headerlink" title="掩码处理"></a>掩码处理</h3><p>如果浏览器发送的数据帧中 <code>MASK</code> 比特位的值为 %x1，那么就需要对数据进行掩码处理</p>
<p>掩码处理的流程为以下几个步骤</p>
<ol>
<li>将数据和 <code>Masking-key</code> 处理按字节处理</li>
<li>取出数据中的第 <code>i</code> 个字节 <code>item1</code>，</li>
<li>通过 <code>j = i MOD 4</code> 计算获得 <code>j</code>，从 <code>Masking-key</code> 中取出第 <code>j</code> 个字节的数据 <code>item2</code></li>
<li>将 <code>item1</code> 与 <code>item2</code> 进行异或得到最后结果</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maskBytes</span><span class="params">(key [4]<span class="type">byte</span>, pos <span class="type">int</span>, b[]<span class="type">byte</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> b &#123;</span><br><span class="line">        b[i] ^= key[pos &amp; <span class="number">3</span>]</span><br><span class="line">        pos++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pos &amp; <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mask_bytes</span>(<span class="params">key: <span class="built_in">str</span>, pos: <span class="built_in">int</span>, b: <span class="built_in">list</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">        b[i] ^= key[pos &amp; <span class="number">3</span>]</span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> pos &amp; <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>注意:</p>
<ul>
<li><code>pos &amp; 3</code> 的结果和 <code>pos % 4</code> 的结果是一样的，因为 <code>a % (2^n)</code> 等价于 <code>a &amp; (2^n - 1)</code> ，但是 <code>&amp;</code> 比 <code>%</code> 的效率要高</li>
<li>此处返回的 <code>pos</code> 是为了下次继续使用，如果数据帧中的数据长度大于 125，那么就需要多次进行掩码处理</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>参考 <a href="https://github.com/stolenzc/websocket">websocket</a></p>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10中AMD显卡开机黑屏问题</title>
    <url>/2020/window_issue/</url>
    <content><![CDATA[<p>分享一些Windows在使用时遇到的一些问题和一些解决办法，每个方法自己均实验过，确保能用，但不确保是最好的解决办法</p>
<h2 id="AMD显卡开机黑屏"><a href="#AMD显卡开机黑屏" class="headerlink" title="AMD显卡开机黑屏"></a>AMD显卡开机黑屏</h2><p>升级Windows10后，许多搭载AMD显卡的老机器开机的时候会有一到两分钟的黑屏时间，究其原因就是ulps导致的，一般解决办法有一下两种，一下办法提到的工具打包在<a href="https://stolenzc.lanzoui.com/iwqk9hcxlve">win10-amd_黑屏文件</a>：</p>
<p>方法一：</p>
<ol>
<li>在控制面版中卸载AMD的显卡程序</li>
<li>卸载完毕后，从win10设置-更新和安全-恢复-高级启动-立即重新启动中进入安全模式</li>
<li>在安全模式中使用DDU，单机清除并重启（clear and restart）</li>
<li>开机后，打开wushowhide.diagcab文件，选择hide updatas</li>
<li>重新安装最新显卡驱动</li>
</ol>
<p>方法二：</p>
<ol>
<li>运行ULPS中的disable注册表文件</li>
<li>选择重启（注意：不是关机，是重启）</li>
<li>在桌面右键-显示卡属性-电源-可切换显示卡全局设置-还有其他省电方法，将前面的勾去掉</li>
<li>先关机，再开机，在电源设置中将快速启动关闭。</li>
</ol>
]]></content>
      <categories>
        <category>日常软件</category>
      </categories>
      <tags>
        <tag>Issue</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows批处理命令</title>
    <url>/2020/windows_cmder/</url>
    <content><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>语法：<code>echo [on/off] [message]</code></p>
<p>说明：打开关闭回显，或显示输出消息，后面不加参数则显示当前回显设置，</p>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo hello,world</span><br></pre></td></tr></table></figure>

<p>备注：回显表示终端会显示当前这条命令内容，在命令前加@可以让当前命令不显示回显，只执行结果</p>
<h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>语法：<code>rem 注释内容</code></p>
<p>说明：注释掉后面的内容，不会执行，但是如果未关闭回显，该行内容会在终端显示</p>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rem 你好</span><br><span class="line">:: 你好</span><br></pre></td></tr></table></figure>

<p>备注：rem会回显该行命令，::不会回显该行命令</p>
<h3 id="pause"><a href="#pause" class="headerlink" title="pause"></a>pause</h3><p>语法：<code>pause</code></p>
<p>说明：通常为暂停程序执行，在终端上显示按任意键继续…</p>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo hello,world</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p>语法：<code>call [文件路径] [:label] [parameter]</code></p>
<p>说明：调用执行另一个bat文件，文件路径用绝对路径应该从磁盘开始，如<code>C:\Users\stolenzc\Desktop\hello.bat</code>，可以使用标签进行跳转，功能类似goto，但是使用标签前面必须加冒号，也可以向bat文件传参，另一个bat文件通过传参顺序<code>%1</code>、<code>%2</code>、<code>%3</code>取参数。</p>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">call :label1 hello world</span><br><span class="line">echo 1</span><br><span class="line">:label1</span><br><span class="line">echo %2 %1</span><br><span class="line">rem 执行结果：world hello 1 echo打开状态</span><br><span class="line">------------分割线-----------------</span><br><span class="line">call C:\Users\stolenzc\Desktop\hello.bat</span><br></pre></td></tr></table></figure>

<h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p>语法：<code>start 程序文件名或dos命令</code></p>
<p>说明：调用外部程序，所有DOS命令和命令行程序都可以在start后执行</p>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start calc.exe</span><br><span class="line">start shutdown -s -t 1000</span><br></pre></td></tr></table></figure>

<h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><p>语法：<code>goto 标签</code></p>
<p>说明：跳转到标签处继续向下执行</p>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:1</span><br><span class="line">start</span><br><span class="line">goto 1</span><br></pre></td></tr></table></figure>

<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>语法：<code>set a=5</code>、<code>set a=</code></p>
<p>说明：显示、设置或删除变量。</p>
<p>参数：</p>
<ul>
<li>&#x2F;A - 指定等号右边的字符串为数字表达式</li>
<li>&#x2F;P - 用户输入内容赋值给变量，等号右边可以设置输入提示</li>
</ul>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set a=5</span><br><span class="line">echo %a%</span><br><span class="line">set a=</span><br><span class="line">echo %a%</span><br><span class="line">rem 执行结果：5 ECHO处于打开状态</span><br></pre></td></tr></table></figure>

<p>备注：<code>set a=</code>表示删除变量，如果要使用变量前后需要加%</p>
<h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><p><code>@</code> - 本条命令在终端中关闭回显</p>
<p><code>&gt;</code> - 将输出内容写入到文件中去</p>
<p><code>&gt;&gt;</code> - 将输出内容追加到文件中去</p>
<p><code>&lt;</code> - 将输入信息来源指定为设备或文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set /p ifo=&lt;a.txt</span><br></pre></td></tr></table></figure>

<p><code>|</code> - 将管道前面的输出作为后面命令的输入</p>
<p><code>^</code> - 将特殊符号进行转义，如<code>| &amp; &gt; &lt;</code></p>
<p><code>%</code> - 转义<code>%</code>，如<code>%%</code>将输出<code>%</code></p>
<p><code>&amp;</code> - 连接多个命令，前面无论成功失败都执行后面的</p>
<p><code>&amp;&amp;</code> - 连接多个命令，前面成功时执行后面的</p>
<p><code>||</code> - 连接多个命令，前面失败时执行后面的</p>
<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2>]]></content>
      <categories>
        <category>Script</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows系统配置</title>
    <url>/2020/windows_config/</url>
    <content><![CDATA[<h2 id="关闭Windows-Defender"><a href="#关闭Windows-Defender" class="headerlink" title="关闭Windows Defender"></a>关闭Windows Defender</h2><p>定位到注册表<code>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SecurityHealthService</code>将start的值改为4即可。</p>
<h2 id="仅关闭defender实时保护"><a href="#仅关闭defender实时保护" class="headerlink" title="仅关闭defender实时保护"></a>仅关闭defender实时保护</h2><p>注册表<code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender</code>中新建DisableAntiSpyware，并双击赋值为1</p>
<h2 id="右下角时间显示秒"><a href="#右下角时间显示秒" class="headerlink" title="右下角时间显示秒"></a>右下角时间显示秒</h2><ol>
<li>定位到<code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced</code><br> 新建“DWORD 值”键入 ShowSecondsInSystemClock，修改“值”为1</li>
<li>重启电脑</li>
</ol>
<h2 id="锁屏界面设置显示秒"><a href="#锁屏界面设置显示秒" class="headerlink" title="锁屏界面设置显示秒"></a>锁屏界面设置显示秒</h2><ol>
<li><p>控制面板中’更改时间日期、数字格式&gt;格式-其他设置&gt;时间-时间格式-短格式:H:mm:ss</p>
</li>
<li><p>重启电脑</p>
</li>
</ol>
<h2 id="完全控制面板"><a href="#完全控制面板" class="headerlink" title="完全控制面板"></a>完全控制面板</h2><p>新建文件夹命名为:<code>GodMode.&#123;ED7BA470-8E54-465E-825C-99712043E01C&#125;</code></p>
<h2 id="更改字体"><a href="#更改字体" class="headerlink" title="更改字体"></a>更改字体</h2><p>定位到<code>\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts</code>:(<code>Microsoft YaHei &amp; Microsoft YaHei UI (TrueType)</code>)和(<code>Microsoft YaHei Bold &amp; Microsoft YaHei UI Bold(TrueType)</code>)改为自己喜欢的字体即可.</p>
<h2 id="关闭资源管理器多余的图标"><a href="#关闭资源管理器多余的图标" class="headerlink" title="关闭资源管理器多余的图标"></a>关闭资源管理器多余的图标</h2><ol>
<li>打开注册表编辑器</li>
<li>搜索并定位到 <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions</code>，此时你会看到很多长字符串；</li>
<li>我们的目的就是找出其中代表6个置顶文件夹的字符串，然后将其子项“PropertyBag”中的“ThisPCPolicy”由show改为Hide即可，具体对应关系如下：<ul>
<li>图片：<code>&#123;0ddd015d-b06c-45d5-8c4c-f59713854639&#125;＼PropertyBag</code></li>
<li>视频：<code>&#123;35286a68-3c57-41a1-bbb1-0eae73d76c95&#125;＼PropertyBag</code></li>
<li>下载：<code>&#123;7d83ee9b-2244-4e70-b1f5-5393042af1e4&#125;＼PropertyBag</code></li>
<li>音乐：<code>&#123;a0c69a99-21c8-4671-8703-7934162fcf1d&#125;＼PropertyBag</code></li>
<li>桌面：<code>&#123;B4BFCC3A-DB2C-424C-B029-7FE99A87C641&#125;＼PropertyBag</code></li>
<li>文档：<code>&#123;f42ee2d3-909f-4907-8871-4c22fc0bf756&#125;＼PropertyBag</code></li>
</ul>
</li>
<li>删除3D对象，<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\</code><br>找到<code>&#123;0DB7E03F-FC29-4DC6-9020-FF41B59E513A&#125;</code>，删除它</li>
</ol>
<h2 id="卸载自带软件"><a href="#卸载自带软件" class="headerlink" title="卸载自带软件"></a>卸载自带软件</h2><p>以管理员身份运行powershell执行命令</p>
<p><code>Get-AppxPackage | Select Name, PackageFullName</code> - 获取软件包名</p>
<p>人脉：<code>get-appxpackage *Microsoft.People* | remove-appxpackage</code></p>
<p>获取帮助：<code>get-appxpackage *Microsoft.GetHelp* | remove-appxpackage</code></p>
]]></content>
      <categories>
        <category>日常软件</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows必备的软件和安装方法</title>
    <url>/2020/windows_software_manual/</url>
    <content><![CDATA[<h2 id="Listary"><a href="#Listary" class="headerlink" title="Listary"></a>Listary</h2><p>Listary是一款Windows下非常好用的搜索工具，不论是搜文件，搜软件，速度都极快。下载地址：<a href="https://www.listary.com/">官网</a></p>
<p>软件分为免费版和pro版，从个人使用来说，免费版已经足够使用了，使用双击Ctrl唤出搜索框，然后输入查找内容。该程序本质上来说只是搜索文件，但可以查找到软件的启动文件从而实现软件查找。还可以自定义配置，比如我在<code>关键字&gt;自定义</code>中定义了<code>psa</code>，设置路径为<code>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</code>，并且勾选以管理员身份运行，那么在搜索框中输入psa就可以直接启动管理员身份的powershell。</p>
<h2 id="QuickLook"><a href="#QuickLook" class="headerlink" title="QuickLook"></a>QuickLook</h2><p>这也是一个继承Mac优秀体验的软件，通过空格键对文件进行快速预览，源码地址：<a href="https://github.com/QL-Win/QuickLook">QuickLook</a>，相同功能的还有<a href="http://1218.io/">Seer</a></p>
<p>QuickLook有个小问题，看html文件没法查看源代码，而是显示的渲染后的页面。但Seer是直接查看源代码。但不知道为什么，本人更喜欢QuickLook这款软件。</p>
<p>QuickLook和Seer都没法直接查看office文件，需要安装相应的插件，而且安装了相应的插件后，预览速度也非常慢。这一点都没有什么好的解决办法。</p>
<h2 id="Listen1"><a href="#Listen1" class="headerlink" title="Listen1"></a>Listen1</h2><p>Listen1是一款开源的多平台听歌软件，源代码地址：<a href="https://github.com/listen1/listen1_desktop">Listen1桌面版</a>、<a href="https://github.com/listen1/listen1_chrome_extension">Listen1浏览器插件版</a></p>
<p>说明：这款软件目前还能使用，但是虾米音乐的部分内容已经没法用了，最近的一次代码提交也是五个月之前（2019-11），所以可能这款软件已经成为了历史，不过依然还是能听QQ音乐、网易云音乐、酷狗音乐、酷我音乐、咪咕音乐的歌曲</p>
<p>重要说明：该软件不支持缓存歌曲，所有歌曲均需要联网在线听。</p>
<h2 id="Geek"><a href="#Geek" class="headerlink" title="Geek"></a>Geek</h2><p>Geek是一款非常优秀的软件卸载工具，下载地址：<a href="https://geekuninstaller.com/">官网</a></p>
<p>软件分为免费版和付费版，但我试用了付费版发现还没有免费版好用，该软件可以自动标记出新安装的软件，卸载完成后，会进行文件残留扫描和注册表清理，相对于控制面板中进行卸载能更彻底，</p>
<p>重要说明：本人使用该软件卸载Windows Store app的时候，卸载完的app回自动恢复，推荐卸载Windows自带的app还是使用Win10设置或者使用Powershell进行卸载。</p>
<h2 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a>Velocity</h2><p>Velocity是一款Windows下的开发文档查询手册，文档来源也是dash的源，下载地址<a href="https://velocity.silverlakesoftware.com/">Velocity官网</a>，相同的还有<a href="https://zealdocs.org/">Zeal</a></p>
<p>两款软件大部分的docsets都来自于dash，Velocity支持第三方用户上传的docsets，例如可以下载djangorestframework手册，Zeal是通过第三方网站<a href="https://zealusercontributions.now.sh/">Zeal User Contributions</a>来支持第三方手册的。Velocity的界面不如Zeal美观，而且两款软件下载docsets的速度都异常缓慢。此处推荐搭配网页版手册查询站使用<a href="https://devdocs.io/">Dev Docs</a></p>
<p>Velocity并不是一款完全免费的软件，未付费使用会时常弹出8秒的弹框，但是不影响功能上的使用。</p>
<h2 id="FastCopy"><a href="#FastCopy" class="headerlink" title="FastCopy"></a>FastCopy</h2><p>FastCopy是一款Windows下快速复制和备份的软件，下载地址：<a href="https://mapaler.github.io/FastCopy-M/">官方网址</a></p>
<p>FastCopy最实用的场景为进程需要对大量琐碎文件进行备份。如果使用完全拷贝会花费大量的时间，如果进行差异拷贝，则同名文件不会进行拷贝，FastCopy可以按照文件的大小和最后修改时间进行备份，修改过的文件就拷贝，未修改过的文件就不拷贝，这样可以在极短的时间内进行全量备份。</p>
<h2 id="HeidiSQL"><a href="#HeidiSQL" class="headerlink" title="HeidiSQL"></a>HeidiSQL</h2><p>HeidiSQL是一款程序员必备的SQL图形化客户端软件，下载地址：<a href="https://www.heidisql.com/">HeidiSQL官网</a></p>
<p>HeidiSQL是一款免费的SQL图形化软件，支持MySQL、MariaDB、Microsoft SQL server、PostgreSQL。界面美观，功能强大、免费好用。</p>
<h2 id="Termius"><a href="#Termius" class="headerlink" title="Termius"></a>Termius</h2><p>Termius是一款跨平台的SSH连接客户端，下载地址：<a href="https://www.termius.com/">Termius官网</a></p>
<p>Termius最大的特点就是简洁美观，该软件可以免费使用。多个命令行窗口管理，还可以配置本地命令行工具，直接在软件内使用本机的命令行，配合多窗口管理，可以告别开多个cmd或powershell的时代。多窗口管理微软也推出了一款软件：<a href="https://github.com/Microsoft/Terminal">Windows Terminal</a>，安装推荐使用Microsoft Store</p>
<h2 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h2><p>Postman是一款接口测试工具，提供了丰富的请求方式和便捷的参数传递方式，下载地址：<a href="https://www.postman.com/">Postman官网</a></p>
<p>这里还推荐一款国内的接口测试工具，叫做<a href="https://www.apipost.cn/">ApiPost</a>，纯中文支持，内存占用也比Postman小</p>
<h2 id="PotPlayer"><a href="#PotPlayer" class="headerlink" title="PotPlayer"></a>PotPlayer</h2><p>超级好用的一款Windows本地视频播放器，下载地址：<a href="http://potplayer.daum.net/">PotPlayer官网</a>（该地址为墙外地址）</p>
<p>作为本地视频播放器，国内也有不少，最出名的要数暴风影音、新版QQ影音。暴风影音有个最大的问题就是倍速播放声音会失真，QQ影音使用过一段时间，但总感觉用着不顺手，特别是快进和快退。当然不看本地视频内容这些软件就都没必要了。</p>
<h2 id="IDM"><a href="#IDM" class="headerlink" title="IDM"></a>IDM</h2><p>Windows下最好用的下载器，下载地址：<a href="http://www.internetdownloadmanager.com/">IDM官网</a>，备用网址：<a href="https://stolenzc.lanzoui.com/iJOKXhcxlpi">IDM6.36</a></p>
<p>该软件并不是免费软件，30天免费试用后需要购买才能继续使用，<a href="https://stolenzc.lanzoui.com/iXytqhcxloh">trial reset软件</a>可以将试用时间重新调为30天，以此一直用下去。</p>
<p>也可以使用<a href="https://stolenzc.lanzoui.com/ioy0lhcxlng">Patch软件</a>，按照安装说明注册，该方法通常更加稳定。</p>
<h2 id="VScode"><a href="#VScode" class="headerlink" title="VScode"></a>VScode</h2><p>这个软件不用介绍，最强大的编辑器，懂的自然懂，下载地址：<a href="https://code.visualstudio.com/">VScode官网</a>（访问速度经常感人）</p>
<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>会对Markdown文件进行实时渲染的软件，用来看Markdown通常是最好的选择，下载地址：<a href="https://typora.io/">Typora官网</a></p>
<h2 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h2><p>Python开发利器。如果是Python开发者，选它就对了，下载地址：<a href="https://www.jetbrains.com/pycharm/">Pycharm官网</a></p>
<h2 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h2><p>微软最新出品的基于chromium内核的浏览器，比Chrome更好用，支持同步，能直接访问扩展商店，多平台支持（当前还缺少Linux的支持），下载地址：<a href="https://www.microsoft.com/zh-cn/edge">Edge稳定版</a>、<a href="https://www.microsoftedgeinsider.com/zh-cn/download/">Edge开发版</a></p>
<h2 id="m3u8-ffmpeg"><a href="#m3u8-ffmpeg" class="headerlink" title="m3u8+ffmpeg"></a>m3u8+ffmpeg</h2><p>该软件的介绍主要是为了补充IDM的功能，IDM拥有强大的站点抓取功能，许多在线观看的视频都能抓取到下载链接，但是现在出现了一种直播格式m3u8，该格式主要是将视频文件分为了许多ts文件，从而禁止视频的下载。此处提供的<code>N_m3u8DL-CLI_v2.6.3.exe</code>主要作用是解析m3u8文件，将其中的ts文件全部下载下来；<code>ffmpeg.exe</code>文件主要就是将所有的ts文件整合为一个视频文件，方便管理观看。</p>
<p><strong>重要说明：</strong><code>ffmpeg.exe</code>文件需要放在<code>N_m3u8DL-CLI_v2.6.3.exe</code>同级目录下或者配置在环境变量中。</p>
<p>下载地址：<a href="https://stolenzc.lanzoui.com/iYYvohcxlqj">m3u8-download</a></p>
<p>源码地址：<a href="https://github.com/nilaoda/N_m3u8DL-CLI">N_m3u8DL-CLI</a></p>
]]></content>
      <categories>
        <category>日常软件</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal使用技巧</title>
    <url>/2020/windows_terminal/</url>
    <content><![CDATA[<h2 id="配置教程"><a href="#配置教程" class="headerlink" title="配置教程"></a>配置教程</h2><p>详细配置参阅<a href="https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md">Windows Terminal Settings Schema</a></p>
<p>有关中文翻译参阅<a href="https://www.jianshu.com/p/13e832853926"></a></p>
<h3 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 默认的命令行工具</span></span><br><span class="line">    <span class="attr">&quot;defaultProfile&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&#123;58ad8b0c-3ef8-5f4d-bc6f-13e4c00f2530&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 窗口宽度</span></span><br><span class="line">    <span class="attr">&quot;initialCols&quot;</span> <span class="punctuation">:</span> <span class="number">90</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 窗口高度</span></span><br><span class="line">    <span class="attr">&quot;initialRows&quot;</span> <span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 默认主题</span></span><br><span class="line">    <span class="attr">&quot;requestedTheme&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 快捷键配置</span></span><br><span class="line">    <span class="attr">&quot;keybindings&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 设置命令行的唯一id</span></span><br><span class="line">    <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 设置命令行显示的名称</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Windows PowerShell&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 设置命令行执行时候运行的程序</span></span><br><span class="line">    <span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;powershell.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 设置命令行的字体</span></span><br><span class="line">    <span class="attr">&quot;fontFace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Cascadia Code&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 设置命令行的字体大小</span></span><br><span class="line">    <span class="attr">&quot;fontSize&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 设置是否显示该命令行</span></span><br><span class="line">    <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 设置启动后所在的路径</span></span><br><span class="line">    <span class="attr">&quot;startingDirectory&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 使用不透明度</span></span><br><span class="line">    <span class="attr">&quot;useAcrylic&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 不透明度</span></span><br><span class="line">    <span class="attr">&quot;acrylicOpacity&quot;</span><span class="punctuation">:</span> <span class="number">0.75</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 退出后关闭</span></span><br><span class="line">    <span class="attr">&quot;closeOnExit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 颜色主题选择（需要在Schema中配置）</span></span><br><span class="line">    <span class="attr">&quot;colorScheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Campbell&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 光标颜色</span></span><br><span class="line">    <span class="attr">&quot;cursorColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 光标类型，可选值 &quot;vintage&quot; ( ▃ ), &quot;bar&quot; ( ┃ ), </span></span><br><span class="line">    <span class="comment">// &quot;underscore&quot; ( ▁ ), &quot;filledBox&quot; ( █ ), &quot;emptyBox&quot; ( ▯ )</span></span><br><span class="line">    <span class="attr">&quot;cursorShape&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bar&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 历史大小</span></span><br><span class="line">    <span class="attr">&quot;historySize&quot;</span><span class="punctuation">:</span> <span class="number">9001</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;padding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0, 0, 0, 0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 嗅探输入</span></span><br><span class="line">    <span class="attr">&quot;snapOnInput&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>如果每个命令行工具的配置相同，可以配置在default中，表示对所有命令行生效</p>
<p><strong>注意：</strong>如果配置中需要填写路径，用Windows中的<code>\</code>时需要进行转义，可以使用<code>/</code>来表示路径</p>
<h2 id="在当前目录打开方法"><a href="#在当前目录打开方法" class="headerlink" title="在当前目录打开方法"></a>在当前目录打开方法</h2><ol>
<li>配置命令行的<code>startingDirectory</code>为null</li>
<li>在需要打开的目录中按<code>ctrl + L</code>或者光标定位到文件管理器地址栏</li>
<li>输入wt，按回车，就会从当前目录中打开Windows Terminal默认的命令行工具</li>
</ol>
<h2 id="配置键盘切换tab页"><a href="#配置键盘切换tab页" class="headerlink" title="配置键盘切换tab页"></a>配置键盘切换tab页</h2><ol>
<li>在配置中的<code>keybindings</code>中添加<code>&#123; &quot;command&quot;: &#123; &quot;action&quot;: &quot;switchToTab&quot;, &quot;index&quot;: 0&#125;, &quot;keys&quot;: [&quot;ctrl+alt+1&quot;]&#125;,</code></li>
<li>如果经常打开多个标签页，可以多配置几条信息</li>
<li>使用<code>ctrl+alt+数字键就可以完成tab页的切换</code></li>
</ol>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p><code>shift + alt + =</code> - 横向分屏</p>
<p><code>shift + alt + -</code> - 竖向分屏</p>
]]></content>
      <categories>
        <category>日常软件</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Script</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows启用WSL2</title>
    <url>/2020/wsl/</url>
    <content><![CDATA[<h2 id="系统版本"><a href="#系统版本" class="headerlink" title="系统版本"></a>系统版本</h2><p>Windows：Windows10 2004 19041.207</p>
<p>Linux：Ubuntu 18.04LTS 20190521build</p>
<h2 id="切换WSL"><a href="#切换WSL" class="headerlink" title="切换WSL"></a>切换WSL</h2><h3 id="1-打开wsl"><a href="#1-打开wsl" class="headerlink" title="1. 打开wsl"></a>1. 打开wsl</h3><p>可以通过<code>控制面板&gt;程序&gt;程序和功能&gt;启用或关闭Windows功能</code>，勾选<code>适用于Linux的Windows子系统</code>和<code>启用虚拟机平台</code></p>
<p>也可以通过powershell命令行进行开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用虚拟机平台</span></span><br><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform</span><br><span class="line"><span class="comment"># 启用WSL</span></span><br><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：修改之后需要进行重启，虚拟机平台一定要启动，否则无法将Linux发行版转到WSL2上去</p>
<h3 id="2-安装一个Linux"><a href="#2-安装一个Linux" class="headerlink" title="2. 安装一个Linux"></a>2. 安装一个Linux</h3><p>在Microsoft Store里面搜索Linux就可以看到许多支持WSL的Linux，选择一个你喜欢的进行下载，<strong>下载好后打开才会进行安装</strong>，直到提示输入用户名和密码，表示安装已经完成</p>
<h3 id="3-WSL1和WSL2的切换"><a href="#3-WSL1和WSL2的切换" class="headerlink" title="3. WSL1和WSL2的切换"></a>3. WSL1和WSL2的切换</h3><p>WSL2的使用必须要Windows系统版本大于或等于<strong>Windows 10.0.18917</strong></p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>wsl -l</code></td>
<td align="left">列出当前所有安装的Linux发行版</td>
</tr>
<tr>
<td align="left"><code>wsl --set-version &lt;Distro&gt; 2</code></td>
<td align="left">WSL版本的切换，<code>&lt;Distro&gt;</code>表示Linux发行版的名称，即<code>wsl -l</code>列出的名称</td>
</tr>
<tr>
<td align="left"><code>wsl --set-default-version 2</code></td>
<td align="left">设置默认安装的Linux发行版都在WSL2上</td>
</tr>
<tr>
<td align="left"><code>wsl --list --verbose</code></td>
<td align="left">查看所有安装的Linux发行版并且在哪个WSL上面。</td>
</tr>
<tr>
<td align="left"><code>wsl --shutdown</code></td>
<td align="left">终止所有正在运行的Linux发行版和WSL2容器</td>
</tr>
</tbody></table>
<p><strong>注意</strong>：如果显示”WSL 2 需要更新其内核组件“，可以访问<a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-kernel">更新 WSL 2 Linux 内核</a>进行下载更新包。</p>
]]></content>
      <categories>
        <category>技术工具</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
